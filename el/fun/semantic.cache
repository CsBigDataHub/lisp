;; Object fun/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "fun/"
  :tables (list 
   (semanticdb-table "bubblet.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [3245 3258]) ("cus-edit" include nil nil [3259 3278]) ("defgroup" code nil nil [3280 3339]) ("bubblet-draw-connected" variable (:user-visible-flag t :default-value t) nil [3341 3523]) ("bubblet-quick-remove" variable (:user-visible-flag t) nil [3525 3653]) ("bubblet-save-scores" variable (:user-visible-flag t :default-value t) nil [3655 3779]) ("bubblet-verbose-display" variable (:user-visible-flag t) nil [3781 3938]) ("bubblet-wildcard-percentage" variable (:user-visible-flag t) nil [3940 4071]) ("bb-cell-height" variable (:user-visible-flag t :default-value 2) nil [4073 4177]) ("bb-cell-width" variable (:user-visible-flag t :default-value 5) nil [4179 4281]) ("defgroup" code nil nil [4283 4356]) ("bb-face-r" variable (:default-value (quote ((t (:background "red4" :foreground "white"))))) nil [4358 4480]) ("bb-face-rr" variable (:default-value (quote ((t (:background "red" :foreground "white" :bold t))))) nil [4482 4621]) ("bb-face-g" variable (:default-value (quote ((t (:background "forestgreen" :foreground "white"))))) nil [4623 4754]) ("bb-face-gg" variable (:default-value (quote ((t (:background "green" :foreground "black" :bold t))))) nil [4756 4899]) ("bb-face-b" variable (:default-value (quote ((t (:background "blue1" :foreground "white"))))) nil [4901 5025]) ("bb-face-bb" variable (:default-value (quote ((t (:background "cyan" :foreground "black"))))) nil [5027 5160]) ("bb-face-y" variable (:default-value (quote ((t (:background "yellow3" :foreground "black"))))) nil [5162 5290]) ("bb-face-yy" variable (:default-value (quote ((t (:background "yellow" :foreground "black"))))) nil [5292 5429]) ("bb-face-w" variable (:default-value (quote ((t (:background "grey75" :foreground "black"))))) nil [5431 5557]) ("bb-face-ww" variable (:default-value (quote ((t (:background "white" :foreground "black"))))) nil [5559 5694]) ("bb-face-*" variable (:default-value (quote ((t (:background "black" :foreground "red"))))) nil [5696 5822]) ("bb-face-**" variable (:default-value (quote ((t (:background "gray50" :foreground "red"))))) nil [5824 5961]) ("bubblet-num-games" variable nil nil [5963 6017]) ("bubblet-high-score" variable nil nil [6018 6061]) ("bubblet-high-stats" variable (:default-value (quote (0 0))) nil [6062 6135]) ("bubblet-total-score" variable nil nil [6136 6210]) ("bubblet-total-stats" variable (:default-value (quote (0 0))) nil [6211 6279]) ("bb--colnum" variable nil nil [6510 6531]) ("bb--rownum" variable nil nil [6532 6553]) ("bb--board" variable nil nil [6554 6576]) ("bb-aref" function (:arguments ("b" "row" "col")) nil [6599 6651]) ("bb-aset" function (:arguments ("b" "row" "col" "val")) nil [6652 6719]) ("bb-print-board" function (:arguments ("b")) nil [6720 6965]) ("bb-make-board" function (:arguments ("&optional" "state")) nil [6967 7114]) ("bb-num-cols" variable (:constant-flag t :default-value 10) nil [7332 7357]) ("bb-num-rows" variable (:constant-flag t :default-value 7) nil [7358 7382]) ("bb-color-array" variable (:constant-flag t :default-value [r g b y w]) nil [7383 7420]) ("bb-num-colors" variable (:constant-flag t :default-value (length bb-color-array)) nil [7421 7469]) ("bb-new-column" function (:arguments ("&optional" "state")) nil [7506 7789]) ("bb-down-cell" function (:arguments ("num")) nil [7884 7942]) ("bb-right-cell" function (:arguments ("num")) nil [7943 8012]) ("bb-print-column" function (:arguments ("column")) nil [8014 8279]) ("bb-print-cell" function (:arguments ("cell" "&rest" "plist")) nil [8281 10480]) ("bb-select" function (:arguments ("board" "row" "col")) nil [10664 10965]) ("bb-selected-p" function (:arguments ("board" "row" "col")) nil [10967 11094]) ("bb-deselect" function (:arguments ("board")) nil [11096 11501]) ("bb-select-helper" function (:arguments ("board" "row" "col" "sym" "selected-sym")) nil [11503 12100]) ("bb-has-adjacents-p" function (:arguments ("b")) nil [12102 12646]) ("bb-remove-cells" function (:arguments ("board" "row" "col" "&optional" "state")) nil [12648 13600]) ("bbg-modeline" variable nil nil [13823 13884]) ("make-variable-buffer-local" code nil nil [13885 13927]) ("bbc-board" variable nil nil [13956 13978]) ("bbc-old-high-score" variable nil nil [13979 14008]) ("bbc-old-high-stats" variable (:default-value (quote (0 0))) nil [14009 14043]) ("bbc-score" variable nil nil [14044 14081]) ("bbc-num-selected" variable nil nil [14082 14143]) ("bbc-num-moves" variable nil nil [14144 14193]) ("bbc-num-bubbles" variable nil nil [14194 14249]) ("bbc-num-columns" variable nil nil [14250 14306]) ("bbc-game-over" variable nil nil [14307 14360]) ("bbc-undo-list" variable nil nil [14361 14387]) ("bbc-initial-state" variable nil nil [14388 14446]) ("bbc-current-state" variable nil nil [14447 14505]) ("make-variable-buffer-local" code nil nil [14506 14545]) ("make-variable-buffer-local" code nil nil [14546 14594]) ("make-variable-buffer-local" code nil nil [14595 14634]) ("make-variable-buffer-local" code nil nil [14635 14677]) ("make-variable-buffer-local" code nil nil [14678 14724]) ("make-variable-buffer-local" code nil nil [14725 14768]) ("make-variable-buffer-local" code nil nil [14769 14814]) ("make-variable-buffer-local" code nil nil [14815 14860]) ("make-variable-buffer-local" code nil nil [14861 14904]) ("make-variable-buffer-local" code nil nil [14905 14948]) ("make-variable-buffer-local" code nil nil [14949 14996]) ("make-variable-buffer-local" code nil nil [14997 15044]) ("bubblet-menu" variable nil nil [15046 15071]) ("if" code nil nil [15072 15504]) ("bubblet-mode-map" variable nil nil [15506 15535]) ("if" code nil nil [15536 16035]) ("bubblet" function (:user-visible-flag t) nil [16037 16292]) ("bubblet-mode" function nil nil [16294 17105]) ("bbc-board-state" variable (:default-value (make-random-state t)) nil [17107 17153]) ("bubblet-new-game" function (:user-visible-flag t :arguments ("&optional" "force")) nil [17154 17718]) ("bubblet-refresh-modeline" function nil nil [17720 18190]) ("bubblet-refresh-display" function nil nil [18192 19703]) ("bubblet-mouse-select" function (:user-visible-flag t :arguments ("evt")) nil [19705 20235]) ("bubblet-select" function (:user-visible-flag t :arguments ("point")) nil [20237 21767]) ("bbc-stats" function nil nil [21769 21883]) ("bubblet-push-state" function nil nil [21885 22060]) ("bubblet-undo" function (:user-visible-flag t) nil [22062 23017]) ("bubblet-reset" function nil nil [23019 23169]) ("bubblet-quit" function (:user-visible-flag t) nil [23171 23278]) ("bubblet-add-score" function (:arguments ("score" "stats")) nil [23420 24017]) ("bubblet-remove-score" function (:arguments ("score" "stats" "old-high-score" "old-high-stats")) nil [24019 24633]) ("bubblet-points" function (:arguments ("size")) nil [24635 24742]) ("bubblet" package nil nil [24744 24762]))
    :file "bubblet.el"
    :pointmax 24765
    )
   (semanticdb-table "dot-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("dot-mode-version" variable (:constant-flag t :default-value "1.9") nil [4925 5009]) ("dot-mode" variable nil nil [7627 7682]) ("make-variable-buffer-local" code nil nil [7683 7721]) ("dot-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (if (fboundp (quote read-kbd-macro)) (progn (define-key map (read-kbd-macro "C-.") (quote dot-mode-execute)) (define-key map (read-kbd-macro "C-M-.") (quote dot-mode-override)) (define-key map (read-kbd-macro "C-c .") (quote dot-mode-copy-to-last-kbd-macro))) (define-key map [(control 46)] (quote dot-mode-execute)) (define-key map [(control meta 46)] (quote dot-mode-override)) (define-key map [(control 99) (46)] (quote dot-mode-copy-to-last-kbd-macro))) map)) nil [7723 8357]) ("if" code nil nil [8394 8748]) ("add-minor-mode" code nil nil [8750 8796]) ("dot-mode-global-mode" variable (:default-value t) nil [8827 8920]) ("dot-mode-ignore-undo" variable (:default-value t) nil [8922 8986]) ("dot-mode-changed" variable nil nil [8988 9053]) ("dot-mode-cmd-buffer" variable nil nil [9055 9107]) ("dot-mode-cmd-keys" variable nil nil [9109 9155]) ("dot-mode-state" variable nil nil [9157 9319]) ("dot-mode-minibuffer-input" variable nil nil [9321 9405]) ("dot-mode-copy-to-last-kbd-macro" function (:user-visible-flag t) nil [9407 9815]) ("dot-mode-buffer-to-string" function nil nil [9817 10538]) ("dot-mode-minibuffer-exit" function nil nil [10540 11187]) ("dot-mode-execute" function (:user-visible-flag t) nil [11189 12544]) ("dot-mode-override" function (:user-visible-flag t) nil [12546 12767]) ("dot-mode-after-change" function (:arguments ("start" "end" "prevlen")) nil [12769 14215]) ("dot-mode-pre-hook" function nil nil [14217 16045]) ("dot-mode-command-keys" function (:user-visible-flag t) nil [16127 16536]) ("dot-mode-loop" function nil nil [16538 17475]) ("dot-mode" function (:user-visible-flag t :arguments ("arg")) nil [17477 19322]) ("dot-mode-on" function (:user-visible-flag t) nil [19324 19399]) ("defalias" code nil nil [19401 19442]) ("dot-mode" package nil nil [19444 19463]))
    :file "dot-mode.el"
    :pointmax 19491
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
