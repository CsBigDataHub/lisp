Info file: mew.jis.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `mew.texi'
using `texinfmt.el' version 2.40 of  6 Dec 2002.

INFO-DIR-SECTION Message User Agent
START-INFO-DIR-ENTRY
* Mew-J: (mew.jis.info).     Messaging in the Emacs World.
END-INFO-DIR-ENTRY







File: mew.jis.info, Node: charset-guess, Next: reply, Prev: mime-comp, Up: Composing

文字コードの決定
================

Mew はシングルパートとマルチパートの両方に対し、配送時の文字コードを決
定する機能を持っています。

<シングルパート>

Draft モードで `C-cC-m' や `C-cC-c' と入力しメッセージを作成すると、
Mew は本文の内部表現から配送時の文字コードを決定します。バイリンガル
Emacs では、7ビットの文字コードに対し US-ASCII を選び、8 ビットの文字コー
ドに対し ISO-8859-1 を選択します。国際化 Emacs では、内部表現から Mew
が定めた規則に従って、配送時の文字コードを決定します。

<マルチパート>

マルチパートの一部として添付するデータは、ファイルですからディスク上に
存在します。そこで、メッセージの作成の際に、配送時の文字コードを決定す
るためには、まず Emacs のバッファに取り込み、内部表現に直す必要がありま
す。内部表現に直した後は、シングルパートと同様の方法で、配送時の文字コー
ドを決定します。

バイリンガル Emacs では、Mew はファイルをそのままの形式で読み込みます。
ですから、7ビットのファイルには US-ASCII が、8ビットのファイルには
ISO-8859-1 が選ばれます。

国際化 Emacs では、Mew は環境(つまり auto conversion)に従って、文字コー
ドを推測しながらファイルを読み込みます。国際化 Emacs でこの環境を決定す
るコマンドは、`C-x RET l' です。

たとえば、日本語の環境では、国際化 Emacs は ISO-2022-JP、EUC-JP、そして、
Shift_JIS を見事に推測し、日本語用の内部表現に変換してバッファに格納し
ます。Mew はこの内部表現から、配送時の文字コードとして ISO-2022-JP を選
択します。つまり、ファイルの文字コードが EUC-JP や Shift-JIS であっても、
配送用の ISO-2022-JP に自動的に変換されます。そこでユーザは、添付するファ
イルの文字コードを気にすることなしに、ファイルを添付可能です。

もし、ディスク上のファイルの coding-system を明示的に指定したいなら`I'
を使って下さい。これを入力文字コードと呼ぶことにします。また、配送時の
coding-system を明示的に指示したいなら、`C' を利用して下さい。

文字コードの情報は、添付領域において、丸括弧の内側に表示されます。もし、
配送時の文字コードが明示的に指定されていれば、それが表示されます。そう
でなくて、入力文字コードが明示的に指定されていれば、それが "*" と共に表
示されます。そうでなければ、"guess" と表示されます。

以下の例の見て下さい。パート1は、本文ですからあらかじめバッファ内にあり
ます。"guess" と表示されていますから、配送時の文字コードを Mew が定めた
規則に従って決定します。

パート2は、入力文字コードとして iso-8859-1 が指定されていますので、ファ
イルの文字コードを iso-8859-1 であるとして読み込み、内部表現に変換しま
す。配送時の文字コードは Mew が定めた規則に従って決定します。

パート 3 の入力文字コードは、この例だけからだと明示的に指定されているか
分かりません。(しかし、ユーザ自身はは実際に指定したか分かっているはずで
す。) とにかく、ファイルは内部表現に直され、配送時の文字コードに指定さ
れている EUC-JP に変換されます。

     ----------------------------- attachments -----------------------------
           Multipart/Mixed                                         1/
          1  Text/Plain(guess)                                       CoverPage*
          2  Text/Plain(*iso-8859-1)                                 text1
     B    3  Text/Plain(euc-jp)                                      text2
          4                                                          .
     --------0-1-2-3-4-5-6-7-8-9--------------------------------------------

バイリンガル Emacs では `C' と `I' は利用できません。



File: mew.jis.info, Node: reply, Next: forward, Prev: charset-guess, Up: Composing

メッセージへの返答と宛先の決定
==============================

新規にメッセージを書く場合は、To:、Cc:、および Newsgroups: を自分で書く
ことになります。一方 Summary モードで `a' や `A' を使って、あるメッセー
ジに返答しようとすると、To:、Cc:、Newsgroups: は自動的に用意されます。

Summary モードで `a' や `A' を使うと、新しい草稿がDraft mode に用意され
ます。To:、Cc:、Newsgroups: の値は、以下の三つの alist に従って用意され
ます。

  1. もし `C-u' 付きで呼び出された場合、送信者/投稿者のみに返答する。こ
     の場合、`mew-reply-sender-alist' が利用される。
  2. もし対象が自分自身で送ったメッセージなら、そのヘッダを加工せずに返
     答したいのであろう。この場合、`mew-reply-fromme-alist' が利用され
     る。
  3. そうでなければ、すべての人に返答する。この場合、
     `mew-reply-all-alist' が利用される。

`mew-reply-sender-alist' の初期値は以下の通りです。

     '(("Reply-To:"
        ("To:" "Reply-To:" "From:"))
       (t
        ("To:" "From:")))

これは、次のように解釈します。

  1. Reply-To: が存在すれば、Reply-To: と From: の値を新しい To: へコピー
     する。
  2. そうでなければ、From: の値を新しい To: へコピーする。

もし、Reply-To: で指定されたアドレスのみに返答したい場合は、
`mew-reply-sender-alist' を以下のように設定するとよいでしょう。

     (setq mew-reply-sender-alist
           '(("Reply-To:"
              ("To:" "Reply-To:"))
             (t
              ("To:" "From:"))))

`mew-reply-fromme-alist' の初期値は以下の通りです。

     '((t
        ("To:" "To:")
        ("Cc:" "Cc:")
        ("Newsgroups:" "Newsgroups:"))))

これは、次のように解釈します。

     To: の値を新しい To: へ、Cc: の値を新しい Cc: へ、Newsgroups: の値
     を新しい Newsgroups: へコピーする。

`mew-reply-all-alist' の初期値は以下の通りです。

     '((("Followup-To:" "poster")
        ("To:" "From:"))
       ("Followup-To:"
        ("Newsgroups:" "Followup-To:" "Newsgroups:"))
       ("Newsgroups:"
        ("Newsgroups:" "Newsgroups:"))
       ("Reply-To:"
        ("To:" "Reply-To:" "From:")
        ("Cc:" "To:" "Cc:" "Apparently-To:"))
       (t
        ("To:" "From:")
        ("Cc:" "To:" "Cc:" "Apparently-To:")))

これは、次のように解釈します。

  1. Follwup-To: の値が "poster" であれば、From: の値を新しい To: へコ
     ピーする。
  2. Follwup-To: が存在すれば、Follwup-To: と Newsgroups: の値を新しい
     Newsgroups: へコピーする。
  3. Newsgroups: が存在すれば、Newsgroups: の値を新しい Newsgroups: へ
     コピーする。
  4. Reply-To: が存在すれば、Reply-To: と From: の値を新しい To: へコピー
     する。また、To:、Cc:、Apparently-To: の値を新しい Cc: へコピーする。
  5. そうでなければ、From: の値を新しい To: へコピーする。また、To:、
     Cc:、Apparently-To: の値を新しい Cc: へコピーする。

`mew-reply-all-alist' を以下のように設定したいと思う人もいるかもしれま
せん。

     (setq mew-reply-all-alist
           '((("Followup-To:" "poster")
              ("To:" "From:"))
             ("Followup-To:"
              ("Newsgroups:" "Followup-To:"))
             ("Newsgroups:"
              ("Newsgroups:" "Newsgroups:"))
             ("Reply-To:"
              ("To:" "Reply-To:"))
             (t
              ("To:" "From:")
              ("Cc:" "To:" "Cc:" "Apparently-To:"))))

あるアドレスが複数ある場合は、自動的に 1 つになります。また、匿名の宛先
を表す ":;" で終るアドレスも、自動的に消去されます。

自分のアドレスは自動的に消去されます。自分のアドレスは、
`mew-config-alist' などから `mew-mail-address-list' に自動設定されます。
この値が気に入らないなら、以下のように明示的に設定することも可能です。

     (setq mew-mail-address-list
            '("^pooh@[a-z]*.aist-nara.ac.jp$"
              "^pooh@mew.org$"
              "^winnie@iijlab.net$"))



File: mew.jis.info, Node: forward, Next: resend, Prev: reply, Up: Composing

メッセージの転送
================

メッセージを転送するには、Summary モードで `f' や `F' を利用します。す
ると、Draft モードに移行し、あらかじめメッセージが添付領域に添付された
草稿が準備されます。

また Draft モードで添付領域を用意し、メッセージをコピー(`c')したりメッ
セージにリンク(`l')を張ったりしても、メッセージを転送できます。ファイル
名が数字([0-9]+)の場合は、自動的にメッセージだと判断されます。また、添
付領域で `y' を使うと、Message モードに表示しているメッセージにリンクを
張るので便利です。

通常は添付したメッセージの全体が転送されます。もし、ヘッダの一部を削り
たい場合は、`mew-field-delete-for-forwarding' を定義して下さい。以下に
Received:" と "Return-Path:" を転送時に削るための設定例を示します。

     (setq mew-field-delete-for-forwarding '("Received:" "Return-Path:"))



File: mew.jis.info, Node: resend, Next: pgp-shortcut, Prev: forward, Up: Composing

メッセージの再送
================

メッセージのヘッダの一部のみを変更して、送信したい場合があります。

たとえば、同じ内容のメッセージを、複数の宛先に独立して送りたい場合です。
pooh 宛のメッセージを作成して、+queue に入れ、すぐさまそのメッセージを
コピーし、宛先だけを piglet に変更したい場合を想像して下さい。これを、
メッセージの再利用による送信と呼びましょう。

また、メッセージに Resent-To: というフィールドを付けて再送したいことも
あります。これは、転送の一種です。こちらはヘッダだけ書き直すので、ヘッ
ダ変換といいます。前節で説明した転送は、メッセージを新規のメッセージに
包み込んで転送するため、カプセル化と呼ばれています。

ヘッダの一部だけを編集し、メッセージを送信したり、キューに入れたりする
モードとして、Header モードが用意されています。本文が編集できない
Draft モードだと思えばいいでしょう。

Header モードに入るために、Summary モードには以下のコマンドが用意されて
います。

`W'
     メッセージの再利用による送信。対象となるメッセージの To:、Cc:、
     From: などを書き換えるために、Header モードに移行する。典型的には、
     +queue または +postq に入っているメッセージに対して利用する。
`r'
     メッセージの再送。対象となるメッセージのヘッダに、Resent-To:、
     Resent-Cc:、Resent-From: などを追加するために、Header モードに移行
     する。再送によるメッセージの転送は、受信者を混乱させることがあるの
     で、よく考えてから利用すること。

Header モードでは、Draft モードのように、補完や循環的な補完が利用できま
す。ヘッダの入力が終わったら、以下のいずれかのコマンドを用いて、メッセー
ジを送信して下さい。本文が表示されていないので不安かもしれませんが、ちゃ
んと対象となっているメッセージの本文とヘッダの一部が再利用されます。

`C-cC-m'
     メッセージを作成し +queue または +postq に入れ、送信待ち状態にする。
`C-cC-c'
     メッセージを作成し送信する。"Really send this message? (y or n) "
     と訊かる。`y' を押せば送信される。



File: mew.jis.info, Node: pgp-shortcut, Next: mark-b-comp, Prev: resend, Up: Composing

PGP を利用する
==============

ここでは、テキストである本文を PGP で署名したり暗号化したりする方法につ
いて説明します。紹介するコマンドは以下の通りです。

`C-cC-s'
     草稿全体を PGP で署名する。パスフレーズを入力すること。
`C-cC-e'
     草稿全体を PGP で暗号化する。
`C-cC-b'
     草稿全体を PGP で署名後暗号化する。パスフレーズを入力すること。
`C-cC-r'
     草稿全体を PGP で暗号化後署名する。パスフレーズを入力すること。

メッセージを暗号化するには受信者の公開鍵を使用します。逆に署名するには
自分の秘密鍵を使います。よって、署名するためにはパスフレーズを入力する
必要があります。ただし、パスフレーズの保存機能を使っており、パスフレー
ズが保存されている場合は、パスフレーズを入力する必要はありません(*Note
pgp-viewing::)。

これらのコマンドは PGP/MIME を作成します。これらは、次節で説明するマー
クを使った PGP/MIME の作成方法の省略方法に当たります。

Mew で PGP を使うためには、PGP の userid としてアドレスを選ぶ必要があり
ます(例 "Kazuhiko Yamamoto <kazu@mew.org>")。

メッセージに署名を施すには、`C-cC-s' と入力します。署名の際には、自分の
秘密鍵を復号化する必要がありますので、パスフレーズがキャッシュされてい
なければ、入力を促されます。署名が施されたメッセージは、+queue または
+postq に格納されます。

自分の秘密鍵は、From: にあるアドレスを元に特定されます。From: がない場
合は、PGP が自動的にデフォルトの秘密鍵を選択します。From: にあるアドレ
スとは違うアドレスで秘密鍵を指定したい場合は、`C-uC-cC-s' と入力して下
さい。

メッセージを暗号化するには、`C-cC-e' とタイプして下さい。To: や Cc: か
らアドレスを切り出して、その受信者が復号化できるよう暗号化します。暗号
化するだけのなので、パスフレーズを訊かれることはありません。作成された
メッセージは、+queue に格納されます。

このメッセージは、受信者の公開鍵に加えて、自分の公開鍵でも暗号化されて
います。ですから、作成したメッセージを復号化できます。たとえば、`g' で
+queue に移動し、念のため復号化して確認することが可能です。

署名後暗号化するには、`C-cC-b' と入力します。暗号化後署名するには、
`C-cC-r' とタイプします。どちらの場合も作成されたメッセージは、+queue
に蓄えられます。

PGP で署名を施したり、暗号化したりしてメッセージを送ろうと思っていても、
うっかり忘れることがあります。そのため、メッセージを作成するコマンド
`C-cC-m' や `C-cC-c' に対し、必要に応じて PGP を起動させる機能がありま
す。

作成するすべてのメッセージのプライバシを保護したいなら、
`mew-protect-privacy-always' を `t' にして、
`mew-protect-privacy-always-type' に利用したいサービスを設定します。

暗号化されたメッセージに対する返答メッセージのプライバシを保護したいな
ら、`mew-protect-privacy-encrypted' を `t' にして、
`mew-protect-privacy-encrypted-type' に利用したいサービスを設定します。
この設定は、暗号化されたメッセージへの返答する場合、上記のすべてのメー
ルに対する設定よりも優先されます。

以下に利用できるサービスを示します。かっこ内はそれぞれのサービスを表す
シンボルです。`C-cC-m' や `C-cC-c' と入力する際に利用されるサービスは、
モードラインに表示されます。

pgp-signature (PS)
     署名
pgp-encryption (PE)
     暗号化
pgp-signature-encryption (PSPE)
     署名後暗号化
pgp-encryption-signature (PEPS)
     暗号化後署名

以下の例は、すべてのメッセージに対し署名する設定です。

     (setq mew-protect-privacy-always t)
     (setq mew-protect-privacy-always-type 'pgp-signature)

以下の例は、暗号化されたメッセージへの返答メッセージに対し、暗号化する
設定です。

     (setq mew-protect-privacy-encrypted t)
     (setq mew-protect-privacy-encrypted-type 'pgp-encryption)

Draft モードでは、`C-cC-pC-a' で `mew-protect-privacy-always'、
`C-cC-pC-e' で `mew-protect-privacy-encrypted' の値を反転できます。

Draft モードにおいて現在書いている草稿対してのみあらかじめサービスを指
定しておき、送信時にサービスを施すことを忘れないようにできます。現在の
草稿に対し `C-cC-m' や `C-cC-c' で施されるサービスを指定するには、
`C-cC-pC-d' に続いて上記のサービスの 1 つを入力して下さい。現在のサービ
スをキャンセルするには、サービス名の代りに単に `RET' を押して下さい。

`C-cC-c' や `C-cC-m' でメッセージを作成する際、署名や暗号化に失敗したら、
草稿に戻ります。このとき指定していたサービスはキャンセルされます。続け
て `C-cC-c' や `C-cC-m' でメッセージを作成すると、普通のメッセージが作
成されるので気をつけて下さい。問題を取り除いた後、同じサービスを望むな
ら、明示的に `C-cC-pC-d' でサービスを指定するか、`C-cC-s'、`C-cC-e' な
どを用いて下さい。


`mew-use-old-pgp' を `t' に設定すれば(デフォルトは`nil')、`C-cC-s' や
`C-cC-e' はPGP/MIME の代りに、古いPGP の書式にしたがってメッセージを生
成します。添付領域がある場合は、エラーになります。

上記で説明した `mew-protect-privacy-*' は、PGP/MIME のみに有効であり、
古い PGP には機能しません。`C-cC-m' や `C-cC-c' で常に古い PGP の署名を
施すには、`mew-protect-privacy-with-old-pgp-signature' を `t' にして下
さい。



File: mew.jis.info, Node: mark-b-comp, Next: pgp-key, Prev: pgp-shortcut, Up: Composing

マークを使った PGP/MIME の作成
==============================

PGP/MIME をサポートするために、マークを使った作成方法が提供されています。
以前の例を思い出してみましょう。

     ----------------------------- attachments -----------------------------
           Multipart/Mixed                                         1/
          1  Text/Plain(guess)                                       CoverPage*
     B    2  Image/Gif                    MagicPoint のロゴ          mgp.gif
     Q    3  Application/Postscript       資料                       ohp.ps
          4                                                          .
     --------0-1-2-3-4-5-6-7-8-9--------------------------------------------

行頭に `B' や `Q' といったマークがあります。このマークは符号化を意味し
ています。Mew では、新しい概念「符号化」を導入しています。符号化には、
Base64, Quoted-Printable, Gzip64 (Gzip + Base64), PGP で署名, PGP で暗
号化などがあります。

現在次の 6 つのマークがサポートされています。

`" "'
     符号化しない。ただし、8ビットのテキストは符号化されるかもしれない。
`B'
     Base64
`Q'
     Quoted-Printable
`G'
     Gzip64(gzip 圧縮し Base64 で符号化する。Mew が実験的に採用している。
     相手が Mew を使っていない場合は、使用すべきではない。)
`PS'
     PGP で電子署名。
`PE'
     PGP で暗号化。

添付領域でのマークに関係する新しいキー割当は以下の通りです。

`B'
     Base64 で符号化するため `B' マークを付ける。
`Q'
     Quoted-Printable で符号化するため `Q' マークを付ける。
`G'
     Gzip64 で符号化するため `G' マークを付ける。ただし、Text/Plain と
     Application/Postscript でしか実行できない。これ以外の型には圧縮は
     無意味である。なぜなら、jpeg などはあらかじめ圧縮されているから。
`S'
     PGP で署名するため `PS' マークを付ける。
`E'
     PGP で暗号化するため `PE' マークを付ける。受信者のアドレスを入力す
     る。
`U'
     符号化を元に戻す。元々のマークに戻る。

次の例を考えてみましょう。パート 2 は PGP で署名され、"kazu" 用に PGP
で暗号化されます。安心して下さい。説明の部分は上書きされていますが、保
存されています。パート 3 は Gzip64 で符号化されます。

     ----------------------------- attachments -----------------------------
           Multipart/Mixed                                         1/
          1  Text/Plain(guess)                                       CoverPage*
     PSPE 2  Image/Gif                    kazu@mew.org               mgp.gif
     G    3  Application/Postscript       資料                       ohp.ps
          4                                                          .
     --------0-1-2-3-4-5-6-7-8-9--------------------------------------------

マークを付けた後は、`C-cC-m' や `C-cC-c' を使って、PGP/MIME を作成して
下さい。



File: mew.jis.info, Node: pgp-key, Next: anonymous, Prev: mark-b-comp, Up: Composing

PGP の鍵の配布
==============

PGP の公開鍵を配布するには、Draft モードの添付領域で `p' を押して下さい。
だれの公開鍵を配布するか尋ねられます。自分の公開鍵であれば、単に `RET'
と入力して下さい。他人の公開鍵であれば、補完を利用しながらその人のアド
レスを入力して下さい。PGP の公開鍵は、Application/Pgp-Keys というデータ
型で配送されます。

Summary モード、あるいは、Virtual モードでメッセージを読んでいる際に、
あるパートのデータ型が Application/Pgp-Keys であれば、Mew は PGP の公開
鍵リングにそれを登録しようとします。Mew は、「信用度」と「有効性」を全
く考慮しないことに注意して下さい。これらの値を設定するのは、あなた自身
です。設定は Mew が表示する説明に従って下さい。。もし、「信用度」と「有
効性」の意味が分からなければ、PGP を使って自分のプライバシを保護しよう
とする前に、PGP が提供する「信用の輪」とは何かを学ぶべきです。



File: mew.jis.info, Node: anonymous, Next: Marks, Prev: pgp-key, Up: Composing

宛先を匿名にしたメッセージの送信
================================

宛先を匿名にして、複数の受信者にメッセージを送信したいことがあります。

たとえば、pooh がパーティーへのお誘いを複数の友達に送ることを考えて下さ
い。パーティーへ参加するという piglet からの返事は、pooh のみに送るべき
です。しかし、To: にたくさんの友達を列挙していると、piglet は誤って多く
の人に返答を送りつけてしまうかもしれません。そもそも、pooh は誰を誘った
のか、当日までふせておきたいこともあるでしょう。

このような要望を実現するために、Mew では匿名の宛先として、":;" を利用し
ます。以下の例を見て下さい。

     To: party:piglet@beech.tree.uk,roo@beech.tree.uk;
     From: Pooh <winnie-the-pooh@100acre.woodwest.uk>

"party" という説明文字列の後に ":" があります。そして、いくつかアドレス
が "," で区切られながら列挙され、";" で終端されています。このような形式
でアドレスを書くと、Mew は ":" と ";" のアドレスにメッセージを届けます
が、ヘッダからは削り取ります。この例では、piglet と roo は以下のような
メッセージを受け取ります。

     To: party:;
     From: Pooh <winnie-the-pooh@100acre.woodwest.uk>

受信者はこのヘッダから、送信者は pooh であることは分かりますが、自分以
外の誰に送られたのかは、想像するほかありません。また、"party:;" という
文字列は、アドレスではありませんから、ここに返答することも不可能です。

なお、To: や Cc: にたくさんのアドレスを列挙することは、本質的によいこと
ではありません。特定の人にメッセージを何度も送信する機会があるなら、通
常メーリングリストを作成します。




File: mew.jis.info, Node: Marks, Next: unread mark, Prev: anonymous, Up: Top

愉快なマークたち
****************

ここでは、Summary モードでユーザが付けたり消したりできるマークについて
説明します。このマークは以下のように、行頭に付きます。(Mew が付けるマー
クは日付の左に付くことに注意。)

     D 03/12 Hidenori Ohta  今週末                    |日曜にストーンマジック
     oM03/14 ももちゃん     能登の写真                |この前撮った写真を添付
     * 03/15 Neat Sumikawa  Re: ワイン                |じゃぁ、水曜日に例の店

現在利用できるマークは以下の6つです。

`U'
     未読マーク。
`D'
     消去のマーク。
`X'
     消去のマーク。
`o'
     整頓、つまり、フォルダを移動させるマーク。
`*'
     処理の対象とするマーク。
`$'
     マークを一時的に待避するためのマーク。

以下それぞれについて説明します。また、Mew が表示するマークについてもま
とめます。

* Menu:

* unread mark::                 未読 `U'
* delete mark::                 消去 `D'、`X'
* refile mark::                 整頓 `o'
* target mark::                 対象 `*'
* escape mark::	                待避 `$'
* unmark::                      マークの消去
* mark change::                 マークの変換
* off-line::                    マークのオフライン処理
* mew-mark::                    Mew が表示するマーク



File: mew.jis.info, Node: unread mark, Next: delete mark, Prev: Marks, Up: Marks

未読 `U'
========

以下のように設定すると、メッセージを一覧表示する際に、未読マーク`U' が
メッセージに付きます。

     (setq mew-use-unread-mark t)

`SPC'、`n'、および `p' などでメッセージを読むと`U' マークは消えます。

この三つのコマンドは、通常 `*' マーク、`U' マーク、およびマークの付いて
いないメッセージを読み進みます。`zSPC' を押すと、これらは `*' マークと
`U' マークの付いたメッセージのみを読み進めます。これは、未読のメッセー
ジを読み進める場合に便利です。もう一度`zSPC' を実行すると、対象とするメッ
セージが元に戻ります。

前のメッセージにマークを付けて、現在のメッセージに移動して来ると、`U'マー
クは消えます。`SPC'、`n'、および`p'で移動して来た場合は、このメッセージ
を読むことを意図しているはずですが、マークを付けることで移動した場合は
メッセージを読むことを意図していないかもしれません。その場合、`U' マー
クが消えると少し不便です。マークを付けることで移動した際に、`U' マーク
を消したくないのであれば、以下のように設定するとよいでしょう。

     (setq mew-delete-unread-mark-by-mark nil)

以下に `U' マークに関するコマンドをまとめます。

`zSPC'
     `SPC'、`n'、および `p' が読み進める対象とするメッセージを反転させ
     る。反転とは、「`U' マーク、`*' マーク、およびマークなし」と「`U'
     マークおよび `*' マーク」に対し、一方を他方へ変えること。
`M-u'
     `U' マークを付ける。




File: mew.jis.info, Node: delete mark, Next: refile mark, Prev: unread mark, Up: Marks

消去 `D'、`X'
=============

メッセージを消去するには、まず Summary モードで `d' を押して、`D' マー
クを付けます。マークを付けただけでは何も起こらないので、間違って `d' を
押しても大丈夫です。デフォルトでは、`x' を押すと`D' マークの付いたメッ
セージがゴミ箱に移動します。

ローカル・フォルダのためのゴミ箱は +trash です。IMAP のためのゴミ箱は、
%trash です。

ゴミ箱の中のメッセージを実際に消去するには、以下の 2 つの方法があります。

  1. Summary モードで `D' を実行する。
  2. ゴミ箱で `D' マークを付けて、`x' を押す。

もう少し正確に言うと、ローカル・フォルダでは以下のルールが適応されます。
(`mew-trash-folder' のデフォルトは +trash。`mew-trash-folder-list' のデ
フォルトは `nil'。)

   - `mew-trash-folder' が `nil' なら、'D' マークの付いたメッ
     セージは消去される。
   - `mew-trash-folder-list' が定義されていたら、それらのフォルダ
     で 'D' マークを付けたメッセージは消去される。それ以外のフォルダからは
     `mew-trash-folder' へ。
   - `mew-trash-folder-list' が `nil' なら、
     `mew-trash-folder' で 'D' マークを付けたメッセージは消去される。そ
     れ以外のフォルダからは `mew-trash-folder' へ。(これがデフォルト。)

IMAP に対しては、`mew-imap-trash-folder' と
`mew-imap-trash-folder-list' に従って、同じ規則が適応されます。

すべての `*' マークを `D' マークに変換できれば、一度にたくさんの `D' マー
クを付けれて便利です。これには、`md' を利用して下さい。

また、`Md' を使うと、現在のフォルダ内で同じ Message-Id: を持つメッセー
ジがある場合、1 つを残して他のメッセージに `D' が付きます。

`D' マークに似たものに `X' マークがあります。このマークの付けられたメッ
セージは、`x' を押した際に必ず消去されます。`X' マークは、`M-d' で付け
ることができます。

`mxM-d' で、`X' マークが付いたメッセージだけを処理できます。すべての
`*' マークを `X' マークに変換するコマンドは、`mM-d' です。


以下に、`D' マークと `X' マークに関するコマンドをまとめます。

`d'
     `D' マークを付ける。
`M-d'
     `X' マークを付ける。
`md'
     `*'マークを`D'マークへ変換する。
`mM-d'
     `*'マークを`X'マークへ変換する。
`x'
     マークの付いたメッセージを処理する。
`mxd'
     `D' マークの付いたメッセージのみを処理する。
`mxM-d'
     `X' マークの付いたメッセージのみを消去する。
`D'
     ゴミ箱の中のメッセージを全部消去する。
`C-uD'
     指定されたフォルダのメッセージを全部消去する。



File: mew.jis.info, Node: refile mark, Next: target mark, Prev: delete mark, Up: Marks

整頓 `o'
========

メッセージを整頓するには `o' を押して、移動先のフォルダを入力し、`o' マー
クを付けます。移動先のフォルダは、賢く推測してくれるので、ほどんどの場
合はフォルダ名を入力する代わりに `RET' を押すだけです。"," で区切って複
数のフォルダを入力することもできます。もちろん、`TAB' で補完できます。
詳しくは *Note Refile:: を参照して下さい。

`o' マークの付いたメッセージの上で `o' を押すと、移動先を追加したり変更
したりできます。また、実際の移動は `x' と入力されたときに実行されます。

複数のフォルダを指定し、移動させたときのことを考えましょう。ハードリン
クの機能を持つファイルシステムを使っている場合、そのメッセージは最初の
フォルダに移動され、その他のフォルダからはハードリンクが張られます。そ
うでないファイルシステムの場合は、最初のフォルダに移動後、その他のフォ
ルダへ複製されます。

指定したフォルダが 1 つで、しかもそれが現在のフォルダである場合、整頓し
てもなにも起こりません。指定したフォルダが複数で、現在のフォルダが含ま
れる場合、現在のフォルダ内での番号を保ったまま、その他のフォルダからハー
ドリンクが張られるか、その他のフォルダへ複製されます。

`o' に似ていますが、かならず現在のフォルダも候補として提示する`c' とい
うコマンドも用意されています。

以下に、`o' マークに関するコマンドをまとめます。

`o'
     `o' マークを付ける。
`c'
     `o' マークを付ける。推測したフォルダに加えて、現在のフォルダも候補
     として提示する。
`x'
     `o' マークの付いたメッセージを移動させる。
`mxo'
     `o' マークの付いたメッセージのみを移動させる。他のマークは処理しな
     い。
`C-umxo'
     `o' マークの付いたメッセージの中で、現在のメッセージと同じ移動先を
     持つもののみを移動させる。



File: mew.jis.info, Node: target mark, Next: escape mark, Prev: refile mark, Up: Marks

対象 `*'
========

後から読み返したいメッセージには、`*' で `*' マークを付けて下さい。また、
選択コマンド `?' を使うと、入力した条件にマッチするメッセージに`*' マー
クが付きます(詳しくは、*Note Pick:: を参照して下さい)。`N' や `P' で
`*' マークの付いたメッセージに移動し表示できます。

以下に、`*' に関連するコマンドを示します。

`*'
     `*' マークを付ける。
`N'
     下方向の `*' マークの付いたメッセージへ移動し表示。
`P'
     上方向の `*' マークの付いたメッセージへ移動し表示。
`M-n'
     下方向の `*' マークの付いたメッセージへ移動しキーワードをハイライ
     トして表示。このコマンドを繰り返し利用すると、キーワードの付近がが
     次々と表示されていく。キーワードは、そのバッファに固有な値として管
     理されており、`C-u?' や `C-u/' (*Note Pick:: を参照) を利用すると
     設定される。キーワードが設定されていないなら、ユーザにキーワードを
     訊く。
`C-uM-n'
     キーワードを明示的に設定できること以外は、`M-n' に同じ。
`M-p'
     `M-n' を逆方向にしたコマンド。
`C-uM-p'
     `C-uM-n' を逆方向にしたコマンド。
`ma'
     マークの付いていないメッセージすべてに `*' マークを付ける。
`mr'
     入力した正規表現にマッチしたメッセージに `*' マークを付ける。

`*' マークは、複数のメッセージを処理するためにも利用します。以下に複数
のメッセージを処理するコマンドを示します。

`F'
     `*' マークの付いたメッセージを MIME 形式で転送するための草稿を準備。
`J'
     大きなメッセージは Message/Partial として複数に分割されている場合
     がある。これらのメッセージには、Mew によって `P' マークが付けられ
     ている。ここで、ユーザがそれらのメッセージに `*' マークを付け、こ
     のコマンドを実行すれば、元のメッセージが復元される。
`mI'
     `*' マークの付いている一部だけが取得されたメッセージ群(`T')を取得
     する。
`C-umI'
     `mI' を実行する。
`M-b'
     `*' マークの付いたメッセージに格納されているメッセージを取り出す。
`M-\'
     `*' マークの付いたメッセージを引数として、外部コマンドを起動する。
`M-s'
     `*' マークの付いたメッセージを "unshar" の入力として渡す。つまり、
     shar (の後に split)されたデータを取り出す。
`M-t'
     `*' マークの付いたメッセージを "uudecode" する。

`M-s' や `M-t' では、`*' マークの付いたメッセージがきちんと分割順になっ
ている必要があります。順番がくるっているなら、`S' でソートするとよいか
もしれません。



File: mew.jis.info, Node: escape mark, Next: unmark, Prev: target mark, Up: Marks

待避 `$'
========

たとえば `/' などを使いパターンに合致したメッセージに `*' を付けること
を考えて下さい。`*' マークの付いたメッセージがすでにあるなら、これらの
メッセージは `/' の結果と混ざってしまいます。そこで、現在の `*' マーク
を一時的に保存したくなります。

この目的のために、待避マーク `$' が提供されています。典型的な使い方は、
以下のようになります。

  1. `m$' で `*' マークを一旦 `$' マークに待避
  2. `/' などで `*' マークを付け、`*'マークのついたメッセージを処理
  3. `U*' で `*' マークを消去
  4. `m*' で `$' マークを `*' マークへ戻す

`$'マークに関するコマンドを以下にまとめます。

`m$'
     `*' マークを `$' マークへ変換。
`m*'
     `$' マークを `*' マークへ変換。



File: mew.jis.info, Node: unmark, Next: mark change, Prev: escape mark, Up: Marks

マークの消去
============

`o' マークや `D' マークが付いたメッセージは、マーク実行コマンド `x' を
押さない限り処理されません。よって、`x' を押す前に、マークを取り止める
コマンド `u' でマークを消せば、誤ってメッセージを消すことはありません。

以下にマークを消去するコマンドをまとめます。

`u'
     現在のメッセージのマークを消す。
`U'
     入力したマークが付いているすべてのメッセージのマークを消す。

`$' マークを使って `*' マークを待避し、なんらかの操作をし、元に戻す方法
は、目に見えるので分りやすいです。しかしながら、`$' マークが付いている
メッセージは、マークが付いているので目的の操作の対象外になるかもしれま
せん。

このため `U*' で消去した `*' マークを復活させるコマンドがあります。それ
は、`M*' です。この方法は、復活できるマークは目に見えないので分りにくい
かもしれません。しかしながら、マークが消えているので、そのメッセージは
確実に目的の操作の対象になります。

`M*'
     一番最後の `U*' で消した `*' マークを復活させる。




File: mew.jis.info, Node: mark change, Next: off-line, Prev: unmark, Up: Marks

マークの変換
============

マークには強さのレベルがあります。同じレベルのマークは上書きできます。
強いマークは弱いマークを上書きできます。

マークを強い順に示します。

`o'、`D'、`X'
     新たにマークしたときは、次のメッセージを表示。上書きした場合は、そ
     の行に留まる。
`*' と `$'
     マークを付けた後は、その行に留まる。
`U'
     マークを付けた後は、その行に留まる。

強いマークを付けた後にカーソルが動く方向については、*Note
summary-mode:: を参照して下さい。

マークは以下のように交換できます。

`m$'
     `*' -> `$' :: `*' マークを一時的に保存
`m*'
     `$' -> `*' :: `*' マークを元に戻す
`ms'
     `$' <-> `*'
`mM-u'
     `*' -> `U' :: 選択コマンド `?' で選んだメッセージを未読にするとき
     に便利。
`md'
     `*' -> `D' :: 選択コマンド `?' で選んだメッセージを消去するときに
     便利。
`mM-d'
     `*' -> `X' :: 選択コマンド `?' で選んだメッセージを消去するときに
     便利。
`mo'
     `*' -> `o' :: 選択コマンド `?' で選んだメッセージをあるフォルダに
     移動させる場合に便利。
`mc'
     `*' -> `o' :: 選択コマンド `?' で選んだメッセージをあるフォルダに
     コピーする場合に便利。
`e'
     最初に入力したマークを次に入力したマークへ変換する。ただし、`o' マー
     クは対象外。



File: mew.jis.info, Node: off-line, Next: mew-mark, Prev: mark change, Up: Top

マークのオフライン処理
**********************

IMAP ユーザは、フォルダ A のメッセージをキャッシュし、出先で `o' マーク
や `D' マークを付け、その場でそれらのマークを処理したくなることがありま
す。この場合、その後ネットワークに接続したときに、それらの処理が IMAP
サーバに反映されて欲しいと思います。

通常 IMAP では、メッセージをフォルダ A からフォルダ B へ移動させた場合、
フォルダ A にキャッシュされているそのメッセージを削除し、IMAP サーバか
らネットワークを通じ、フォルダ B へそのメッセージをキャッシュし直す必要
があります。なぜなら、フォルダ A にキャッシュされているメッセージに付随
する IMAP の情報は、フォルダ A 内でのみ有効だからです。

出先でフォルダ A のメッセージをフォルダ B へ整理したとしましょう。仮に、
そのメッセージをフォルダ B で読むためには、ネットワークに接続してその処
理を IMAP サーバに反映し、IMAP サーバから取り直さないといけないとすると
不便です。欲を言えば、出先でフォルダ B へ整理したメッセージは、IMAP サー
バから取り直さなくとも、フォルダ B へ移動すれば読めるようになっていて欲
しいと思います。

Mew では、メッセージ処理を後から IMAP サーバへ反映することと、IMAP サー
バからメッセージを再取得しなくても移動先のフォルダでメッセージを読める
ことの両方を実現しています。ネットワークに接続していない状況で、マーク
を処理するには、`lx' を使用して下さい。`lx' を実行すると、以下の処理が
なされます。

  1. `o' マークや `D' マークのついたメッセージがフォルダ A からなくなる。
  2. この処理はメッセージ形式で、%queue に溜る。
  3. `o' マークのついたメッセージは、ローカルでフォルダ B へ移動され、
     無効なメッセージとして扱われる。

無効なメッセージとは、読むことはできるが、`o' マークや `D' マークをつけ
られないものをいいます。無効なメッセージには、`#' マークが付いています。
`g' を使って、フォルダ B へ行くと、無効なメッセージの一覧が自動的に表示
されます。

ネットワークに接続た後に、%queue に溜っている処理を IMAP サーバに反映さ
せるには、%queue で `C-cC-c' と入力して下さい。

IMAP サーバに処理を反映した後に、フォルダ B で `s' を押すと、無効なメッ
セージが削除され、有効なメッセージがキャッシュされます。



File: mew.jis.info, Node: mew-mark, Next: Refile, Prev: off-line, Up: Top

Mew が表示するマーク
********************

以下に Mew が表示するマークをまとめます。

`M'
     マルチパートを表すマーク。*Note multipart::を参照のこと。
`T'
     メッセージが切り詰められたことを表すマーク。*Note retrieving::を参
     照のこと。
`S'
     署名を表すマーク。*Note pgp-viewing::を参照のこと。
`E'
     暗号を表すマーク。*Note pgp-viewing::を参照のこと。
`P'
     分割されていることを示すマーク。*Note target mark::を参照のこと。
`#'
     メッセージが無効であることを示すマーク。*Note off-line::を参照のこ
     と。




File: mew.jis.info, Node: Refile, Next: by-folder, Prev: mew-mark, Up: Top

楽々整理整頓
************

1日に数百のメッセージを受け取るようになると整理整頓が大変になります(え、
そんなに受け取らないですって？ 幸せですね :) 。Mew では、`o' でメッセー
ジを整頓する際に、整頓先を推測しデフォルト値として表示してくれます。た
とえば、次のようになります。

     Folder name (+work/mew-dist): +

もし、() の中のデフォルト値が自分の希望通りであれば、`RET' を押すだけで
よいのです。整頓先が決定しているメッセージには、`o' マークが付きます。

メッセージを移動できるのは、そのメッセージが属している「世界」の中での
みです。前述のように世界はケースと修飾子によって定まります。整頓先のフォ
ルダを指定する場合には、ケースを付けず、同じ修飾子を持つフォルダ名を入
力する必要があります。ケースを付けない理由は、そのメッセージのケースは
すでに定まっているからです。ミニバッファからフォルダ名を入力する際、ケー
スが "default" でないにも関わらずケースを明示的に入力しないのは、整頓先
を指定する場合のみです。

`o' に似たコマンドに `c' があります。両者の違いは、*Note refile mark::
を参照して下さい。

この整頓先の推測が賢ければ賢い程ユーザは楽になります。Mew では以下のよ
うな規則が用意されています。

* Menu:

* by-folder::                   メーリングリスト用のフォルダから推測
* by-alist::                    指定した規則から推測
* by-thread::                   対話関係から推測
* by-from-folder::              個人用のフォルダから推測
* by-from::                     From: から推測
* by-newsgroups::               Newsgroups: から推測
* by-default::                  デフォルトの規則
* guess-rule::                  規則の制御
* auto-refile::                 自動で整理整頓



File: mew.jis.info, Node: by-folder, Next: by-alist, Prev: Refile, Up: Refile

メーリングリスト用のフォルダから推測
====================================

あるメーリングリスト宛のメッセージを、そのメーリングリスト名のフォルダ
に整理することは多いと思います。Mew ではメーリングリスト宛に届いたメッ
セージに対して、それ用のフォルダを推測する機能があります。

たとえば、+misc/pooh-lovers というフォルダがあったとしましょう。次のよ
うなメッセージは、このフォルダに整頓すればよい可能性が高いといえます。

     To: pooh-lovers@mew.org

このように、To: や Cc: のアドレスが、フォルダ名の一番右側にマッチするも
のがないか探すわけです。フォルダを階層化していない人が多いようですが、
Mew を使う限り、階層化しない手はありません。

さて、鋭い人は次のように個人のアドレスが To: や Cc: にある場合、困るの
ではないかと思うでしょう。

     To: piglet@mew.org
     Cc: pooh-lovers@mew.org

たとえば、pooh は pooh-lovers の一員ですから、このメッセージが届きます。
しかし、piglet と仲がいいので、+from/piglet にマッチしてしまいます。

そこで、Mew では無視するフォルダを設定できるようになっています。デフォ
ルトでは、+from 以下を無視します。ですから、個人からのメッセージは
+from 以下に収めて下さい

候補が決定できたら

     Folder name (+misc/pooh-lovers): +

と訊いてきます。あっていれば `RET' を、違っていればお望みのフォルダを入
力して下さい。

`o' で新しいフォルダを指定すると、そのフォルダが自動的に作成され、次か
らは推測用の候補にも加わります。便利でしょ？

この機能を提供する関数は `mew-refile-guess-by-folder' です。

もし、フォルダ名に大文字を使っていないなら、以下の設定により、この関数
が高速になります。

     (setq mew-use-fast-refile t)

デフォルトでは、末端のフォルダと中間のフォルダが候補の対象となっていま
す。もし、中間のフォルダではなく、末端のフォルダだけを選びたい場合は、
以下のように設定して下さい。

     (setq mew-use-node-folder nil)



File: mew.jis.info, Node: by-alist, Next: by-thread, Prev: by-folder, Up: Refile

指定した規則から推測
====================

フォルダ名から推測する機能だけでは、思うようなフォルダを推測してくれな
い場合があります。たとえば、To: が staff@mew.org であるメッセージと
To: が staff@iijlab.net であるメッセージに対し、フォルダ名からの推測で
は同じフォルダ(たとえば、"+net/staff")が選ばれてしまいます。そこで、
Mew では、変数 `mew-refile-guess-alist' に明示的に規則を設定できます。

1つ例を挙げてみましょう。

     (setq mew-refile-guess-alist
       '(("To:"
           ("staff@mew.org" . "+net/mew/staff")
           ("staff@iijlab.net" . "+net/iijlab/staff"))))

これは、メッセージヘッダ中の To: の横の文字列に staff@mew.org があれば
+net/mew/staff へ、staff@iijlab.net があれば +net/iijlab/staff へ整頓す
るという意味です。

規則は、以下のように書きます。

     rule ::= '<rule>
     <rule> ::= ((<key> <alist>) (<key> <alist>) ... [<special>])

全体は (<key> <alist>) のリストです。<key> はフィールド名を書きます。
<alist> は以下のようになります。

     <alist> ::= (<value> . <folder>|<rule>) (<value> . <folder>|<rule>) ...

<value> は <key> で示したフィールドにくる値です。<folder> は <key> にマッ
チした際にどのフォルダに整頓するかを意味しています。<value> と
<folder> を `.' で区切るのを忘れないで下さい。<folder> の代りに <rule>
を再帰的に記述することもできます。

特殊な <key> として `nil' と `t' があります。`nil' は、何も推測できなかっ
た場合に返す <folder> を指定するために用います。`t' は、推測した値に加
えて返す <folder> を指示するために使います。

     <special> ::= (t . <folder>) | (nil . <folder>)

正規表現を知っている人は、以下のような複雑な規則を設定できます。

     (setq mew-refile-guess-alist
       '(("Newsgroups:"
         ("^nifty\\.\\([^ ]+\\)" . "+Nifty/\\1")
         (".*"         . "+rec/news"))
        ("To:"
         ("\\(inet\\|wide\\)@wnoc-fuk" . "+wide/\\1-wnoc-fuk"))
        ("From:"
         ("uucp@"      . "+adm/uucp")
         ("ftpsync@"   . "+adm/ftpsync"))
        (nil . "+unknown")))

この機能を提供する関数は `mew-refile-guess-by-alist' です。



File: mew.jis.info, Node: by-thread, Next: by-from-folder, Prev: by-alist, Up: Refile

対話関係から推測
================

Mew には、整頓しようとしているメッセージの親のメッセージが以前整頓され
たフォルダを選択してくれる機能があります。

たとえば、pooh、piglet、roo との間で、蜂蜜を取りに行こうという話題が盛
り上がったとしましょう。pooh は、+project/honey というフォルダを作って、
最初のメッセージをそこに 整頓したとしましょう。以降、3人の間のメッセー
ジがきちんとした返答であるかぎり、+project/honey を推測してくれます。

あるメッセージをどこに保存したかという情報は、
~/Mail/.mew-refile-msgid-alist" に保存されています。この情報を過去何通
のメッセージに関して保存するかは、`mew-lisp-max-length' で決定します。
初期値は 2000 通です。3000 通にしたい場合は "~/.mew.el" 中で以下のよう
に設定して下さい。

     (setq mew-lisp-max-length 3000)

この機能を提供する関数は `mew-refile-guess-by-thread' です。



File: mew.jis.info, Node: by-from-folder, Next: by-from, Prev: by-thread, Up: Refile

個人用のフォルダから推測
========================

*Note by-folder:: で説明したメーリングリスト用のフォルダを推測するに加
えて、個人用のフォルダを推測する機能があります。個人用のフォルダは
+from 以下にありますから、+from 以下のフォルダを選択する機能だともいえ
ます。以下の例を考えてみましょう。

     To: pooh@mew.org
     From: piglet@mew.org

piglet から pooh にメッセージが来ました。pooh がこの機能を使うと、
From: を手がかりに +from/piglet が選択されます。(+from 以下は階層化され
ていても構いません。また、フォルダ名はユーザ名だけではなくアドレス全体
でも OK です。)

この機能を提供する関数は、`mew-refile-guess-by-from-folder' といいます。

次に、pooh が piglet に返答した場合を考えましょう。pooh は自分自身に
Cc: していたので、自分にメッセージが戻ってきました。

     To: piglet@mew.org
     Cc: pooh@mew.org
     From: pooh@mew.org

pooh の立場になって考えてみて下さい。このメッセージを +from/pooh に整頓
するか、あるいは +from/piglet に整頓するのかは、好みが分かれるところで
しょう。そこで、どちらを選択するのかカスタマイズできるようになっていま
す。

`mew-refile-guess-from-me-is-special' が `t' なら、
`mew-refile-guess-by-from-folder' は、From: が自分のアドレスの場合に、
To: と Cc: にあるアドレスをもとに、+from 以下のフォルダを選択します。



File: mew.jis.info, Node: by-from, Next: by-newsgroups, Prev: by-from-folder, Up: Refile

From: から推測
==============

From: に同一のアドレスを持つメッセージが、かつてどこに整頓されたかによっ
て推測する機能があります。

たとえば、piglet は piglet@beech.tree.uk と p-p-p@mew.org の 2 つのアド
レスを持っているとしましょう。どちらのアドレスからメッセージが届いても、
pooh はそれらを +from/piglet に整頓したいと思っています。もちろん、以下
のように明示的に規則を書けば実現できます。

     (setq mew-refile-guess-alist
       '(("From:"
           ("piglet@beech.tree.uk" . "+from/piglet")
           ("p-p-p@mew.org"        . "+from/piglet"))))

しかし、いちいち規則を書くのは面倒です。そこで、まず From: が
piglet@beech.tree.uk であるメッセージを +from/piglet に整頓します。これ
でフォルダ +from/piglet が作成されます。次に、From: が p-p-p@mew.org で
あるメッセージを +from/piglet に整頓したとします。ここで Mew は、
p-p-p@mew.org が +from/piglet に整頓されたことを学習します。以後 From:
が p-p-p@mew.org であるメッセージを整頓しようとすると、+from/piglet を
選択するようになります。

その他、機械からくるメッセージは、いつも +adm/misc に入れることにしたい
場合なども、明示的な規則を書かずに済ませられます。

From: とフォルダの情報は、"~/Mail/.mew-refile-from-alist" に保存されて
います。この情報を過去何通のメッセージに関して保存するかは、*Note
by-thread:: と同様に `mew-lisp-max-length' で決定します。

この機能を提供する関数は `mew-refile-guess-by-from' です。

`mew-refile-guess-from-me-is-special' が `t' の場合、
`mew-refile-guess-by-from' は `mew-refile-guess-by-from-folder'(*Note
by-from-folder::)と同様な動きをします。



File: mew.jis.info, Node: by-newsgroups, Next: by-default, Prev: by-from, Up: Refile

Newsgroups: から推測
====================

ニュースをメールとして受信して Mew で読んでいる人のために、Newsgroups:
からフォルダを推測する機能を用意しました。関数名は
`mew-refile-guess-by-newsgroups' です。



File: mew.jis.info, Node: by-default, Next: guess-rule, Prev: by-newsgroups, Up: Refile

デフォルトの規則
================

デフォルトの規則は、From: からユーザ名を切り出して、`+from/user' を選ぶ
ようになっています。ただし、`mew-refile-guess-strip-domainpart' が
`nil' ならアドレスを切り出すので、`+from/user@domain' が選択されます。

関数名は、`mew-refile-guess-by-default' です。



File: mew.jis.info, Node: guess-rule, Next: auto-refile, Prev: by-default, Up: Refile

規則の制御
==========

Mew では、フォルダ推測の規則を2つの変数、`mew-refile-guess-control' と
`mew-refile-ctrl-multi' で制御します。`mew-refile-guess-control' は、呼
び出す関数を順に定義します。候補を複数にしたい場合は
`mew-refile-ctrl-multi' を `t' に、単数にしたい場合は `nil' に設定しま
す。

標準では、`mew-refile-guess-control' は以下のように宣言されています(宣
言なので `defvar' が使われています)。

     (defvar mew-refile-guess-control
       '(mew-refile-guess-by-alist
         mew-refile-ctrl-throw
         mew-refile-guess-by-newsgroups
         mew-refile-guess-by-folder
         mew-refile-ctrl-throw
         mew-refile-ctrl-auto-boundary
         mew-refile-guess-by-thread
         mew-refile-ctrl-throw
         mew-refile-guess-by-from-folder
         mew-refile-ctrl-throw
         mew-refile-guess-by-from
         mew-refile-ctrl-throw
         mew-refile-guess-by-default))

Mew は `mew-refile-guess-control' に並べられた関数を順番にすべて実行し
ます。各々の関数が複数の候補を推測することがあります。

`mew-refile-guess-control' の動作例として以下を考えてみましょう。

`mew-refile-guess-by-alist'
         が +aaa, +bbb を推測。
`mew-refile-guess-by-folder'
         が +ccc, +ddd を推測。
`mew-refile-guess-by-default'
         が +eee を推測。

+aaa 〜 +eee すべてをユーザに提示して欲しい場合は、
`mew-refile-ctrl-multi' を `t' に, +aaa だけを提示して欲しい場合は、
`nil' に設定します。

また、+aaa 〜 +ddd は提示して欲しいけれどもそれ以降はいらない、つまり、
+eee を提示するのは先に実行された関数群が何も推測できなかったときだけに
したい場合は、`mew-refile-ctrl-multi' を `t' にして、
`mew-refile-guess-by-folder' と `mew-refile-guess-by-default' の間に
`mew-refile-ctrl-throw' を入れて下さい。

`C-uo' は、この推測の流れを Message バッファに表示します。



File: mew.jis.info, Node: auto-refile, Next: Pick, Prev: guess-rule, Up: Refile

自動で整理整頓
==============

毎日メッセージをたくさんもらう人は、まだ整頓していないメッセージを
+inbox (あるいは %inbox) フォルダに大量に溜めてしまうことがあります。そ
んなときは、「メッセージ達よ、とにかくこのフォルダからどこかに行ってし
まえ」と叫びたくなることがあるでしょう。Mew は、そんなわがままなを満足
させるための自動整理整頓関数を提供しています。:) `M-o' がその呪文です。

この関数を実行すると、現在のフォルダ内の特定のメッセージに対して、自動
的に `o' マークを付けてくれます。特定のメッセージとは、
`mew-refile-auto-refile-skip-any-mark' が `nil'なら、`o' や `D' マーク
が付いていないメッセージです。`mew-refile-auto-refile-skip-any-mark' が
`t' なら、なにもマークが付いてない(既読)メッセージです。
`mew-refile-auto-refile-skip-any-mark' の初期値は `nil' です。

`C-uM-o' は、`mew-refile-auto-refile-skip-any-mark' の値とは関係なく
`*' マークの付いたメッセージを対象にします。

整頓先の決定には、先に説明した推測関数群が働くようになっています。この
関数は、`o' を付けるだけですので、`x' を押さない限り実際にメッセージが
どこかに行ってしまうことはありません。

Mew の整頓先推測はあまりにも賢すぎるので、この機能には仇となってしまい
ます。というのは、Mew が推測機能をフルに使って勝手に整頓してしまうと、
大抵のユーザはどこにメッセージが整頓されたか分からなくなってしまうのか
らです。:) そのために、Mew が使う推測関数を制限する機能が提供されていま
す。前に出てきた宣言をもう一度思い出して下さい。

     (defvar mew-refile-guess-control
       '(mew-refile-guess-by-alist
         mew-refile-ctrl-throw
         mew-refile-guess-by-newsgroups
         mew-refile-guess-by-folder
         mew-refile-ctrl-throw
         mew-refile-ctrl-auto-boundary
         mew-refile-guess-by-thread
         mew-refile-ctrl-throw
         mew-refile-guess-by-from-folder
         mew-refile-ctrl-throw
         mew-refile-guess-by-from
         mew-refile-ctrl-throw
         mew-refile-guess-by-default))

`mew-refile-guess-control' の中に `mew-refile-ctrl-auto-boundary' とい
う関数があります。これがその仕掛です。自動整理整頓のときに限り、Mew は
この関数より下に記述してある推測を無視します。
`mew-refile-ctrl-auto-boundary' より上に記述している関数が何も推測でき
なかった場合は、そのメッセージには `o' が付きません。破滅が訪れる前に
`mew-refile-ctrl-auto-boundary' の御札を貼って下さい。




File: mew.jis.info, Node: Pick, Next: condition, Prev: auto-refile, Up: Top

メッセージの選択
****************

たとえば、Subject: に party という文字が含まれているメッセージを見つけ
出したり、From: が kazu@mew.org であるメッセージを選択したいと思うこと
があります。

入力した条件に合致したメッセージに対し、`*' マークを付けるコマンドは 3
つあります。

`?'
     現在の Summary モードかスレッドで、入力した条件に合うメッセージに
     `*' マークを付ける。(`mewl' を利用)
`''
     現在の Summary モードかスレッドで、入力したキーワードを含むメッセー
     ジに`*' マークを付ける。(`grep' を利用)
`"'
     現在の Summary モードかスレッドで、入力したキーワードを含むメッセー
     ジに`*' マークを付ける。コマンド、オプション、およびキーワードを同
     時に指定する。

これらのコマンドは、Summary モード、スレッドを含む 1 つのフォルダから作
られた Virtual モードで利用できます。

入力した条件に合致したメッセージに対し、Virtual モードを作るために以下
のコマンドがあります。

`/'
     指定した単数あるいは複数のフォルダから、入力した条件に合うメッセー
     ジを見つけ出してVirtual モードに一覧表示する。(`mewl' を利用)
`C-u/'
     指定した単数あるいは複数のフォルダから、入力したキーワードを含むメッ
     セージを見つけ出して Virtual モードに一覧表示する。(`grep' を利用)

また条件を入力せずに、マークのメッセージに対して Virtual モードを作るコ
マンドもあります。

`m/'
     `*' マークの付いたメッセージに対し、Virtual モードを作成する。
`C-um/'
     指定されたマークの付いたメッセージに対し、Virtual モードを作成する。

以下条件の入力方法と Virtual モードに付いて解説します。また、DB を使っ
た検索についても触れます。

* Menu:

* condition::                   条件の入力方法
* virtual::                     Virtual モード
* dbsearch::                    DB を使った検索



File: mew.jis.info, Node: condition, Next: virtual, Prev: Pick, Up: Pick

条件の入力方法
==============

Mew が条件の入力をユーザに促すときは以下のように訊いてきます。

     Pick pattern:

以下に示す式を組み合わせて条件を入力して下さい。(結合力の強い順に並んで
います。)

`field=string'
     フィールド field に文字列 string が含まれているときマッチ(大文字小
     文字を区別しない)。field に "head" を指定した場合は、ヘッダ全体を
     意味する。
`field==string'
     フィールド field に文字列 string が含まれているときマッチ(大文字小
     文字を区別する)。field に "head" を指定した場合は、ヘッダ全体を意
     味する。
`field!=string'
     フィールド field に文字列 string が含まれていないときマッチ(大文字
     小文字を区別しない)。field に "head" を指定した場合は、ヘッダ全体
     を意味する。
`field!==string'
     フィールド field に文字列 string が含まれていないときマッチ(大文字
     小文字を区別する)。field に "head" を指定した場合は、ヘッダ全体を
     意味する。
`( <pattern> )'
     <pattern> の内容を先に評価。
`! <pattern>'
     <pattern> でないときマッチ。
`<pattern1> & <pattern2>'
     <pattern1> かつ <pattern2> のときマッチ。
`<pattern1> | <pattern2>'
     <pattern1> または <pattern2> のときマッチ。

以下に例を示します。

(a) From: に kazu が含まれるメッセージ

     from=kazu

(b) To: が mew、または、Cc: が mew であるメッセージ

     to=mew | cc=mew

(c) To: が mew、または、Cc: が mew で、かつ、from が kazu であるメッセー
ジ

     (to=mew | cc=mew) & from=kazu

後は類推して下さい。

なお、`mew-pick-pattern-list' にパータンのリストを定義しておくと、
`C-cTAB' で各要素を循環的に補完できます。この場合、リストの先頭がデフォ
ルトとして表示されます。



File: mew.jis.info, Node: virtual, Next: dbsearch, Prev: condition, Up: Pick

Virtual モード
==============

Virtual モードは、複数のフォルダから入力した条件に合うメッセージを選び
だし、単一の仮想的なフォルダとして扱います。Summary モードで `/' を押す
と、Virtual モードが作れます。

最初に、単数または複数のフォルダ名を入力します。複数のフォルダを入力す
る場合は、"," で区切って下さい。もちろん、`TAB' で補完できます。

     Folder name (+inbox) : +inbox,+mew

この例では、Virtual モードのフォルダ名は "*+inbox,+mew*" になります。

そして、条件を入力します。

     Pick pattern:

すると仮想フォルダができあがります。Summary モードで利用できるコマンド
の多くが、Virtual モードで利用できます。仮想フォルダはまさしく仮想であ
り、ファイルシステムなどには存在しないことに注意して下さい。Emacs を終
了すると、仮想フォルダはなくなります。

Virtual モードであるメッセージにマークを付けると、Summary モードの対応
するメッセージにもマークが付きます。逆に、Summary モードであるメッセー
ジにマークを付けても、Virtual モードの対応するメッセージにはマークは付
きません。

Virtual モードからマークを処理することはできません。`x' を押しマークを
処理しようとすると、Summary モードに移動しろという促されます。また、ス
レッドのための Virtual モードで `x' を押すと、対応する Summary モードに
移動し、もう一度 `x' を押すよう促されます。


Virtual モードを消去する方法については、*Note Quit::を参照して下さい。



File: mew.jis.info, Node: dbsearch, Next: Quit, Prev: virtual, Up: Pick

DB を使った検索
===============

`?' や `'' では、呼び出された外部コマンドがその都度メッセージを検索して
いました。これに対し、あらかじめ検索用の DB を用意しておき、検索を高速
にする方法があります。DB を作成するツールとして Mew は"namazu" を使いま
す。"namazu" が取り扱えるのは、英語と日本語です。

DB を使った検索を利用したい場合は、まず "namazu" やそれが必要とするコマ
ンド群をインストールして下さい。次に各フォルダに対し、検索用の DB を作
成します。そのためには対象となる Summary モードで `km' と入力して下さい。
このように、DB を使った検索に関するコマンドは、`k' という文字で始まりま
す。DB の作成にはフォルダのメッセージの数に比例した時間がかかります。

DB を利用して検索し、`*' マークを付けるには `k?' を利用します。通常は検
索対象は本文とFrom:、Date:、Message-Id: になります。キーワードを入力す
れば、検索対象部分にそのキーワードを含むメッセージに `*' マークが付きま
す。

他のフィールドを対象にするには、「"+" フィールド名 ":" キーワード」と書
いて下さい。以下は Subject: に mew-dist を含むメッセージを検索する例で
す。

     +subject:mew-dist

二つのキーワードを両方含むようにしたい場合は "and"、どちらか一方でも含
んでいればいい場合は "or" で二つのキーワードを区切ります。このような高
度な利用法の詳細については、以下のページで、ブランクに何も入れずに
「search!」ボタンを押して得られる説明を読んで下さい。

     http://www.namazu.org/

複数のフォルダに対し DB を利用して検索し、合致したメッセージを Virtual
モードに表示することができます。それには、`k/' と入力して下さい。フォル
ダ名には、ワイルドカードが利用できます。

たとえば、+mew-1、+mew-2、+mew-3 というフォルダを対象にしたいなら、以下
のように入力します。

     +mew-*

あとは、`k?' と同様にキーワードを入力すれば OK です。

フォルダのメッセージが増減したら、`km' で DB を作り直して下さい。
namazu" が賢く差分を更新してくれます。




File: mew.jis.info, Node: Quit, Next: Customize, Prev: dbsearch, Up: Top

一休み
******

Mew を終了させたり、一時中断させたり、そのモード(正確にはバッファ)を消
去する方法を以下に示します。

<Summary モードと Virtual モード>

`q'
     Mew を一時中断し、他のバッファに切り替える。Mew 用のバッファはすべ
     て残っているので、バッファ操作で選べば再開できる。
`Q'
     Mew を終了。Mew が使ったすべてのバッファを消去する。
`C-cC-q'
     そのモード(正確にはバッファ)を消去する。

<Draft モードと Header モード>

`C-cC-q'
     その草稿を消去する。

<Addrbook モード>

`C-cC-q'
     そのバッファを消去する。




File: mew.jis.info, Node: Customize, Next: summary-mode, Prev: Quit, Up: Top

カスタマイズ
************

ここでは、Mew のデフォルトの動作を変更し、自分好みの Mew にする方法を説
明します。主に "~/.mew.el" で設定して下さい。

* Menu:

* summary-mode::                Summary mode
* message-mode::                Message mode
* draft-mode::                  Draft mode
* charset::                     文字コード
* highlight::                   色付け
* hooks::                       フック
* pop::			POP
* imap::                        IMAP
* nntp::                        NNTP
* smtp::			SMTP
* config::                      送受信の動作変化
* custom-misc::                 その他



File: mew.jis.info, Node: summary-mode, Next: message-mode, Prev: Customize, Up: Customize

Summary mode
============

Summary モードの書式は、`mew-summary-form' で指定できます。以下にデフォ
ルトの値を示します。

     '(type (5 date) " " (14 from) " " t (30 subj) "|" (0 body))

このように、`mew-summary-form' は、リスト、シンボル、文字列のリストです。

  1. 文字列はそのまま出力される
  2. リストは、整数とシンボルから構成される。シンボルは、呼び出す関数を
     意味する。関数名は、"mew-summary-form-" とシンボル名を連結すること
     で作られる。(例：' date というシンボルは、`mew-summary-form-date'
     という関数名になる) あらかじめ定義されているシンボルに
     は、'type、'time、'date、'year、'size、' from、'subj、'body がある。
     詳細は、`mew-summary-form-<symbol>' という名を持つ関数の説明を参照
     のこと。整数は、関数が返す文字列が埋めるフィールドの幅を指定する。
     正の数は、左詰めを意味する。負の数は、右詰めを意味する。もし、負の
     数を指定する場合、対応する関数は ASCII 文字列を返す必要がある。0
     は、行の残りを意味し、左詰めとなる。
  3. `t' 以外のシンボルは、(1 シンボル) に等しい。
  4. `mew-summary-form' は、利用される際に先頭に (mark) が付け加えられ
     る。
  5. `t' は、スレッドの際に段付けする位置を意味する。

例を以下に示します。

     (setq mew-summary-form
           '(type (5 date) " " (-4 size) " " (14 from) " " t (30 subj) "|" (0 body)))

`mew-summary-form-from-me-prefix' は、自分から送信されたメッセージの宛
先の先頭に加えられる文字列です。初期値は "To:" です。

`mew-summary-form-extract-rule' は、From: フィールドからどの部分を切り
出すか指定するためのリストです。要素
は、'name、'comment、'address、'nickname、あるいは正規表現である必要が
あります。初期値は '(nickname) です。


次の例を考えて下さい。

     A: Kazu Yamamoto <kazu@mew.org>
     B: kazu@mew.org (Kazu Yamamoto)
     C: Kazuhiko Yamamoto (Kazu) <kazu@mew.org>

それぞの要素は、以下のような意味を持ちます。

  1. 'name:: 名前の部分
          A. Kazu Yamamoto
          B. (No match)
          C. Kazuhiko Yamamoto (Kazu)
  2. 'comment:: コメントの部分
          A: (No match)
          B: Kazu Yamamoto
          C: (Kazu)
  3. 'address:: アドレスの部分
          A: kazu@mew.org
          B: kazu@mew.org
          C: kazu@mew.org
  4. 'nickname:: `mew-addrbook-for-summary' の値に応じたアドレス帳の個
     人情報のある要素。`mew-addrbook-for-summary' の初期値は
     `'nickname' なので、通常はニックネームに変換される。何が指定できる
     かは、*Note draft-mode:: を参照のこと。
  5. (regex):: 最初に合致した文字列

ある要素が合致しない場合、次の要素が評価されます。どの要素も From: フィー
ルドに合致しない場合か、この値が `nil' の場合、From: フィールド全体が利
用されます。


`mew-summary-form-mark-delete' が `t' の場合、重複しているメッセージに
自動的に `D' マークが付きます。初期値は `nil' です。

`mew-summary-form-mark-review' が `t' の場合、自分宛てのメッセージに自
動的に `*' マークが付きます。初期値は `nil' です。


いつも Emacs のフレーム全体で Mew を使いたい人は、以下の設定をして下さ
い。

     (setq mew-use-full-window t)


Summary モードの `SPC' は、`mew-summary-show-direction' によって、次の
メッセージの表示の仕方が変わります。また同様に、強いマークを付けた後カー
ソルが動く方向は `mew-summary-mark-direction' により指定できます。以下
の値を設定できます。

`up'
     上のメッセージを表示する。
`down'
     下のメッセージを表示する。
`next'
     読み進めている方向の次のメッセージを表示する。
`stop'
     次は表示しない。

両方とも初期値は `next' です。いつもメッセージを下から読む人は、以下の
ようにすればよいでしょう。

     (setq mew-summary-show-direction 'up)



File: mew.jis.info, Node: message-mode, Next: draft-mode, Prev: summary-mode, Up: Customize

Message mode
============

Emacs がサポートしてないデータ型のファイルは、Message モードに直接表示
できません。この場合、適切な外部アプリケーションがあれば、それを使って
表示可能です。Summary モードにおいて、パートの上で、`C-cC-e' と入力する
と、Message モードに指示された外部アプリケーションを起動し、そのパート
を表示できます。メッセージの本文がヘッダと同時に表示され、本文をパート
として選択できない場合、`:' を押します。すると、本文が第1パートとして表
示されるので、これを選択し、`C-cC-e' と入力すれば、本文に対して外部コマ
ンドを起動できます。本文が HTML で、外部のブラウザに表示させたいときが
典型例でしょう。

Message モードで指示されたものではなく、他の外部アプリケーションを指定
したい場合は、`C-cC-y' を使って下さい。また、データ型を指定し、そのデー
タ型に応じた外部アプリケーションを起動したい場合は、`C-uC-cC-e' を利用
して下さい。

現在のメッセージやパートを生の書式で Message モードに表示するには、`,'
を使って下さい。メッセージ全体をファイルとして開くには、`C-cTAB' を使い
ます。)


単に Mew をインストールした状態では、Text/Html を表示するには
mozilla" のような外部アプリケーションが必要です。この場合 Text/Html は、
単にパートとして、あるいはメッセージの本文として扱われ、外部アプリケー
ションを起動させる説明が Message モードに表示されています。それぞれ、パー
ト、およびメッセージ上で、`C-cC-e' と入力すれば、外部アプリケーションに
Text/Html を表示します。メッセージ上で `C-cC-e' と入力した場合は、(ヘッ
ダを除いて)本文のみが外部アプリケーションに渡されます。

利用する Text/Html 用の外部アプリケーションは、
`mew-prog-text/html-ext' に指定します。以下は、"mozilla" に設定している
例です。(必要であれば、アプリケーションの引数を
`mew-prog-text/html-ext-arg' に設定して下さい。)

     (setq mew-prog-text/html-ext "mozilla")

"w3m" と "emacs-w3m" をインストールすると、Text/Html を Message モード
に表示できるようになります。(以下で説明する "wvHtml"、"xlhtml"、
ppthtml" は、単なる "w3m" ではなく、国際化された "w3m-m17n" が必要で
す。) 両者をインストールしたら、"~/.mew.el" に以下の設定を加えて下さい。

     (condition-case nil
         (require 'mew-w3m)
       (file-error nil))

これで、あたかも Text/Plain であるかのように、Text/Html を Message モー
ドに表示できるようになります。この際も、`C-cC-e' の操作は有効です。

最近、Multipart/Alternative の中に Text/Plain と Text/Html の両方が入っ
ており、どちらかを選ぶようになっているメッセージを多く見掛けます。Mew
は、標準では Text/Plain の方を優先して表示します。"emacs-w3m" をインス
トールすれば、Text/Html の方を優先したくなるかもしれません。その場合、
以下の設定を "~/.mew.el" に加えて下さい。(ここで *Note multipart:: を読
み、`:' の使い方も思い出しておきましょう。)

     (setq mew-mime-multipart-alternative-list
           '("Text/Html" "Text/Plain" ".*"))


"wvHtml"、"xlhtml"、"ppthtml" というコマンドをインストールすれば、それ
ぞれ WORD、Excel、PowerPoint ファイルのテキスト部分を、Message モードに
表示可能です。これらのコマンドは、HTML を利用するので、上記の
Text/Html の設定を完了させて下さい。また、UTF-8 (Unicode) を利用します
ので、バージョン 21.3 以前の Emacs には、Mule-UCS もインストールして下
さい。

これで、たとえば WORD ファイルをあたかもテキストのように、Message モー
ドに表示可能になります。また、明示的に `C-cC-e' と入力しても、テキスト
として Message モードに表示します。

ここで説明したコマンドなどの入手先は、"mew.dot.mew" を参照して下さい。



File: mew.jis.info, Node: draft-mode, Next: charset, Prev: message-mode, Up: Customize

Draft mode
==========

自分へ Cc: したい人は `mew-cc'を設定して下さい。返答の際には、対象のメッ
セージから、別途 Cc: が用意される場合があります。複数の Cc: がある場合、
送信時に 1 つにまとめられます。

バックアップのため、自分が送るメッセージを受け取りたいと考え、しかもヘッ
ダに自分のアドレスを残したくないなら、Dcc: を使って下さい。`mew-dcc' に
自分のアドレスを設定しましょう。

いつも入れて欲しいヘッダは、`mew-header-alist' に連想リスト形式で定義し
て下さい。以下に例を示します。

     (setq mew-header-alist
           '(("X-fingerprint:" . "6B 63 38 88 67 5E 96 8E  CE A4 62 73 3F 11 64 94")
             ("X-URL:" . "http://www.Mew.org/~kazu/")))

引用ラベルは、引用するフィールドを `mew-cite-fields'、ラベルの書式を
`mew-cite-format' に定義します。引用記号は `mew-cite-prefix' に指定しま
す。デフォルトは、以下のようになっています。

     (defvar mew-cite-fields '("From:" "Subject:" "Date:"))
     (defvar mew-cite-format "From: %s\nSubject: %s\nDate: %s\n\n")
     (defvar mew-cite-prefix "> ")

引用ラベルに Message-ID: を加えるには以下のようにします。

     (setq mew-cite-fields '("From:" "Subject:" "Date:" "Message-ID:"))
     (setq mew-cite-format "From: %s\nSubject: %s\nDate: %s\nMessage-ID: %s\n\n")

引用記号にアドレスのユーザ部分が付くようにするには以下のようにします。

     (setq mew-cite-prefix-function (function mew-cite-prefix-username))

これで引用記号は以下のようになります。

     From: SUMIKAWA Munechika <sumikawa@ebina.hitachi.co.jp>
     Subject: Wine
     Date: Wed, 23 Jul 1997 11:40:50 +0900

     sumikawa> おはようからおやすみまでニートでおなじみの角川です。
     sumikawa>
     sumikawa> さて、とろけるワイン作戦ですが、定石通り '89 のボルドーの
     sumikawa> カベルネ・ソービニョンを狙いたいと思います。

引用ラベルの From: の部分と、引用記号は、アドレス帳の個人情報の要素に変
換できます。それぞれ、`mew-addrbook-for-cite-label'、
`mew-addrbook-for-cite-prefix' で指定できます。初期値はそれぞれ `nil'
と `'username' です。以下のような値が設定できます。

'shortname
     短縮名
'address
     アドレス
'username
     アドレスのユーザ部分
'nickname
     ニックネーム
'name
     正式な氏名

例として以下のような設定を考えてみましょう。

     (setq mew-addrbook-for-cite-label 'nickname)
     (setq mew-addrbook-for-cite-prefix 'nickname)

最初の設定でラベルの中のアドレスがニックネームに変わります。また、次の
設定で引用記号もニックネームに置き換わります。

     From: すみっち
     Subject: Wine
     Date: Wed, 23 Jul 1997 11:40:50 +0900

     すみっち> おはようからおやすみまでニートでおなじみの角川です。
     すみっち>
     すみっち> さて、とろけるワイン作戦ですが、定石通り '89 のボルドーの
     すみっち> カベルネ・ソービニョンを狙いたいと思います。



File: mew.jis.info, Node: charset, Next: highlight, Prev: draft-mode, Up: Customize

文字コード
==========

*Note charset-guess:: で説明したように、Mew ではメッセージを作成する際
に適切な文字コードを自動的に選択します。

もし複数の言語の文字が混在しており、国際化された文字コードを選択する必
要がある場合は、`mew-charset-m17n' の値を利用します。初期値は、"utf-8"
(Unicode と理解してよい)です。"iso-2022-jp-2" にしたい人は、以下のよう
に設定するとよいでしょう。

     (setq mew-charset-m17n "iso-2022-jp-2")

メッセージを作成した際に、推測された文字コードを確認したい場合は、
`mew-ask-charset' を設定して下さい。

`nil'
     どのような文字コードが利用されても確認なし
`文字コードのリスト'
     このリストに存在しない文字コードが利用された場合に確認
`t'
     `mew-charset-m17n' が利用された場合に確認

たとえば、US-ASCII と ISO-2022-JP 以外の文字コードが選ばれた場合確認し
たいのであれば、以下のように設定して下さい。

     (setq mew-ask-charset '("us-ascii" "iso-2022-jp"))

こう設定しているとき、たとえば "utf-8" が選択されると、以下のように訊か
れます。

     utf-8 is used. OK? (y or n)

`y' を押すと、メッセージが送信されます(あるいは、キューに溜ります)。
`n' を押すと、草稿が元の状態に戻ります。Typing `y' makes the composed
message sent (or queued). If you type `n', you will go back to the
original draft.

ヨーロッパでは、Latin 1 (ISO-8859-1) の代りに、ユーロ記号を含む Latin
9 (ISO-8859-15、通称 Latin 0) が使われ始めています。草稿に、Latin 1 の
文字と Latin 9 の文字が混在していると、以下の手順によって、文字コードが
決定されます。

  1. `unify-8859-on-decoding-mode' を利用している場合：
       1. ISO-8859-1 に収まるなら "iso-8859-1" を利用
       2. そうでないなら "utf-8" を利用
  2. `unify-8859-on-decoding-mode' を利用していない場合：
       1. ISO-8859-1 と ISO-8859-15 のどちらにも収まる場合、
          `mew-charset-latin' を利用
       2. ISO-8859-1 に収まるなら "iso-8859-1" を利用
       3. ISO-8859-15 に収まるなら "iso-8859-15" を利用
       4. そうでないなら、"utf-8" を利用

`mew-charset-latin' の初期値は、"iso-8859-15" です。"iso-8859-1" にした
い場合は、以下のように設定します。

     (setq mew-charset-latin "iso-8859-1")



File: mew.jis.info, Node: highlight, Next: hooks, Prev: charset, Up: Customize

色付け
======

`mew-use-highlight-mark' が `t' の場合、マークの付いたメッセージに色が
付きます。初期値は `t' です。

`mew-use-highlight-header' が `t' の場合、メッセージのヘッダに色が付き
ます。初期値は `t' です。

`mew-use-highlight-body' が `t' の場合、メッセージの本文に色が付きます。
初期値は `t' です。色を付ける上限は、`mew-highlight-body-max-size' で指
定できます。初期値は 10000 バイトです。

`mew-use-highlight-url' が `t' の場合、メッセージ中の URL に仕掛けが施
されて、マウスを持っていくと光るようになります。初期値は `t' です。

`mew-use-cursor-mark' が `t' の場合、Summary モードにおいて、現在表示し
ているメッセージの行頭に、`mew-cursor-mark' で指定された目印が付きます。
初期値は `nil' です。`mew-cursor-mark' の初期値は ">" です。

`mew-use-highlight-cursor-line' が `t' の場合、Summary モードでカーソル
のある行に下線が引かれます。初期値は `t' です。

`mew-use-highlight-mouse-line' が `t' の場合、Emacs がマウスの色付けを
サポートしていれば、Summary モードでマウスのある行に色がつきます。真中
のボタンをクリックしながら、マウスだけでメッセージを読む際にはとても便
利です。初期値は `nil' になっています。

`mew-use-highlight-x-face' が `t' で、かつグラフィカル Emacs を使ってい
る場合、ヘッダ中の X-Face: が Message モードでアイコン化されます。グラ
フィカル Emacs での初期値は `t' です。



File: mew.jis.info, Node: hooks, Next: pop, Prev: highlight, Up: Customize

フック
======

Mew で用意されているフックをまとめます。

`mew-env-hook'
     Mew の起動時の環境が設定される前に評価される。
`mew-init-hook'
     Mew の起動時に評価される。
`mew-summary-mode-hook'
     Summary モードに入るときに評価される。
`mew-virtual-mode-hook'
     Virtual モードに入るときに評価される。
`mew-thread-display-hook'
     スレッドが表示された後に評価される。
`mew-header-mode-hook'
     Header モードに入るときに評価される。
`mew-draft-mode-hook'
     Draft モードに入るときに評価される。
`mew-draft-mode-newdraft-hook'
     新しい草稿が用意された際に、Draft モードにおいて評価される。
`mew-draft-mode-reedit-hook'
     +draft でないフォルダにある古い草稿を再編集した際に、Draft モード
     において評価される。
`mew-draft-mode-reedit-draft-hook'
     +draft でないフォルダにある草稿を再編集した際に、Draft モードにお
     いて評価される。
`mew-draft-mode-reedit-queue-hook'
     +queue または +postq フォルダにあるメッセージを再編集した際に、
     Draft モードにおいて評価される。
`mew-draft-mode-edit-again-hook'
     古い形式で戻ってきたメッセージを再編集した際に、Draft モードにおい
     て評価される。
`mew-message-mode-hook'
     Message モードに入るときに評価される。
`mew-message-hook'
     メッセージが Message モードで表示される度に評価される。
`mew-make-message-hook'
     Draft モードで MIME メッセージを作る前、つまり `C-cC-m' の際の最初
     に評価される。例：(add-hook 'mew-make-message-hook
     'ispell-message)
`mew-send-hook'
     メッセージを SMTP で送信/キューイングする前に評価される。メッセー
     ジの最終形が作られる前に評価されることに注意。
`mew-post-hook'
     メッセージを NNTP で投稿/キューイングする前に評価される。メッセー
     ジの最終形が作られる前に評価されることに注意。
`mew-real-send-hook'
     メッセージを SMTP で送信/キューイングする前に評価される。メッセー
     ジの最終形が作られた後に評価されることに注意。
`mew-real-post-hook'
     メッセージを NNTP で送信/キューイングする前に評価される。メッセー
     ジの最終形が作られた後に評価されることに注意。
`mew-smtp-flush-hook'
     +queue フォルダにメッセージがある場合に、SMTP が起動される前に評価
     される。
`mew-nntp2-flush-hook'
     +postq フォルダにメッセージがある場合に、NNTP が起動される前に評価
     される。
`mew-smtp-sentinel-hook'
     SMTP が終了する際に評価される。
`mew-nntp-sentinel-hook'
     受信用の NNTP が終了する際に評価される。
`mew-nntp2-sentinel-hook'
     送信用の NNTP が終了する際に評価される。
`mew-pop-sentinel-hook'
     POP が終了する際に評価される。
`mew-pop-sentinel-non-biff-hook'
     Biff ではない POP が終了する際に評価される。
`mew-imap-sentinel-hook'
     IMAP が終了する際に評価される。
`mew-imap-sentinel-non-biff-hook'
     Biff ではない IMAP が終了する際に評価される。
`mew-scan-sentinel-hook'
     Summary モードの `s' が終了する際に評価される。
`mew-summary-ls-no-scan-hook'
     Summary モードの `s' がフォルダの一覧を取らなかった場合に評価され
     る。
`mew-summary-exec-hook'
     Summary モードの `x' の実行が終了する際に評価される。
`mew-sort-hook'
     Summary モードの `S' の実行が終了する際に評価される。
`mew-pack-hook'
     Summary モードの `O' の実行が終了する際に評価される。
`mew-summary-toggle-disp-msg-hook'
     Summary モードの `v' の実行が終了する際に評価される。
`mew-syntax-format-hook'
     マルチパートの書式を作成する関数 `mew-syntax-format' が呼ばれた際
     に評価される。
`mew-addrbook-mode-hook'
     アドレス帳の登録モードに入るときに評価される。
`mew-cite-hook'
     Draft モードで引用する際に呼ばれる。通常 supercite を設定するため
     に使う。
`mew-before-cite-hook'
     Draft モードでメッセージを引用する直前に呼ばれる。
`mew-suspend-hook'
     Mew を一時中断した際に評価される。
`mew-quit-hook'
     Mew の終了時に評価される。

以下にフックの設定例を示します。

Draft モードでは、フックを `text-mode-hook'、`mew-draft-mode-hook' の順
で評価します。`text-mode-hook' で `auto-fill-mode' を設定していない人は、
`mew-draft-mode-hook' を以下のように設定するのがよいかもしれません。

     (setq mew-draft-mode-hook (function (lambda () (auto-fill-mode 1))))



