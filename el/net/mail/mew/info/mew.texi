\input texinfo  @c -*-texinfo-*-
@c %**start of header
@setfilename mew.info
@settitle Mew (Messaging in the Emacs World)
@c %**end of header

@clear jp
@clear us
@set us

@ifset jp
@c Mew の texinfo
@c Copyright (C) 1996-2005 山本和彦
@c M-x texinfo-format-buffer で info にしてね。
@end ifset
@ifset us
@c Texinfo for Mew
@c Copyright (C) 1996-2005 Kazuhiko Yamamoto
@c Try "M-x texinfo-format-buffer" or makeinfo to get the Info.
@end ifset

@set version 4.2
@set modified 2005/02/09
@set X-Mailer: Mew version 4.2 on Emacs 21.3

@titlepage
@sp 10
@center
@subtitle Messaging in the Emacs World
@ifset jp
@title 『Mew』
@subtitle // みゅう //
@author Copyright @copyright{}1996-2005 山本和彦
@end ifset
@ifset us
@title Mew
@author Copyright @copyright{}1996-2005 Kazuhiko Yamamoto
@end ifset
@end titlepage

@ifset jp
@dircategory Message User Agent
@direntry
* Mew-J: (mew.jis.info).     Messaging in the Emacs World.
@end direntry
@end ifset

@ifset us
@dircategory Message User Agent
@direntry
* Mew: (mew.info).           Messaging in the Emacs World.
@end direntry
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Top
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@ifinfo

@node Top, Overview, (dir), (dir)
@ifset jp
@top Mew マニュアル
@end ifset
@ifset us
@top Mew Manual
@end ifset

@flushright
@ifset jp
山本和彦
作成 1996/02/19
更新 @value{modified}
@end ifset
@ifset us
Kazu YAMAMOTO
Created 1996/02/18
Modified @value{modified}
@end ifset
@end flushright

@ifset jp
このマニュアルでは、Mew バージョン@value{version} について解説します。こ
のマニュアルの他に、Mew に関する有益な情報は Mew の公式ホームページ
(http://www.Mew.org/)から得られるかもしれません。
@end ifset
@ifset us
This manual documents Mew version @value{version}. In addition to this
manual, you may find useful information about Mew from Mew's official
home page (http://www.Mew.org/).
@end ifset

@end ifinfo

@menu
@ifset jp
* Overview::                    はじめに読んでね
* Viewing::                     メッセージを表示する
* Composing::                   メッセージを作成する
* Marks::                       愉快なマークたち
* Refile::                      楽々整理整頓
* Pick::                        メッセージの選択
* Quit::                        一休み
* Customize::                   カスタマイズ
* Tips::                        さらなる一歩
* Convention::                  メッセージの作法
* Implementation::              実装について
* Avail::                       入手方法とメーリングリスト
* Copyright::                   著作権について
* Variable Index::              変数索引
* Key Index::                   キー索引
@end ifset
@ifset us
* Overview::                    Read me first
* Viewing::                     Viewing messages
* Composing::                   Composing messages
* Marks::                       Funny marks
* Refile::                      Happy refiling
* Pick::                        Selecting messages
* Quit::                        Give me a break
* Customize::                   Customizing Mew
* Tips::                        Advanced usage
* Convention::                  E-mail convention
* Implementation::              Implementation Issues
* Avail::                       Availability and mailing-list
* Copyright::                   Copyright
* Variable Index::              Variable Index
* Key Index::                   Key Index
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Overview
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Overview, characteristic, Top, Top
@ifset jp
@chapter はじめに読んでね
@end ifset
@ifset us
@chapter Read me first
@end ifset

@ifset jp
Mew とは、テキスト・メールやマルチメディア・メール(MIME)、ニュース、セキュ
リティ機能(PGP、SSH、SSL)を便利に利用するためのユーザインターフェイスで
す。
@end ifset
@ifset us
Mew is a user interface for text messages, multimedia messages(MIME),
news articles and security functionality including PGP, SSH and SSL.
@end ifset

@ifset jp
Mew は 「Messaging in the Emacs World」 の略です。先頭の M は大文字で表
記し、「みゅう」と読みます。M で始まるかわいらしい単語を選んだ結果 Mew 
になりました。決して漫画の題名や某アイドルの歌、あるいは、関西の会社に因
んでいるわけではありません。:p
@end ifset
@ifset us
Mew is an acronym for "Messaging in the Emacs World". You should spell
it with the first letter capitalized and pronounce it as it is
(i.e. the meow of cats). When the author started programming it, he
chose a cute word from his English dictionary. Thus, Mew.
@end ifset

@menu
@ifset jp
* characteristic::             Mew の特長
* Emacsen::                    Emacs のバージョン
* modes::                      モード
* folder convention::          フォルダの種類
* configuration::              初期設定
* password::                   パスワード
* start::                      起動
@end ifset
@ifset us
* characteristic::             Mew's features
* Emacsen::                    Supported Emacs versions
* modes::                      Modes
* folder convention::          Folder convention
* configuration::              Configuration
* password::                   Password
* start::                      Starting
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%

@node characteristic, Emacsen, Overview, Top
@ifset jp
@section Mew の特長
@end ifset
@ifset us
@section Mew's features
@end ifset

@ifset jp
Mew バージョン @value{version} の特長を以下に示します。
@end ifset
@ifset us
The features of Mew @value{version} are as follows:
@end ifset

@itemize @minus
@item
@ifset jp
複雑な構造を持つメッセージを簡単に表示できます。メッセージを表示する作業
は、@samp{SPC} を押すだけです。
@end ifset
@ifset us
You can easily display a very complicated structured message. What you
should do to view messages is just type @samp{SPC}.
@end ifset

@item
@ifset jp
コピー程度のファイルの操作を知っている人ならだれでも簡単に複雑なメッセー
ジを作成できます。
@end ifset
@ifset us
If you know how to do file operations such as copy, you can compose a
very complicated message without any difficulty.
@end ifset

@item
@ifset jp
メッセージの一覧表示が終了するまで待たなくても、メッセージを読み始められ
ます。
@end ifset
@ifset us
You can start to read messages before they are all fully listed.
@end ifset

@item
@ifset jp
Summary モードのメッセージの一覧を保存しているので、フォルダを移動した場
合は、更新された部分だけを一覧表示します。
@end ifset
@ifset us
Since Mew preserves lists of messages in Summary mode, when you move
messages to a new folder, they will automatically be listed
incrementally.
@end ifset

@item
@ifset jp
メッセージの整頓先を賢く推測します。たくさんメッセージを受け取る人は、こ
れがないと生きていけません。
@end ifset
@ifset us
Mew neatly suggests default folders for refiling. Those who receive many
messages cannot live without this feature.
@end ifset

@item
@ifset jp
Draft モードでは、フィールド名、メールアドレス、氏名、ドメイン名、フォ
ルダ名を補完できます。
@end ifset
@ifset us
In Draft mode, you can complete field names, e-mail addresses, 
receiver's names, domain names, and folder names.
@end ifset

@item
@ifset jp
Subject: や Date: などを条件に指定して、簡単にメッセージを選択できます。
@end ifset
@ifset us
You can easily select certain messages by specifying conditions such as
Subject: and Date:.
@end ifset

@item
@ifset jp
PGP で暗号化されたメッセージを自動的に復号化します。また、電子署名を自動
的に検証します。
@end ifset
@ifset us
Mew automatically decodes messages encrypted with PGP. It also
automatically verifies signed messages.
@end ifset

@item
@ifset jp
PGP を使って、メッセージを簡単に暗号化したり、署名したりできます。
@end ifset
@ifset us
You can easily encrypt or sign a message with PGP.
@end ifset

@item
@ifset jp
MIME の構造を解析したり、PGP の署名を検証したりするのには少し時間がかか
ります。そこで、ユーザがあるメッセージを読んでいる間に、次のメッセージを
あらかじめ処理しておくことで高速性を実現しています。解析されたメッセージ
は、しばらくの間保存されます。
@end ifset
@ifset us
It takes a bit of time to analyze MIME syntax or to verify a PGP
signature. While the user is reading a message, Mew processes the next
message so that the next message can be displayed faster. Analyzed
messages are cached briefly.
@end ifset

@item
@ifset jp
複数のフォルダを1つのフォルダに見せかけられます。
@end ifset
@ifset us
You can view multiple folders simultaneously.
@end ifset

@item
@ifset jp
メッセージのやり取りの流れを可視化するスレッドの機能を備えています。
@end ifset
@ifset us
Thread, a mechanism to display the flow of messages, is supported.
@end ifset

@item
@ifset jp
フォルダ名を入力する場合、フォルダ名の一部をキーとして検索できます。
@end ifset
@ifset us
When you input a folder name, you can search it with a substring of the
name.
@end ifset

@end itemize

@c %%%%%%%%%%%%%%%%%

@node Emacsen, modes, characteristic, Top
@ifset jp
@section Emacs のバージョン
@end ifset
@ifset us
@section Supported Emacs versions
@end ifset

@ifset jp
Emacs 20.7 あるいは Emacs 21.3 以降 (CVS 版を含む)を使って下さい。これ
らより前のバージョンはサポートしていません。(Mew は、XEmacs 21.1.14 以
降でも動くかもしれませんが、正式にはサポートしていません。)
@end ifset
@ifset us
Please use Emacs 20.7 or Emacs 21.3 or later (including the CVS
version of Emacs). Mew doesn't support earlier versions. (Mew may work
on XEmacs 21.1.14 or later but Mew does not support it officially
anymore.)
@end ifset

@ifset jp
このマニュアルで単に Emacs といった場合には、サポートしているすべてのプ
ラットフォームを意味します。国際化 Emacs といった場合は、多くの文字コー
ドが利用できる Emacs 20/21、そして、--with-mule オプション付きでコンパイ
ルした XEmacs を指します。これに対し、バイリンガル Emacs といった場合に
は、--unibyte オプションで起動した Emacs 20/21、--with-mule オプション無
しでコンパイルした XEmacs を意味します。
@end ifset
@ifset us
Throughout this manual, "Emacs" means all supported platforms.
"Internationalized Emacs" indicates multi character set platforms such
as Emacs 20/21, and XEmacs complied with the --with-mule option while
"Bilingual Emacs" means English-and-Latin1 platforms including Emacs
20/21 executed with the --unibyte option, XEmacs complied without the
--with-mule option.
@end ifset

@ifset jp
また、グラフィカル Emacs といった場合には、画像を表示できる Emacs 21 と 
XEmacs を指します。反対に、テキストしか表示できない Emacs は、テキスト 
Emacs と呼びます。
@end ifset
@ifset us
"Graphical Emacs" indicates graphical platforms such as Emacs 21 and
XEmacs, whereas text-only platforms are called "Text Emacs".
@end ifset

@c %%%%%%%%%%%%%%%%%

@node modes, folder convention, Emacsen, Top
@ifset jp
@section モード
@end ifset
@ifset us
@section Modes
@end ifset

@ifset jp
Mew には次の 6 つのモードがあります。
@end ifset
@ifset us
Mew has the following six modes:
@end ifset

@table @samp
@ifset jp
@item Summary モード
メッセージの一覧を表示し選択するモード。
@item Virtual モード
単数あるいは複数のフォルダからある条件に合致したメッセージを取り出し、
仮想的に1つのフォルダにしたモード。Summary モードに似ている。スレッドも
このモードとして実現されている。
@item Message モード
メッセージの内容を表示するモード。
@item Draft モード
メッセージの送信、返答、転送を準備するためのモード。
@item Header モード 
既存のメッセージのヘッダのみを編集し送信するためのモード。
@item Addrbook モード
アドレス帳にエントリを登録するためのモード。
@end ifset
@ifset us
@item Summary mode
A mode to list and select messages.
@item Virtual mode
A mode to list messages selected with a specific condition from one or
more folders. This is similar to Summary mode. The threading feature
is implemented as a part of this mode.
@item Message mode
A mode to display the content of a message.
@item Draft mode
A mode to prepare a message to be sent, answered, and forwarded.
@item Header mode
A mode to edit the header of a message and to send it.
@item Addrbook mode
A mode to register an entry to the address book (Addrbook).
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%

@node folder convention, configuration, modes, Top
@ifset jp
@section フォルダの種類
@end ifset
@ifset us
@section Folder convention
@end ifset

@ifset jp
Mew の用語では、メッセージが届く場所を「メールボックス」と呼びます。メー
ルボックスの種類としては、ローカルのメールボックス、POP サーバ、および 
IMAP サーバがあります。
@end ifset
@ifset us
With Mew's terminology, a place where messages are deliver is called
'mailbox'. There are three kinds of mailbox: local, POP server and IMAP
server.
@end ifset

@ifset jp
また、Mew 自身ががメッセージを格納する箱のこと「フォルダ」と呼びます。フォ
ルダ名は、一文字の記号からなる修飾子と文字列が連結された形式になっていま
す。たとえば、「+inbox」というフォルダの修飾子は「+」です。
@end ifset
@ifset us
A box which contains messages used by Mew is called "folder". The name
of a folder is in the format that "proto" is followed by a string, where
"proto" is one sign letter. For example, the proto of "+inbox" is "+".
@end ifset

@ifset jp
Mew のフォルダには、「ローカル・フォルダ」と「リモート・フォルダ」の2種
類があります。
@end ifset
@ifset us
Mew's folders are categorized to two types: "local folder" and "remote
folder".
@end ifset

@ifset jp
ローカル・フォルダとは、Mew が動いているコンピュータに「本物」が作られる
フォルダです。そのフォルダに格納されるメッセージも本物です。(ですから、
もしそのフォルダのメッセージを消してしまうと復元できません。)
@end ifset
@ifset us
A local folder is a folder which is *original* and is created the
computer on which Mew is running. Also, messages stored in the folder
are *original*. (So, if you remove them, you cannot revive them.)
@end ifset

@ifset jp
ローカル・フォルダの修飾子は "+" です。以下に特殊なローカル・フォルダを
挙げます。
@end ifset
@ifset us
The proto of a local folder is "+". We summarize special local folders
as follows:
@end ifset

@table @samp
@ifset jp
@item +inbox
ローカルのメールボックスや POP サーバに届いたメッセージを、ローカルに移
動させて最初に保存するためのローカル・フォルダ。メッセージを整理する場合
は、"+inbox" から他のローカル・フォルダに移動させることになる。
@item +draft
書きかけのメッセージを保存しておくローカル・フォルダ。
@item +queue
書き終ってメールの配送に適した書式に変換されたメッセージが溜るローカル・
フォルダ。"+queue" のメッセージは、いずれ SMTP によって送信さる。
@item +postq
書き終ってニュースに投稿するのに適した書式に変換されたメッセージが溜るロー
カル・フォルダ。"+postq" のメッセージは、いずれ NNTP によって送信される。
@end ifset
@ifset us
@item +inbox
The first local folder to store messages which you fetch from your local
mailbox or your POP server. To refile messages, what you do is to move
the messages from "+inbox" to other folders.
@item +draft
A local folder where messages, which you have not completed yet, are
stored.
@item +queue
A local folder where e-mail messages to be sent are stored. The
messages in "+queue" will be eventually sent by SMTP.
@item +postq
A local folder where NetNews message to be sent are stored. The
messages in "+postq" will be eventually sent by NNTP.
@end ifset
@end table

@ifset jp
リモート・フォルダとは、サーバ側にあるフォルダをローカルにコピーしたもの
です。本物のメッセージはあくまでサーバ側にあり、ローカルにはメッセージの
コピーがキャッシュされます。
@end ifset
@ifset us
A remote folder is a COPY whose original is on a server side.  A message
in a remote folder is a cache which is copied from the server.
@end ifset

@ifset jp
利用できるリモート・フォルダの修飾子を以下に示します。
@end ifset
@ifset us
Here are a list of available proto of remote folders:
@end ifset

@table @samp
@ifset jp
@item -
ニュースのニュースグループ。例："-fj.mail.reader.mew"
@item $
POP サーバのサーバ側のフォルダ。例："$inbox" (POP サーバのフォルダは 1 
つしかないので、"$" で始まるリモート・フォルダは "$inbox" のみ。)
@item %
IMAP のフォルダ。例："%inbox"
@end ifset
@ifset us
@item -
Newsgroups of NetNews. Example: "-fj.mail.reader.mew"
@item $
The folder on a POP server. Example: "$inbox" (Since there is only one
folder in a POP server, "$inbox" is the only folder whose name starts
with "$".)
@item %
Folders on an IMAP servers. Example: "%inbox"
@end ifset
@end table

@ifset jp
サーバが異なれば、リモート・フォルダも異なってきます。複数のサーバは、ケー
スという機能を使って指定します。詳しくは、@xref{config} を参照して下さい。
あるケースに対するリモート・フォルダは、"case:folder" のように、フォルダ
名の前にケース名を付けて指定します。ケースが "default" の場合は、"case:" 
の部分を省略可能です。
@end ifset
@ifset us
If you use several servers, there are multiple sets of remote folders.
You can specify several servers by using "case". For more information
about "case", see @xref{config}. To specify a remote folder
corresponding to a case, you should write "case:folder". You can omit
"case:" if a case is "default".
@end ifset

@ifset jp
ケースと修飾子の組は、あるメッセージが属す世界を構成しています。メッセー
ジは、それが属す世界の中を移動できます。受け取ったメッセージは、後で探し
やすいように、適切なフォルダに移動させて保存します。この整頓の方法につい
て、@xref{Refile} を参照して下さい。
@end ifset
@ifset us
A combination of case and proto organized a world to which a message
belongs. A message can move within its world. To make it easy to search
received messages afterward, they should be moved to proper folders. To
know how to refile received messages, see @xref{Refile}.
@end ifset

@ifset jp
なお、POP サーバには "$inbox" というフォルダしかありませんから、"$" の世
界でメッセージを移動させることはできません。また、ニュースの記事は自分の
ものではありませんから、"-" の世界でもメッセージを移動は不可能です。
@end ifset
@ifset us
You cannot move a message in the "$" world because there is only one
folder, "$inbox". You cannot move a message in the "-" world either
since messages in the "-" world are not yours.
@end ifset

@ifset jp
世界を超えてメッセージを移動させたい場合は、コピーします。ただし、コピー
先はローカル・フォルダに限定されます。この方法は、@xref{retrieving} で説
明されています。
@end ifset
@ifset us
If you want to move a message from one world to another, you should COPY
it. Its destination is restricted to a local folder. This method is
described in @xref{retrieving}.
@end ifset

@ifset jp
フォルダのリストを作成しておくと、フォルダ名に対し補完が利用できて便利で
す。フォルダのリストを作成する方法は、@xref{status-update} を参照して下
さい。
@end ifset
@ifset us
If you make a list of folders, you can use the completion functionality
for folders. To know how to make a list of folders, please refer to
@xref{status-update}.
@end ifset

@c %%%%%%%%%%%%%%%%%

@node configuration, password, folder convention, Top
@ifset jp
@section 初期設定
@end ifset
@ifset us
@section Configuration
@end ifset
@vindex read-mail-command
@vindex mail-user-agent
@vindex mew-name
@vindex mew-user
@vindex mew-smtp-server
@vindex mew-pop-user
@vindex mew-mailbox-type
@vindex mew-mbox-command
@vindex mew-mbox-command-arg
@vindex mew-proto
@vindex mew-imap-server
@vindex mew-nntp-server

@ifset jp
Mew を起動するには、組織の設定ファイルか自分の "~/.emacs" に以下の設定が
必要です。
@end ifset
@ifset us
To execute Mew, the followings are necessary either in the site
configuration file or in your "~/.emacs".
@end ifset

@lisp
(autoload 'mew "mew" nil t)
(autoload 'mew-send "mew" nil t)

;; Optional setup (Read Mail menu for Emacs 21):
(if (boundp 'read-mail-command)
    (setq read-mail-command 'mew))

;; Optional setup (e.g. C-xm for sending a message):
(autoload 'mew-user-agent-compose "mew" nil t)
(if (boundp 'mail-user-agent)
    (setq mail-user-agent 'mew-user-agent))
(if (fboundp 'define-mail-user-agent)
    (define-mail-user-agent
      'mew-user-agent
      'mew-user-agent-compose
      'mew-draft-send-message
      'mew-draft-kill
      'mew-send-hook))
@end lisp

@ifset jp
Latin-1 のために、Emacs を --unibyte オプション付で起動しているか、環境
変数 EMACS_UNIBYTE と共に起動している場合、以下の設定を"~/.emacs" に入れ
て下さい。
@end ifset
@ifset us
If you are using Emacs with the --unibyte option or the EMACS_UNIBYTE
environment variable for Latin-1, put the following into your "~/.emacs".
@end ifset

@lisp
(set-language-environment "Latin-1")
(set-input-method "latin-1-prefix") ;; or "latin-1-postfix"
@end lisp

@ifset jp
Latin-1 のために、以下のような設定をしているなら、削って下さい。これは 
Latin-1 にカスタマイズするための方法としては推奨されていませんし、この
設定では Mew は正しく動きません。
@end ifset
@ifset us
If you use the following configuration for Latin-1, please remove it.
This is an obsolete handling of Latin-1 that can cause Mew to function
incorrectly.
@end ifset

@lisp
(standard-display-european 1)
@end lisp

@ifset jp
Mew は起動時に、"~/.mew.el" を読み込みます。Mew に関する設定は、このファ
イルに入れるとよいでしょう。
@end ifset
@ifset us
When booting, Mew reads the file "~/.mew.el". All Mew configurations
should be written in this file.
@end ifset

@ifset jp
メールアドレスを指定するために、以下の設定が必要です。
@end ifset
@ifset us
To configure your e-mail address, the followings are necessary.
@end ifset

@lisp
;; (setq mew-name "your name") ;; (user-full-name)
;; (setq mew-user "user name of e-mail address") ;; (user-login-name)
(setq mew-mail-domain "domain of e-mail address")
@end lisp

@ifset jp
SMTP を使ってメッセージを送信するためには、以下の設定が必要です。
@end ifset
@ifset us
To send e-mail messages by SMTP, the following is necessary.
@end ifset

@lisp
(setq mew-smtp-server "your SMTP server")  ;; if not localhost
@end lisp

@ifset jp
POP を使ってメッセージを受信する場合は、以下の設定が必要です。
@end ifset
@ifset us
If you want to use POP to receive e-mail messages, the followings are
necessary.
@end ifset

@lisp
;; (setq mew-pop-user "your POP account")  ;; (user-login-name)
(setq mew-pop-server "your POP server")    ;; if not localhost
@end lisp

@ifset jp
メッセージの受信にローカルのメールボックスを利用したい場合は、以下のよう
な設定が必要です。
@end ifset
@ifset us
If you want to use a local mailbox to receive e-mail messages, the
followings are necessary.
@end ifset

@lisp
;; To use local mailbox "mbox" or "maildir" instead of POP
(setq mew-mailbox-type 'mbox)
(setq mew-mbox-command "incm")
(setq mew-mbox-command-arg "-u -d /path/to/mbox")
;; If /path/to/mbox is a file, it means "mbox".
;; If /path/to/mbox is a directory, it means "maildir".
@end lisp

@ifset jp
IMAP を使ってメッセージを受信する場合は、以下の設定が必要です。
@end ifset
@ifset us
If you want to use IMAP to receive e-mail messages, the followings are
necessary.
@end ifset

@lisp
(setq mew-proto "%")
;; (setq mew-imap-user "your IMAP account")  ;; (user-login-name)
(setq mew-imap-server "your IMAP server")    ;; if not localhost
@end lisp

@ifset jp
ニュースを読み書きする場合は、以下の設定が必要です。
@end ifset
@ifset us
To read and/or write articles of NetNews, the followings are necessary.
@end ifset

@lisp
;; (setq mew-nntp-user "your NNTP account")
(setq mew-nntp-server "your NNTP server")
@end lisp

@c %%%%%%%%%%%%%%%%%

@node password, start, configuration, Top
@ifset jp
@section パスワード
@end ifset
@ifset us
@section Password
@end ifset
@vindex mew-use-cached-passwd

@ifset jp
メッセージを送受信したり、PGP を使ったりする場合には、パスワードを訊かれ
ることがあります。パスワードを入力する前に以下の条件のいずれかが満たされ
ていることを確認しましょう。

@itemize @minus
@item
Emacs が目の前のコンピュータで動いている
@item
Emacs が遠隔のコンピュータで動いているが、なんらかの暗号手段を使って通信
している。
@end itemize

どちらの条件も満たされない場合は、パスワードを入力しないで下さい。入力す
ると盗聴される恐れがあります。
@end ifset
@ifset us
When fetching/sending messages or using PGP, you may be required to input
your password. Before you type your password, check carefully to see if
either the following conditions is satisfied:

@itemize @minus
@item
Emacs is running on a local computer
@item
Emacs is running on a remote computer, but an encryption mechanism is
being used for communication.
@end itemize

If neither of these conditions are satisfied, do not input a
password. Your password could be accessed without your knowledge.
@end ifset

@ifset jp
パスワードを何回も入力するのが面倒な人は、パスワードを保存する機能を利用
して下さい。これには以下設定が必要です。
@end ifset
@ifset us
If you get sick of inputting your password from time to time, please make
use of the password-cache mechanism with the following configuration.
@end ifset

@lisp
(setq mew-use-cached-passwd t)
@end lisp

@ifset jp
これであらゆるパスワード(POP、PGP など)が一時的に保存されます。パスワー
ドが保存されている間は、パスワードの入力を省略できます。保存されているパ
スワードは一定時間(通常は 20 分)が過ぎると消去されます。ただし、保存され
ているパスワードが内部的に利用されると、保存期間が延長されます(20 分に戻
ります)。
@end ifset
@ifset us
With this configuration, any passwords including POP and PGP are
cached. While a password is cached, you can omit to input the password.
The cached password will expire after a certain period (20 minutes by
default). However, its timer is cleared (reset to 20 minutes) if the
password is used internally.
@end ifset

@ifset jp
パスワードは Emacs (メモリ)の中に生のまま保存されています。そこで、パス
ワードの保存機能を使う場合は、他の人に自分が起動した Emacs を触られない
ように気をつけて下さい。もし席を空け、Emacs をよく知っている他の人に 
Emacs を操作された場合、パスワードを盗み取られる可能性があります。
@end ifset
@ifset us
The password is stored in Emacs with RAW format, which means it will be
available to anyone who uses your Emacs during the session. If you leave
your workstation and an Emacs expert happens to check your
configuration, your passwords could be stolen.
@end ifset

@c %%%%%%%%%%%%%%%%%

@node start, Viewing, password, Top
@ifset jp
@section 起動
@end ifset
@ifset us
@section Starting
@end ifset
@vindex mew-auto-get
@vindex mew-proto
@vindex mew-mailbox-type
@vindex mail-user-agent
@kindex M-x mew
@kindex C-uM-x mew
@kindex M-x mew-send
@kindex C-xm

@ifset jp
Mew を起動するには、以下の方法があります。
@end ifset
@ifset us
To start Mew, you can choose one of the following:
@end ifset

@table @samp
@ifset jp
@item M-x mew
Mew が起動していなければ、まず Mew を起動する。そして、メッセージを取得
するか、あるいは単にデフォルトのフォルダへ移動する。

まず、「修飾子」は @samp{mew-proto} と入力ケースから決定される。
(@xref{config} を参照)

「修飾子」が @samp{+}(ローカル・フォルダ)なら、@samp{mew-mailbox-type} 
からメールボックスが決定される。(@xref{retrieving} を参照) その他、すな
わちリモート・フォルダなら、メッセージを取得するためのプロトコルが修飾子
に応じて決る。

@samp{mew-auto-get} が @samp{t} なら、到着したメッセージが非同期に取得さ
れ、Summary モードへ一覧表示される。

@samp{mew-auto-get} が @samp{nil} なら、修飾子によって決定したデフォルト
のフォルダへ単に移動する。
@item C-uM-x mew
@samp{mew-auto-get} の値を逆だと考えて、@samp{M-x mew} を実行する。
@item C-xm
@samp{mail-user-agent} が設定されている場合、Draft モードへ移行する。
@end ifset
@ifset us
@item M-x mew
Execute Mew first unless Mew is running. And retrieve arrived
messages or just visit to the default folder.

@samp{proto} is determined by @samp{mew-proto} and the receiving case
(see @xref{config}).

If @samp{proto} is @samp{+} (ie a local folder), a mailbox is determined
according to @samp{mew-mailbox-type} (see @xref{retrieving}). 
Otherwise (ie a remote folder), an appropriate protocol to retrieve
messages is chosen according to @samp{proto}.

If @samp{mew-auto-get} is @samp{t}, arrived messages are asynchronously fetched
and listed up in Summary mode.

@samp{mew-auto-get} is @samp{nil}, just visit to the folder determined by
@samp{proto}.
@item C-uM-x mew
Perform @samp{M-x mew} with @samp{mew-auto-get} reversed.
@item M-x mew-send
Enter Draft mode for message composing.
@item C-xm
Enter Draft mode for message composing if @samp{mail-user-agent} is
configured.
@end ifset
@end table

@ifset jp
テキスト Emacs で Mew を起動した際には、Mew を型どった「/\\ - \\/」とい
う図形がくるくると回るデモが始まります。グラフィカル Emacs では、可愛い2
匹の子猫がオープニングを飾ります。
@end ifset
@ifset us
When Mew is executed on Text Emacs, the design "/\\ - \\/", which stands
for Mew, spins. In Graphical Emacs, two cute cats appear on the cover
page.
@end ifset

@ifset jp
なお、Mew を終了する方法は、@xref{Quit}を参照して下さい。
@end ifset
@ifset us
For the methods of quitting Mew, please refer to @xref{Quit}.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Viewing
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Viewing, singlepart, start, Top
@ifset jp
@chapter メッセージを表示する
@end ifset
@ifset us
@chapter Viewing messages
@end ifset
@kindex M-x mew

@ifset jp
(Mew が起動中でも、起動中ではなくても) @samp{M-x mew} と入力すると、Mew 
はメッセージを以下のように一覧表示します。
@end ifset
@ifset us
If you input @samp{M-x mew} (regardless Mew is running or not), Mew
displays a list of message like this:
@end ifset

@example
@ifset jp
* 03/12 Hidenori Ohta  今週末                    |日曜にストーンマジック
 M03/14 ももちゃん     能登の写真                |この前撮った写真を添付
  03/15 Neat Sumikawa  Re: ワイン                |じゃぁ、水曜日に例の店
@end ifset
@ifset us
* 03/12 Hidenori Ohta  This weekend              |Let's go to StoneMagic
 M03/14 Momo-chan      The pictures of Noto      |Attached are the pictu
  03/15 Neat Sumikawa  Re: wine                  |OK. I vote for Wednesd
@end ifset
@end example

@ifset jp
これを Summary モードといいます。ここでは、主に Summary モードでのメッセー
ジの読み方について説明します。
@end ifset
@ifset us
This is called Summary mode. This section mainly explains how to read
messages in Summary mode.
@end ifset

@ifset jp
上記の例のように Summary モードは、マーク、データ型(Mew が付けるマーク)、
日付、差出人、Subject:、本文から構成されています。
@end ifset
@ifset us
As you can see the example above, the format of Summary mode consists of
a mark, data type(a mark by Mew), date, a sender, Subject:, a body.
@end ifset

@ifset jp
Summary モードを消去する方法については、@xref{Quit}を参照して下さい。
@end ifset
@ifset us
For the method of terminating Summary mode, please see @xref{Quit}.
@end ifset

@menu
@ifset jp
* singlepart::                  読み方の基礎
* multipart::                   MIME を表示する
* analysis::                    MIME の解析を制御する
* pgp-viewing::                 PGP/MIME を表示する
* retrieving::                  メッセージの取得
* moving::                      フォルダの移動
* sum-write::                   送信、返答、転送
* features::                    便利な機能
* status-update::               状態の更新
* thread::                      スレッド
* sorting::                     メッセージのソート
* invalid::                     規格違反のメッセージ
@end ifset
@ifset us
* singlepart::                  Reading Basis
* multipart::                   Displaying MIME
* analysis::                    Controlling MIME analysis
* pgp-viewing::                 Visualizing PGP/MIME
* retrieving::                  Getting messages
* moving::                      Moving to another folder
* sum-write::                   Write, answer, and forward
* features::                    Useful features
* status-update::               Updating status
* thread::                      Thread
* sorting::                     Sorting messages
* invalid::                     Invalid messages
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node singlepart, multipart, Viewing, Viewing
@ifset jp
@section 読み方の基礎
@end ifset
@ifset us
@section Reading Basis
@end ifset
@kindex SPC (Summary)
@kindex C-uSPC (Summary)
@kindex DEL (Summary)
@kindex RET (Summary)
@kindex M-RET (Summary)
@kindex - (Summary)
@kindex C-n (Summary)
@kindex C-p (Summary)
@kindex n (Summary)
@kindex p (Summary)
@kindex C-un (Summary)
@kindex C-up (Summary)
@kindex j (Summary)

@ifset jp
メッセージを上から順に読んでいくのであれば、@samp{SPC} を適宜押すだけで
す。簡単でしょ？
@end ifset
@ifset us
To read messages in the order of their arrival, type @samp{SPC} to
display them. That's it. It's easy, isn't it?
@end ifset

@ifset jp
しかしそれだけではあんまりなので、以下にページを操作する基本的なコマンド
を示します。
@end ifset
@ifset us
Yet this might not be comprehensive, so the basic commands for page
processing are listed as follows:
@end ifset

@table @samp
@ifset jp
@item SPC
メッセージを読み進める。つまり、メッセージを表示し、スクロールさせ、他の
メッセージに移動して表示する。カーソルが移動する方向は、
@xref{summary-mode} を参照のこと。
@item C-uSPC
メッセージを先頭から再表示。
@item DEL
現在のメッセージを下にスクロールさせる。不必要なヘッダフィールドは、ウイ
ンドウの上に隠れている。よって、@samp{DEL} を入力すると、それらが現れる。
@item RET
現在のメッセージを1行上にスクロールする。
@item M-RET
@item -
現在のメッセージを1行下にスクロールする。
@end ifset
@ifset us
@item SPC
Read through messages. That is, display a message, scroll it, and
move-then-display another message. Refer to @xref{summary-mode} to know
which direction the cursor moves.
@item C-uSPC
Redisplay the message from its header.
@item DEL
Back-scroll this message. Unnecessary header fields are hidden over the
window. Type @samp{DEL} to see them when a message is displayed.
@item RET
Make this message scroll up one line.
@item M-RET
@item -
Make this message scroll down one line.
@end ifset
@end table

@table @samp
@ifset jp
@item C-n
下の行へ移動。
@item C-p
上の行へ移動。
@item n
下方向に移動し表示。対象となるのは、パート、@samp{*} マークの付いたメッ
セージ、マークの付いていないメッセージ。
@item C-un
下方向に移動し表示。対象となるのは、@samp{*} マークの付いたメッセージ、
マークの付いていないメッセージ。
@item p
上方向に移動し表示。対象となるのは、パート、@samp{*} マークの付いたメッ
セージ、マークの付いていないメッセージ。
@item C-up
上方向に移動し表示。対象となるのは、@samp{*} マークの付いたメッセージ、
マークの付いていないメッセージ。
@item j
入力された行番号に従ってその行へ移動。
@end ifset
@ifset us
@item C-n
Go to the next line.
@item C-p
Go to the previous line.
@item n
Move down then display. Targets include parts, messages marked with
@samp{*}, and non-marked messages.
@item C-un
Move down then display. Targets include messages marked with @samp{*},
and non-marked messages.
@item p
Move up then display. Targets include parts, messages marked with
@samp{*}, and non-marked messages.
@item C-up
Move up then display. Targets include messages marked with @samp{*}, and
non-marked messages.
@item j
Jump to a line according to the line number which you input.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node multipart, analysis, singlepart, Viewing
@ifset jp
@section MIME を表示する
@end ifset
@ifset us
@section Displaying MIME
@end ifset
@vindex mew-end-of-message-string
@vindex mew-end-of-part-string

@ifset jp
マルチパートを読むのは別に大変なことではありません。今まで通り、
@samp{SPC} を押していけばよいだけです。
@end ifset
@ifset us
It's not difficult to read a multipart message. As usual, just type
@samp{SPC}.
@end ifset

@ifset jp
マルチパートのメッセージは、以下のように日付の左に @samp{M} というマーク
が付いています。
@end ifset
@ifset us
A multipart message is marked with @samp{M} on the left side of date as
follows:
@end ifset

@example
@ifset jp
* 03/12 Hidenori Ohta  今週末                    |日曜にストーンマジック
 M03/14 ももちゃん     能登の写真                |この前撮った写真を添付
  03/15 Neat Sumikawa  Re: ワイン                |じゃぁ、水曜日に例の店
@end ifset
@ifset us
* 03/12 Hidenori Ohta  This weekend              |Let's go to StoneMagic
 M03/14 Momo-chan      The pictures of Noto      |Attached are the pictu
  03/15 Neat Sumikawa  Re: wine                  |OK. I vote for Wednesd
@end ifset
@end example

@ifset jp
@samp{M} マークの付いたメッセージで @samp{SPC} を押すと、ヘッダを 
Message モードに表示すると共に、以下のように Summary モードでマルチパー
トの構造を簡素に表示します。
@end ifset
@ifset us
When you type @samp{SPC} on the message marked with @samp{M}, its header
is displayed in Message mode. Then its multipart structure is displayed
in Summary mode as follows:
@end ifset

@example
@ifset jp
* 03/12 Hidenori Ohta  今週末                    |日曜にストーンマジック
 M03/14 ももちゃん     能登の写真                |この前撮った写真を添付
B    2  Image/Jpeg                   写真1                    noto1.jpg
Q    3  Application/Postscript       能登の地図               map.ps
  03/15 Neat Sumikawa  Re: ワイン                |じゃぁ、水曜日に例の店
@end ifset
@ifset us
* 03/12 Hidenori Ohta  This weekend              |Let's go to StoneMagic
 M03/14 Momo-chan      The pictures of Noto      |Attached are the pictu
B    2  Image/Jpeg                   picture 1                noto1.jpg
Q    3  Application/Postscript       Note map                 map.ps
  03/15 Neat Sumikawa  Re: wine                  |OK. I vote for Wednesd
@end ifset
@end example

@ifset jp
もし、パート 1 が Text/ なら、Summary モードにはパート 1 は可視化されず、
そのかわりパート 1 がヘッダと共に Message モードに表示されます。
@end ifset
@ifset us
If the first part is Text/, the first part is not displayed in Summary
mode but the first part is displayed with its header in Message mode.
@end ifset

@ifset jp
マルチパートの各行は

@itemize @minus
@item
マーク (Content-Transfer-Encoding:)
@item
パート番号
@item
データ型 (Content-Type:)
@item
説明 (Content-Description:)
@item
ファイル名 (Content-Disposition:)
@end itemize

から構成されています。Content-Description: はパートに対する Subject: と
考えていいでしょう。この表示は Draft モードの添付領域とほとんど同じです。
@end ifset
@ifset us
Each line of multipart consists of 

@itemize @minus
@item
marks (Content-Transfer-Encoding:)
@item
part number
@item
data type (Content-Type:)
@item
description (Content-Description:)
@item
file name (Content-Disposition:).
@end itemize

Content-Description can be considered Subject: for each part. This
format is very similar to that of the attachment region in Draft mode.
@end ifset

@ifset jp
@samp{SPC} や @samp{n} でパート 2 へ進めば、そのパートがデータ型に応じて
表示されます。たとえば、Text/Plain なら Message モードで、PostScript な
ら "ghostview" で表示されます。
@end ifset
@ifset us
If you type @samp{SPC} or @samp{n}, the cursor moves onto part 2 and the
content is displayed according to its data type. For instance,
Text/Plain is showed in Message mode and PostScript is visualized with
"ghostview".
@end ifset

@ifset jp
@samp{n} や @samp{p} は、パート部分まで含んだ行を移動することに注意して
下さい。パート部分を飛ばして下のメッセージを表示するには @samp{C-un} と
入力して下さい。また、パート部分を飛ばして 1 つ上のメッセージを表示する
には @samp{C-up} と入力して下さい。
@end ifset
@ifset us
Please note that @samp{n} and @samp{p} move lines including multipart.
To display the message below skipping multipart, type @samp{C-un}.
Likewise, to display the message above (not this message), input
@samp{C-up}.
@end ifset

@ifset jp
Mew は、MIME を再帰的に処理します。以下は転送されたマルチパートのメッセー
ジの例です。
@end ifset
@ifset us
Mew processes MIME recursively. The following example is a forwarded
multipart message.
@end ifset

@example
@ifset jp
 M03/15 かずくん       Fw: 能登の写真            |写真が送られてきたので
     2  Message/Rfc822               能登の写真
B    2.2  Image/Jpeg                   写真1                  noto1.jpg
Q    2.3  Application/Postscript       能登の地図             map.ps
@end ifset
@ifset us
 M03/15 Kazu yamamoto  Fw: The pictures of Noto  |Attached are the pictu
     2  Message/Rfc822               The pictures of Noto
B    2.2  Image/Jpeg                   picture 1              noto1.jpg
Q    2.3  Application/Postscript       Note map               map.ps
@end ifset
@end example

@ifset jp
(メモ) テキスト以外のデータを、シングルパートとしてメッセージに格納する
のは、書式としては間違いではありませんが、お勧めできません。マルチパート
を作成し、そのパート 1 に説明のテキストを、パート 2 にテキスト以外のデー
タを入れる作法をお勧めします。
@end ifset
@ifset us
Note: We strongly recommend that you not embed any object other than
text as a top level single part to a message directly. Instead, it is
better to make a multipart message whose part 1 is a textual description
of part 2 and part 2 is a non-text object.
@end ifset

@ifset jp
テキスト以外のデータが本文に直接格納されているメッセージに対し、Mew はこ
れをあたかもマルチパートのように表示します。
@end ifset
@ifset us
A message which contains a single part other than text is displayed as
multipart.
@end ifset

@ifset jp
このように MIME の構造は複雑になりうるので、解析するのには時間がかかる場
合があります。しかし、Mew は次に読まれるメッセージを予想し、ユーザが現在
のメッセージを読んでいる間に、次のメッセージをあらかじめ解析しておくこと
で高速性を実現しています。解析されたメッセージは、しばらくの間保存されま
す。
@end ifset
@ifset us
Since the syntax of MIME messages can be complex, it sometime takes a
bit of time to analyze the syntax. However, Mew guesses the message to
be read next and analyzes it beforehand while the user is reading the
current message. Analyzed messages are temporarily cached.
@end ifset

@ifset jp
メッセージの終りの部分がはっきりと分かるように、Mew はメッセージの最後に 
"[End of message]" という文字列を表示します。また、パートの終りでは、
"[Message is continued]" という文字列を表示します。これらの文字列はそれ
ぞれ、@samp{mew-end-of-message-string} と @samp{mew-end-of-part-string}
で指定できます。
@end ifset
@ifset us
To make it clear where the message ends, Mew displays the string "[End
of message]" in the end of the message. At the end of each part, Mew
displays the string "[Message is continued]". These strings are
customized by @samp{mew-end-of-message-string} and
@samp{mew-end-of-part-string}, respectively.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node analysis, pgp-viewing, multipart, Viewing
@ifset jp
@section MIME の解析を制御する
@end ifset
@ifset us
@section Controlling MIME analysis
@end ifset
@kindex . (Summary)
@kindex C-u. (Summary)
@kindex , (Summary)
@kindex C-cTAB (Summary)
@kindex : (Summary)
@kindex C-u: (Summary)

@ifset jp
メッセージの解析を制御するために、以下の変数が用意されています。
@end ifset
@ifset us
There are several variables for controlling message analysis.
@end ifset

@vtable @samp
@ifset jp
@item mew-file-max-size
解析するメッセージの大きさの上限。メッセージの大きさがこの値以下なら、解
析し表示する。越えているなら、解析せずに生のまま表示する。初期値は 
100000 バイト。
@item mew-header-max-length
解析するメッセージのヘッダ長の上限。ヘッダの行数がこの値以下なら、メッセー
ジを解析して表示する。越えているなら、解析を途中で止めてメッセージを壊れ
た形で表示する。初期値は 100 行。
@item mew-decode-broken
規格違反のメッセージを解析する際に、寛容になるか否か。@samp{t} なら寛容
に、@samp{nil} なら厳密に解析する。寛容に解析する際に規格違反があった場
合は、X-Mew: フィールドに表示する。初期値は @samp{t}。
@item mew-use-text-body
本文のテキストをヘッダと同時に表示するか否か。@samp{t} なら、本文がシン
グルのテキスト、および、本文がマルチパートで最初のパートがテキストの場合、
そのテキストをヘッダと同時に表示する。@samp{nil}の場合は、マルチパート内
のパートのように表示する。初期値は @samp{t}。
@item mew-use-alternative
Multipart/Alternative の取り扱い。@samp{t} なら、
@samp{mew-mime-multipart-alternative-list}の優先順位に従って、1 つのパー
トを表示する。@samp{nil} なら、通常のマルチパートとして表示する。デフォ
ルトは @samp{t}。
@item mew-use-text/html
Text/Html の取扱い。@samp{nil}の場合は HTML を解析せずに表示。それ以外
なら HTML を解析して表示。初期値は @samp{nil}。
@end ifset
@ifset us
@item mew-file-max-size
The size limit of messages to be analyzed. If the size of a message is
less than or equal to this value, it is analyzed and displayed.
Otherwise, the raw message is displayed without analysis.  The default
value is 10000 bytes.
@item mew-header-max-length
The length limit of header to be analyzed. If the length of a header is
less than or equal to this value, it is analyzed and displayed.
Otherwise, the message is displayed as fragmentarily since the analysis
is stopped. The default value is 100 lines.
@item mew-decode-broken
Whether Mew be liberal or conservative to invalid messages. If the value
is @samp{t}, the setting is liberal. If the value is @samp{nil}, the
setting is for conservative. If conservative and invalid portions are
found, they are reported in the X-Mew: field. The default value is
@samp{t}.
@item mew-use-text-body
Whether or not the text part of a body is displayed with its header. If
the value is @samp{t}, both the body which is a single part text and the
first text part in a multipart body are displayed with its header. If
the value is @samp{nil}, they are displayed as a single part in a
multipart. The default value is @samp{t}.
@item mew-use-alternative
How to treat Multipart/Alternative. If the value is @samp{t}, one part
is displayed according to the preference defined in
@samp{mew-mime-multipart-alternative-list}. If the value is @samp{nil},
it is displayed as a multipart. The default value is @samp{t}.
@item mew-use-text/html
How to treat Text/Html. If @samp{nil}, HTML is displayed as is
(without parsing). Otherwise, HTML is parsed and displayed. The
default value is @samp{t}.
@end ifset
@end vtable

@ifset jp
これらの変数に関する基本的なコマンドは、@samp{.}です。このコマンドは、
以下のように動きます。
@end ifset
@ifset us
The basic command relating to the variables above is @samp{.}. The
command acts as follows:
@end ifset

@ifset jp
1) このコマンドがメッセージ上で実行されると、そのメッセージのキャッシュ
が削除され、メッセージが解析されて再表示されます。
@end ifset
@ifset us
1) If this command executed on a message, the cache of the
message is removed and the message is analyzed then displayed.
@end ifset

@ifset jp
1a) もし現在のメッセージの大きさが @samp{mew-file-max-size} を越えてい
るなら、MIME は解析されず、そのまま表示されています。この場合、このコマ
ンドはこの上限に関わらずに現在のメッセージを解析し、再表示します。
@end ifset
@ifset us
1a) If the size of the current message exceeds
@samp{mew-file-max-size}, MIME analysis is skipped then the beginning
of the raw message is displayed. In this situation, this command
analyzes the current message without the limitation then displays it.
@end ifset

@ifset jp
1b) もし現在のメッセージのヘッダ長が @samp{mew-header-max-length} を越
えているなら、メッセージが壊れたように表示されています。この場合、この
コマンドはこの上限に関わらずに現在のメッセージを解析し、再表示します。
@end ifset
@ifset us
1b) If the length of a header exceeds @samp{mew-header-max-length}, a
broken message is displayed. In this situation, this command
analyzes the current message without the limitation then displays
it.
@end ifset

@ifset jp
1c) もし現在のメッセージが @samp{:} で表示されているなら、マルチパート
の構造は、通常とは違うように表示されています。この場合、このコマンドは
マルチパートの構造を通常と同じように再表示します。
@end ifset
@ifset us
1c) If the current message is displayed by @samp{:}, the multipart
structure is displayed different from the normal display. In this
situation, this command gets the multipart structure back to the
normal display.
@end ifset

@ifset jp
1d) もし @samp{mew-use-text/html} が nil なら、HTML は解析されず、その
まま表示されています。この場合、このコマンドは HTML を解析し、再表示し
ます。
@end ifset
@ifset us
1d) If @samp{mew-use-text/html} is nil, its HTML body is displayed as
is. In this situation, this command analyzes the HTML body and
displays it.
@end ifset

@ifset jp
2) もしこのコマンドがパート上で実行された場合、そのパートが再表示されま
す。
@end ifset
@ifset us
2) If this command is called on a part, the part is displayed again.
@end ifset

@ifset jp
2a) もし @samp{mew-use-text/html} が nil なら、HTML は解析されず、その
まま表示されています。この場合、このコマンドは HTML を解析し、再表示し
ます。
@end ifset
@ifset us
2a) If 'mew-use-text/html' is nil, its HTML part is displayed as
is. In this situation, this command analyzes the HTML part and
displays it.
@end ifset

@ifset jp
@samp{.} 以外にも、以下のような便利なコマンドがあります。
@end ifset
@ifset us
In addition to @samp{.}, the following commands are prepared:
@end ifset

@table @samp
@ifset jp
@item .
メッセージを解析し、再表示する。
@item C-u.
@samp{mew-decode-broken} を逆にしてメッセージを解析し直す。
@xref{invalid} を参照のこと。
@item :
@samp{mew-use-alternative} と @samp{mew-use-text-body} を反転させた
@samp{.}.
@item C-u:
@samp{mew-use-alternative} と @samp{mew-use-text-body} を反転させた
@samp{C-u.}.
@item ,
現在のメッセージやパートを生の書式で Message モードに表示する。
@item C-cTAB
メッセージ全体をファイルとして read only で開く。
@item C-uC-cTAB
メッセージ全体をファイルとして開く。
@end ifset
@ifset us
@item .
Analyze the message and re-display it.
@item C-u. 
Analyze the message with @samp{mew-decode-broken} reversed (see
@xref{invalid}).
@item :
The same as @samp{.} with @samp{mew-use-alternative} and
@samp{mew-use-text-body} reversed.
@item C-u:
The same as @samp{C-u.} with @samp{mew-use-alternative} and
@samp{mew-use-text-body} reversed.
@item ,
Insert a message or a part into Message mode in raw format.
@item C-cTAB
Open an entire message as a file in read-only mode.
@item C-uC-cTAB
Open an entire message as a file.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node pgp-viewing, retrieving, analysis, Viewing
@ifset jp
@section PGP/MIME を表示する
@end ifset
@ifset us
@section Visualizing PGP/MIME
@end ifset
@vindex mew-x-pgp-key-list
@vindex mew-prog-pgp
@vindex mew-prog-pgp2
@vindex mew-prog-pgp5
@vindex mew-prog-gpg
@kindex C-cC-f (Summary)
@kindex C-uC-cC-f (Summary)
@kindex C-cC-v (Summary)
@kindex C-cC-z (Summary)

@ifset jp
今までと同様 @samp{SPC} などを利用することで、Mew では PGP で暗号化や電
子署名を施されたメッセージを簡単に表示できます。まず、簡単な例から紹介し
ましょう。
@end ifset
@ifset us
Basic commands such as @samp{SPC} visualize messages signed or encrypted
with PGP as well. Let's start with a simple example:
@end ifset

@example
@ifset jp
 S03/18 神田パソコン館 見積書                    |先日承りましたノートPC
 E03/21 匿名希望       秘密のメール              |
@end ifset
@ifset us
 S03/18 Kanda PC shop  A written estimate        |Here is a written esti
 E03/21 Anonymous      Secret message            |
@end ifset
@end example

@ifset jp
上記のメッセージには、それぞれ @samp{S} マークと @samp{E} マークが付いて
います。これはそれぞれ、本文全体が署名されている、および、暗号化されてい
ることを意味します。
@end ifset
@ifset us
Messages above are marked with @samp{S} and @samp{E}, respectively. This
means that the body of the first message is signed and that of the
second message is encrypted.
@end ifset

@ifset jp
PGP/MIME では、一部のパートに電子署名を施したり、暗号化したりできます。
この場合このようなマークは付きません。@samp{S} マークや @samp{E} マーク
が付くのは、本文全体が対象になっている場合です。
@end ifset
@ifset us
PGP/MIME also allows to sign and/or encrypt some parts of a message. In
this case, these marks do not appear. The @samp{S} or @samp{E} mark
appears only when the entire body of the message is signed or encrypted.
@end ifset

@ifset jp
また、単に署名や暗号化といいましたが、これは最終的な処理が署名や暗号化で
あったことを意味しています。やや複雑な話になりますが、もしかすると前者は
本文全体を暗号化した後、署名したのかもしれませんし、後者は一部のパートに
署名し、さらに全体を暗号化している可能性もあります。
@end ifset
@ifset us
The terms "sign" and "encrypt" used above mean the last procedure
applied the body is "sign" and "encryption", respectively. The above
examples may have been produced with more complex processes.  For
instance, in the case of the former message, the body may have been
signed after encrypting the body.  It is likely that some part of the
latter message was first signed then the body was encrypted.
@end ifset

@ifset jp
本文全体、あるいは、一部のパートが暗号化されている場合、Mew はパスフレー
ズを訊いてきます。パスフレーズを入力する際の注意事項については、
@xref{start} を参照して下さい。入力されたパスフレーズは、あなたの秘密鍵
を復号化するのに使われます。そして、復号化された秘密鍵によって、暗号化さ
れているメッセージを解くわけです。
@end ifset
@ifset us
If some parts or the entire body is encrypted, Mew asks you to input
your pass-phrase to get plain text. Please refer to @xref{start} to know
what you should pay attention when inputting pass-phrase. The pass-phrase
is used to decrypt your secret key. The secret key is then used to
decrypt cipher text.
@end ifset

@ifset jp
ある PGP/MIME メッセージを表示するには、暗号化された数だけパスフレーズを
入力する必要があります。これは Mew が安全を期して、通常パスフレーズを保
存しないからです。もしこれがわずらわしいなら、以下の設定で Mew にパスフ
レーズをしばらくの間保存させることも可能です。パスフレーズを保存する際の
注意事項については、@xref{password}を参照して下さい。
@end ifset
@ifset us
To visualize PGP/MIME, you need to input your pass-phrase every time you
encounter cipher text.  This is because Mew does not cache pass-phrases
anywhere for security reasons. If you feel this is inconvenient, set the
following configuration so that your pass-phrases are temporarily
cached.  Please refer to @xref{password} to know what you should learn
how to use this feature properly.
@end ifset

@lisp
(setq mew-use-cached-passwd t)
@end lisp

@ifset jp
パスフレーズを保存しない通常の設定でも、一旦復号化されたメッセージはしば
らく保存されるので、2回目の表示にはパスフレーズを訊かれないかもしれませ
ん。
@end ifset
@ifset us
Since decrypted messages are cached for a while, you may not be asked
for your pass-phrase at the next time you display the message, even if
you are not using the pass-phrase cache.
@end ifset

@ifset jp
一方、通信相手の署名を検証するためには相手の公開鍵が利用できればよいので、
パスフレーズを訊かれることはありません。
@end ifset
@ifset us
To verify signatures, senders' public keys are used. Hence you are not
asked to type your pass-phrase.
@end ifset

@ifset jp
Mew は自動的に電子署名を検証したり、入力されたパスフレーズを使って暗号メッ
セージを復号化したりして、元のメッセージを表示します。そこで、ユーザが署
名の存在に気づかないかもしれませんし、どの部分が暗号化されていたのか分か
らないかもしれません。
@end ifset
@ifset us
Since Mew automatically verifies signatures and/or decrypts cipher text
with inputted pass-phrase, it is likely that users do not notice that
the original message has signatures and/or which parts were encrypted.
@end ifset

@ifset jp
そこで、検証の結果やどの部分が暗号化されていかをユーザに通知するために、
Mew は以下のようにヘッダに X-Mew: フィールドを挿入します。
@end ifset
@ifset us
To inform users the results of verification of signatures or which parts
were decrypted, Mew inserts the X-Mew: field in the header as follows:
@end ifset

@example
X-Mew: <body> PGP decrypted.
       Good PGP sign "kazu@@mew.org" COMPLETE
@end example

@ifset jp
"<>" 内の番号は、どのパートの結果であるかを示しています。"body" は、メッ
セージの本文全体が保護されていることを意味します。この例では、メッセージ
全体が kazu によって署名され、受信者のために暗号化されています。Mew はま
ずこれを復号化し、そして署名を検証しています。署名は正しいので、
kazu@@mew.org という ID の付いた秘密鍵で署名されたときから、内容は変更さ
れていないと分かります。この署名の検証に使われた公開鍵の「有効性」は 
"complete" です。よって、受信者はこの公開鍵が ID が示すユーザに属してい
ると信頼していることになります。つまり、このメッセージは信頼をおいている
公開鍵によって検証され結果が正しいので、改竄されていないということになり
ます。
@end ifset
@ifset us
The number enclosed by "<>" indicates which part was protected with
PGP. "body" means the body was protected. This example tells us that the
body was singed by kazu then encrypted for the reader. Mew first
decrypted the message and then verified its signature of the decrypted
message. The fact that the signature is valid indicates that no one has
modified the content of the message since it was signed by the secret
key whose ID is kazu@@mew.org. The validity of the public key used to
verify the signature is "complete". Thus, the receiver can be sure that
the public key actually belongs to the user indicated by the ID. That
is, this message was verified by a reliable public key AND its results
were correct, so no alternation was found.
@end ifset

@ifset jp
以下の例では、まずマルチパートである本文全体の電子署名が検証され、その後
パート 2 のメッセージ全体が復号化されています。つまり、作成時には、まず
パート 2 が暗号化され、そして本文全体が署名されたことが分かります。
@end ifset
@ifset us
In the following example, the signature of the body(multipart), is first
verified, then part 2(a message), is decrypted. That is, the composing
process was that part 2 is first encrypted then the entire body is
signed.
@end ifset

@example
X-Mew: <body multi> Good PGP sign "kazu@@mew.org" COMPLETE
X-Mew: <2 message> PGP decrypted.
@end example

@ifset jp
するどい人なら、悪い人があらかじめ X-Mew: フィールドを挿入しておき、あなた
をだますかもしれないと思うかもしれません。でも大丈夫です。Mew は、ヘッダに
ある X-Mew: をあらかじめ削り、本物の X-Mew: フィールドを挿入しますから。
@end ifset
@ifset us
Intelligent users may wonder what happens in the case where a devious
person sends a message that contains an invalid X-Mew: field. This is
not a problem. First Mew carefully removes the X-Mew: field, and then
inserts a valid X-Mew: field into the header.
@end ifset

@ifset jp
X-Mew: フィールドは他にもさまざまな結果を伝えてくれます。たとえば、署名
を検証するための公開鍵がないとか、復号化に失敗したなどです。以下の例は、
鍵 ID が 0x1B8BF431 である公開鍵がないことを示しています。
@end ifset
@ifset us
X-Mew: informs the user of various other types of results. For example,
the lack of availability of a public key, decryption failures, etc. The
following example indicates the absence of a public key whose key ID is
0x1B8BF431.
@end ifset

@example
X-Mew: <body multi> No his/her public key. ID = 0x1B8BF431
@end example

@ifset jp
この場合、@samp{C-cC-f} と入力すると、Mew は 
@samp{mew-pgp-keyserver-url-template} で指定された URL を使ってこの公開
鍵の入手を試みます。もし、X-Mew: フィールドがない場合は、@samp{C-cC-f} 
は From: を ID と考えます。また、@samp{C-uC-cC-f} は、X-Mew: フィールド
に加えて @samp{mew-x-pgp-key-list} に指定されたフィールドも鍵 ID を切り
出す対象とし、公開鍵の入手を試みます。
@end ifset
@ifset us
In this case, if you type @samp{C-cC-f}, Mew tries fetching this public
key using the URL specified in @samp{mew-pgp-keyserver-url-template}. If
the X-Mew: field does not exist, @samp{C-c C-f} takes the From: field as
ID. Also, @samp{C-uC-cC-f} extracts key IDs from fields specified in
@samp{mew-x-pgp-key-list} in addition to the X-Mew: field, and then
tries to fetch them.
@end ifset

@ifset jp
Mew では PGPv2、PGPv5、GNUPG に対応しています。これらは Summary モードに
おいて、@samp{C-cC-v} で切替え可能です。これら複数の PGP を使いたい人は
@samp{mew-prog-pgp2}、@samp{mew-prog-pgp5}、@samp{mew-prog-gpg} に対し、
それぞれ PGPv2、PGPv5、GNUPG のコマンド名を設定して下さい。また、Mew の
起動直後に利用する PGP のコマンド名を @samp{mew-prog-pgp} に設定して下さ
い。なおパスフレーズは、それぞれの PGP に対し独立に保存されます。
@end ifset
@ifset us
Mew supports PGPv2, PGPv5, and GNUPG. You can select one of these by
typing @samp{C-cC-v} in Summary mode. If you want to use those PGPs, you
should set the command name of PGPv2, PGPv5, and GNUPG to
@samp{mew-prog-pgp2}, @samp{mew-prog-pgp5}, and @samp{mew-prog-gpg},
respectively. Also, set the default PGP name to
@samp{mew-prog-pgp}. Note that pass-phrases are cached independently for
each PGP.
@end ifset

@ifset jp
なお昔ながらの PGP メッセージは、自動的に処理できません。このようなPGP
メッセージに対しては、@samp{C-cC-z} で復号化や署名の検証ができます。
@end ifset
@ifset us
Old fashioned PGP messages cannot be processed automatically. You can
decrypt and/or verify this kind messages with @samp{C-cC-z}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node retrieving, moving, pgp-viewing, Viewing
@ifset jp
@section メッセージの取得
@end ifset
@ifset us
@section Getting messages
@end ifset
@vindex mew-mailbox-type
@vindex mew-auto-flush-queue
@vindex mew-pop-delete
@vindex mew-imap-delete
@vindex mew-pop-header-only
@vindex mew-imap-header-only
@vindex mew-nntp-header-only
@kindex i (Summary)
@kindex I (Summary)
@kindex s (Summary)
@kindex C-us (Summary)
@kindex lc (Summary)

@ifset jp
メールボックスへ到着したメッセージを +inbox へコピーし一覧表示するには、
@samp{i} を使います。コピー元のメールボックスは @samp{mew-mailbox-type} 
によって決ります。(@samp{M-x mew} を実行した際に、@samp{mew-proto} が 
@samp{+} の場合も、@samp{mew-mailbox-type} に従ってメッセージがコピーさ
れます。) 以下に取りうる値を示します。
@end ifset
@ifset us
To copy arrived messages to your mailbox to +inbox and list up a list of
the messages, use @samp{i}. The mailbox is determined according to
@samp{mew-mailbox-type}. (When you type @samp{M-x mew} and if
@samp{mew-proto} is @samp{+}, messages are also copied according to
@samp{mew-mailbox-type}.  type @samp{i}. Here are summary of its values.
@end ifset

@table @samp
@ifset jp
@item 'mbox
ローカルのメールボックス。デフォルトでは "incm" という外部コマンドを使い、
メッセージを取得する。設定方法は、@xref{configuration} を参照のこと。
@item 'pop
POP サーバ。POP を POP らしく使う方法。(デフォルトの値)
@item 'imap
IMAP サーバ。IMAP らしくない利用方法なので、推奨されていない。
@end ifset
@ifset us
@item 'mbox
A local mailbox. "incm" is used to copy messages for the local mailbox
by default. To know how to configure it, see @xref{configuration}.
@item 'pop
A POP server. To use POP as it is. (This is a default value.)
@item 'imap
An IMAP server. This is not recommended.
@end ifset
@end table

@ifset jp
ローカル・フォルダでメッセージの一覧を再表示するには、@samp{s} を使いま
す。
@end ifset
@ifset us
To flush a list of messages in a local folder and display them again,
use @samp{s}.
@end ifset

@ifset jp
リモート・フォルダでメッセージを取得、あるいは再取得する場合にも 
@samp{s} を使います。IMAP やニュースでは、@samp{i} は利用せず、@samp{s} 
を使うのが一般的です。
@end ifset
@ifset us
To retrieve messages or flush-then-retrieve messages again in a remote
folder, type @samp{s}. It is recommended to use @samp{s}, not @samp{i},
for IMAP and NetNews.
@end ifset

@ifset jp
@samp{s} を使うと範囲を訊いてきます。Mew で重要な範囲の意味を以下に示し
ます。
@end ifset
@ifset us
If you use @samp{s}, it asks you a range.  Here are a summary of
important ranges for Mew.
@end ifset

@table @samp
@ifset jp
@item update
「Summary モードの最後のメッセージの次」から「フォルダ内の最後のメッセー
ジ」まで。つまり、Summary モードと実際のフォルダ内のメッセージの差分。
@item all
フォルダ内のメッセージすべて。ローカル・フォルダでは、Summary モードの表
示がおかしくなったときに、内容を一新するために用いる。リモート・フォルダ
では、すべてのメッセージの再取得。
@item sync
あるリモート・フォルダに対し、サーバ側では消えたメッセージのキャッシュを
削除する。リモート・フォルダに対してのみ有効。
@end ifset
@ifset us
@item update
From "the last message in the Summary mode + 1" to "the last message in
the corresponding folder". That is, the gap between the Summary mode and
the existing folder
@item all
All messages in the folder. When Summary mode in a local folder becomes
inconsistent, use this range to flush the list.  For a remote folder,
this range results in retrieval of all messages again.
@item sync
Deleting cache messages whose originals were removed in the server side.
Valid for remote folders only.
@end ifset
@end table

@ifset jp
+draft、+queue、+postq では、デフォルトの範囲は @samp{all} となっていま
す。それ以外のフォルダでは、デフォルトの範囲が @samp{update} となってい
ます。ですから、+draft、+queue、+postq 以外では、@samp{s} の後に 
@samp{RET} を押すだけで、現在のフォルダに対し最新の一覧を得られることに
なります。
@end ifset
@ifset us
The default range both for +draft, +queue, and +postq is @samp{all}. For
other folders, the default is @samp{update}. So, just type @samp{RET}
after @samp{s} to get the up-to-date list of the current folder except
+draft, +queue, and +postq.
@end ifset

@ifset jp
Mew ではあまり重要ではありませんが、以下の範囲も指定できます。
@end ifset
@ifset us
Although they are not especially important in Mew, you can specify the
following ranges:
@end ifset

@table @samp
@ifset jp
@item <num1>-<num2>
<num1> から <num2> まで。ローカル・フォルダに対してのみ有効。
@item <num1>-
<num1> から最後まで。ローカル・フォルダに対してのみ有効。
@item -<num2>
最初から <num2> まで。ローカル・フォルダに対してのみ有効。
@item last:<num>
最後の <num> 個。
@end ifset
@ifset us
@item <num1>-<num2>
From <num1> to <num2>. Valid for local folders only.
@item <num1>-
From <num1> to the last. Valid for local folders only.
@item -<num2>
From the first to <num2>. Valid for local folders only.
@item last:<num>
Last <num> messages.
@end ifset
@end table

@ifset jp
リモート・フォルダで @samp{s} を @samp{C-u} 付きで呼び出すと、「ヘッダの
みのコピー」と「ヘッダと本文の両方のコピー」を反転できます。これらの動作
は、POP、IMAP、NNTP に対し、それぞれ @samp{mew-pop-header-only}、
@samp{mew-imap-header-only}、@samp{mew-nntp-header-only} で定義でき、初
期値はすべて @samp{nil} です。つまり、初期値は「ヘッダと本文の両方のコ
ピー」になっています。
@end ifset
@ifset us
If you execute @samp{s} with @samp{C-u} on a remote folder, you can
toggle "copying a header only" and "copying both a header and a body".
This action can be defined by @samp{mew-pop-header-only},
@samp{mew-imap-header-only}, and @samp{mew-nntp-header-only} for POP,
IMAP, and NNTP, respectively. The default values of these are
@samp{nil}, that is, "copying both a header and a body".
@end ifset

@ifset jp
サイズが大きなメッセージは、全体ではなく一部が取得されているかもしれませ
ん。このようなメッセージには、@samp{T} マークがついています。このメッセー
ジの全体を取得するには、そのメッセージ上で @samp{I} と入力します。
@end ifset
@ifset us
Messages that are of large size may be truncated. This kind of message
is marked with @samp{T}. To retrieve the rest of this kind of message,
type @samp{I} on the message.
@end ifset

@ifset jp
たとえば、$inbox に @samp{T} マークのついたメッセージがあるとしましょう。
このメッセージの上で @samp{I} を押すと、メッセージの全体が取得できます。
ここで、これを +inbox へ移動させたくなるかもしれません。この場合 
@samp{lc} を利用して下さい。@samp{lc} は、リモート・フォルダにキャッシュ
されたメッセージから、そのリモート・フォルダに特有の情報をヘッダから取り
除き、ローカル・フォルダへコピーするコマンドです。
@end ifset
@ifset us
Suppose that there is a message marked with @samp{T} in $inbox. If you
type @samp{I} on it, you can retrieve the entire message. You may want
to move this message to +inbox. In this case, use @samp{lc}. @samp{lc}
is the command to copy a cached message in a remote folder to a local
folder removing information concerned with the remote folder.
@end ifset

@ifset jp
メッセージの取得に関するコマンドを以下にまとめます。
@end ifset
@ifset us
Here is a summary of the commands concerned with message retrieval:
@end ifset

@table @samp
@ifset jp
@item i
+inbox フォルダに移動し、到着したメッセージを取得して一覧を表示する。
@samp{mew-auto-flush-queue} が @samp{t} なら、+queue にあるメッセージを
送信する。詳しくは、@xref{send} を参照のこと。
@item C-ui
@samp{mew-auto-flush-queue} の値を逆だと思って、@samp{i} を実行する。
@item I
@samp{T} マークの付いている一部だけが取得されたメッセージの全体を取得す
る。

ローカル・フォルダで実行した場合、入力ケースと @samp{mew-mailbox-type} 
により取得方法が決る。@samp{mew-pop-delete} または 
@samp{mew-imap-delete} の値が @samp{t} なら、メールボックスのメッセージ
を削除する。

リモート・フォルダで実行した場合、ケースと取得方法はそのフォルダから決る。
サーバ側のメッセージは常に保存される。
@item C-uI
@samp{mew-pop-delete} または @samp{mew-imap-delete} を逆転させて@samp{I} 
を実行する。
@item s
フォルダの一覧を取る。
@item C-us
リモート・フォルダにおいて、「ヘッダのみのコピー」と「ヘッダと本文の両方
のコピー」を反転させて、一覧を取る。
@item lc
リモート・フォルダのメッセージをローカル・フォルダへコピーする。
@end ifset
@ifset us
@item i
Fetch arrived messages, store them to the +inbox folder and create a
list. If @samp{mew-auto-flush-queue} is @samp{t}, send messages in
+queue. Please refer to @xref{send} for more information.
@item C-ui
Perform @samp{i} with @samp{mew-auto-flush-queue} reversed.
@item I
Retrieve the rest of a truncated(@samp{T}) message. 

If you use this command in a local folder, a method to retrieve the
message is determined by the receiving case and @samp{mew-mailbox-type}.
If @samp{mew-pop-delete}/@samp{mew-imap-delete} is @samp{t}, delete the
message from the mailbox.

If you use this command in a remote folder, a case and protocol is
determined by the folder. The message in the server side is always
retained.
@item C-uI
Perform @samp{I} with @samp{mew-pop-delete} or @samp{mew-imap-delete}
reversed.
@item s
List up messages in Summary mode or flush them.
@item C-us
On a remote folder, list up messages in Summary mode by toggling
"copying a header only" and "copying both a header and a body".
@item lc
Copy a cached message in a remote folder to a local folder.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node moving, sum-write, retrieving, Viewing
@ifset jp
@section フォルダの移動
@end ifset
@ifset us
@section Moving to another folder
@end ifset
@kindex g (Summary)

@ifset jp
フォルダの移動には @samp{g} を入力して下さい。以下のようにフォルダ名を訊
かれます。
@end ifset
@ifset us
To go to another folder, type @samp{g}. Mew asks you to input a folder
name as follows:
@end ifset

@example
Folder name (+inbox): +
@end example

@ifset jp
":" の右側を編集可能領域と呼ぶことにしましょう。この例では、編集可能領域
に修飾子 "+" が表示されています。修飾子けて任意の文字列を入力し、
@samp{RET} を押せば、フォルダ名が決定されたことになり、そのフォルダへ移
動します。
@end ifset
@ifset us
Let's call the right side of ":" 'writable area'. In this example, proto
"+" is displayed in the writable area. Typing an appropriate string
following proto and typing @samp{RET} decides a folder name, then Mew
moves to the folder.
@end ifset

@ifset jp
フォルダを移動した際に Summary モードの一覧が古いと判断した場合は、自動
的に差分が追加表示されます。
@end ifset
@ifset us
When you move to a folder and if Mew finds its list of messages old, Mew
automatically displays the differences.
@end ifset

@ifset jp
"()" 内がデフォルトのフォルダです。単に @samp{RET} を押し "+" を入力する
と、デフォルトのフォルダを入力したものとして扱われます。
@end ifset
@ifset us
The string in "()" is a default. If you specifies "+" by simply typing
@samp{RET}, Mew considers that the default folder name is specified.
@end ifset

@ifset jp
補完を利用するには、@samp{TAB} や @samp{SPC} を押して下さい。
@end ifset
@ifset us
To make use of completion, type @samp{TAB} or @samp{SPC}.
@end ifset

@ifset jp
さて、話を @samp{g} を押した直後に戻しましょう。
@end ifset
@ifset us
Now, lets get back to the state just after typing @samp{g}.
@end ifset

@example
Folder name (+inbox): +
@end example

@ifset jp
たとえば、"+" を "%" に変更するには、通常なら "+" を削り、"%" を入力する
必要があります。これでは面倒なので、"+" の後で "%" を入力すると、"+" が 
"%" に置き換わるようになっています。このように、修飾子の直後で他の修飾子
を入力すれば、削る作業をせずに置き換え可能です。
@end ifset
@ifset us
If you want to change, for example, "+" to "%", you have to delete "+"
first then type "%" in normal situation. But this is inconvenient. So,
typing "%" just after "+" removes "+" automatically. Like this, typing
another proto just after a proto replaces the previous one without
deletion.
@end ifset

@ifset jp
リモート・フォルダを入力する場合、@xref{config} で説明するケースを指定し
たい場合もあるでしょう。ケースは、フォルダ名の前に ":" で区切って入力し
ます。たとえば、"home" というケースの "%inbox" に移動したいとしましょう。
このとき、"home:%inbox" と入力する必要があります。しかしこれは面倒なので、
任意の場所で @samp{C-cTAB} を押すと利用可能なケースが、フォルダ名の前に
循環的に補完されます。次の例を考えて下さい。
@end ifset
@ifset us
When you type a remote folder, you may want to specify a case (described
in @xref{config}). A case must be specified before a folder, separated
by ":". Consider moving "%inbox" for a case "home". In this case, you
should type "home:%inbox". Yes, this is inconvenient. So, typing
@samp{C-cTAB} in any position does circular completion for available
cases. Let's look at the following example.
@end ifset

@example
Folder name (+inbox): %inbox
@end example

@ifset jp
ここで @samp{C-cTAB} を入力すると、以下のようになります。
@end ifset
@ifset us
Typing @samp{C-cTAB} here results in the following:
@end ifset

@example
Folder name (+inbox): home:%inbox
@end example

@ifset jp
フォルダ名の一部を指定して、フォルダを検索したいこともあるでしょう。この
場合には、前方検索の @samp{C-s} か後方検索の @samp{C-r} が利用できます。
以下は、@samp{C-s} を押したときのミニバッファの状態です。
@end ifset
@ifset us
You may want to search a folder by specifying a substring of the folder.
For this purpose, @samp{C-s} and @samp{C-r} are available. The following
is the state of the minibuffer after typing @samp{C-s}.
@end ifset

@example
Folder name (+inbox): ()
@end example

@ifset jp
編集領域に現れた "()" が、検索モードに移行したことを表わしています。ここ
で文字を入力していくと、マッチした候補が "()" の中に表示されます。以下は 
"mew" で検索したときの例です。
@end ifset
@ifset us
"()" appeared in the writable area indicates you have switched to search
mode. While you are typing here, a matched candidate is shown in "()".
The following is the case where a search key is "mew".
@end ifset

@example
Folder name (+inbox): (+work/mew-release) mew
@end example

@ifset jp
候補を確定する際には、@samp{RET} を入力して下さい。そうすると検索モード
を抜けて、編集領域にこの候補が表示されます。
@end ifset
@ifset us
To select the matched candidate, type @samp{RET}. Then the search mode
is finished and the matched candidate is displayed in the writable area.
@end ifset

@example
Folder name (+inbox): +work/mew-release
@end example

@ifset jp
さらに @samp{RET} を押せば、このフォルダが入力されたことになります。
@end ifset
@ifset us
Typing @samp{RET} again means that you decide the folder.
@end ifset

@ifset jp
検索対象となるフォルダの一覧は、ケースと修飾子の組で決定されます。
@samp{C-s} や @samp{C-r} で検索モードに移るときに編集領域にある文字列か
ら、ケースと修飾子が切り出され、フォルダの一覧が決定される訳です。
@end ifset
@ifset us
A list of folders to be searched is decided by a combination of case and
proto. When you enter the search mode by typing @samp{C-s} or
@samp{C-r}, a pair of case and proto is extracted from the writable
area, and a list of folders is selected according to the pair.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node sum-write, features, moving, Viewing
@ifset jp
@section 送信、返答、転送
@end ifset
@ifset us
@section Write, answer, and forward
@end ifset
@kindex w (Summary)
@kindex C-uw (Summary)
@kindex W (Summary)
@kindex a (Summary)
@kindex A (Summary)
@kindex f (Summary)
@kindex F (Summary)
@kindex E (Summary)
@kindex M-e (Summary)

@ifset jp
メッセージの送信、返答、転送には、以下のコマンドを使います。
@end ifset
@ifset us
Please use the following commands for writing, replying, and forwarding
messages.
@end ifset

@table @samp
@ifset jp
@item w
メッセージを書く。新しい草稿が Draft モードに用意される。
@xref{Composing}を参照のこと。
@item C-uw
メッセージを書く。新しい草稿が Draft モードに用意される。現在のメッセー
ジの From: にあるアドレスが、草稿の To: へコピーされる。
@item W
あるメッセージのヘッダの一部だけを編集しメッセージを送信するために 
Header モードに入る。@xref{resend}を参照のこと。
@item a
現在のメッセージに返答する。Draft モードに草稿が用意され、To: や Cc: が
自動的に決定される。@xref{reply}を参照のこと。
@item C-ua
現在のメッセージに対し送信者宛に返答する。
@item A
現在のメッセージに返答する。Draft モードに草稿が用意され、To: や Cc: が
自動的に決定された後、本文が引用される。@xref{reply}を参照のこと。
@item C-uA
現在のメッセージに対し、引用付きで送信者宛に返答する。
@item f
現在のメッセージを第3者に転送する。Draft モードに草稿が用意され、現在の
メッセージが自動的に添付される。@xref{forward}を参照のこと。
@item F
@samp{*} マークの付いたメッセージを第3者に転送する。Draft モードに草稿
が用意され、@samp{*} マークの付いたメッセージが自動的に添付される。詳し
くは @xref{target mark} を参照のこと。@xref{forward}を参照のこと。
@end ifset
@ifset us
@item w
Write a message. A new draft is prepared in Draft mode. Please refer to
@xref{Composing}.
@item C-uw
Write a message. A new draft is prepared in Draft mode. The From:
address of the current message is copied to the To: field in the
draft.
@item W
Send a message by modifying a part of the header of another message.
Please refer to @xref{resend}.
@item a
Answer to this message. A new draft is prepared in Draft mode. Mew
automatically inserts the content of the fields To: and Cc:. Please
refer to @xref{reply}.
@item C-ua
Answer to this message only to the sender.
@item A
Answer to this message. A new draft is prepared in Draft mode. Mew
automatically inserts the content of the fields To: and Cc: and cites
the body. Please refer to @xref{reply}.
@item C-uA
Answer to this message only to the sender with citation.
@item f
Forward this message to a third person. A new draft is prepared in Draft
mode and this message is automatically attached. Please refer to
@xref{forward}.
@item F
Forward messages marked with @samp{*} to a third person. A new draft is
prepared in Draft mode and this message is automatically attached. For
more information, refer to @xref{target mark}. Please refer to
@xref{forward}.
@end ifset
@end table

@ifset jp
エラーメッセージが返ってきたら、以下のコマンドで修正し再挑戦しましょう。
@end ifset
@ifset us
If an error message returns, please try again with the following
commands.
@end ifset

@table @samp
@ifset jp
@item E
メッセージの再編集。または、MIME 形式でカプセル化されて戻ってきたメッセー
ジの再編集。

@enumerate
@item
+draft では、メッセージが単に編集される。
@item
+queue と +postq では、メッセージが +draft に移動されて、編集される。
@item
それ以外では、メッセージが +draft にコピーされて、編集される。
@end enumerate

+draft、+queue、+postq では、送信ケースが復活する。

他のフォルダでは、@samp{mew-case-guess-when-prepared} が@samp{t} なら、
ヘッダのそれぞれのフィールドが送信ケースに従って置き換えられる。詳しくは 
@xref{config} を参照のこと。
@item C-uE
@samp{E} と同じ。ただし、+draft、+queue、+postq 以外のフォルダで利用され
た場合は、@samp{mew-case-guess-when-prepared} が @samp{t} でも、オリジナ
ルのヘッダが保存される。
@item M-e
"----- Original message follows -----" の後にオリジナルのメッセージが
引用されているエラーメッセージの再編集。
@end ifset
@ifset us
@item E
Edit this message again to retry sending. Or edit this RFC822 part
typically included in a MIME-encapsulated error message.

@enumerate
@item
In +draft, the message is just edited.
@item
In +queue or +postq, the message is moved to +draft and is edited.
@item
Otherwise, the message is copied to +draft and is edited. 
@end enumerate

For +draft, +queue, and +postq, the sending case revives.

For the other folders, if @samp{mew-case-guess-when-prepared} is
@samp{t}, each field of the original header is replaced according to a
guessed sending case. For more information, see @xref{config}.
@item C-uE
The same as @samp{E}. But, when used for other folders than +draft,
+queue, and +postq, the original header is retained even if
@samp{mew-case-guess-when-prepared} is @samp{t}.
@item M-e
Edit an old fashioned error message in which the original message is
encapsulated after "----- Original message follows -----".
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node features, status-update, sum-write, Viewing
@ifset jp
@section 便利な機能
@end ifset
@ifset us
@section Useful features
@end ifset
@vindex mew-print-function
@vindex mew-use-header-veil
@vindex mew-header-veil-count
@kindex v (Summary)
@kindex zv (Summary)
@kindex M-l (Summary)
@kindex C-cC-s (Summary)
@kindex C-cC-r (Summary)
@kindex y (Summary)
@kindex # (Summary)
@kindex | (Summary)
@kindex O (Summary)
@kindex B (Summary)
@kindex D (Summary)
@kindex C-uD (Summary)
@kindex C-cC-a (Summary)
@kindex C-cC-v (Summary)
@kindex C-cC-z (Summary)
@kindex C (Summary)
@kindex = (Summary)
@kindex ; (Summary)

@ifset jp
Mew では、Summary モードに以下のような便利なコマンドが用意されています。
@end ifset
@ifset us
Mew provides you with the following useful commands in Summary mode:
@end ifset

@table @samp
@ifset jp
@item v
「Summary モードのみ」と「Summary & Message モード」の切り替え。
「Summary モードのみ」を選んでいる場合は、@samp{d} は次のメッセージを表
示しないので、連続してすばやく @samp{D} マークを付けられる。
@item zv
@samp{mew-use-header-veil} が nil でないとき、To: と Cc: で
@samp{mew-header-veil-count} を越える行は「ベール」で隠されている。この
コマンドは、それらの行の見える／見えないを反転させる。
@samp{mew-use-header-veil} の @samp{mew-header-veil-count} デフォルトは、
それぞれ @samp{t} と 4。
@item M-l
現在の行を Summary モードの中央に移動させる。
@item C-cC-s
Message モードで順方向段階的検索。
@item C-cC-r
Message モードで逆方向段階的検索。
@item y
メッセージ、あるいは、パートを入力したファイル名で保存する。
@item C-uy
保存するテキストの coding-system を指定して、メッセージ、あるいは、パー
トを入力したファイル名で保存する。
@item #
@samp{mew-print-function} を利用して Message モードの内容を印刷する。
@item C-u#
プリンタ名を指定して Message モードの内容を印刷する。
@item |
Message モードの内容をパイプで指定されたコマンドに出力する。
@item C-u|
Message モードの本文(ヘッダを除く)をパイプで指定されたコマンドに出力する。
@item \
このメッセージを引数にして、入力された外部コマンドを起動する。
@item O
メッセージを番号詰めして、再び一覧表示する。
@item B
格納されているメッセージを取り出す。
@item C-cC-a
現在のメッセージの情報をアドレス帳に登録する(@xref{addrbook})。
@item C-cC-v
PGP のバージョンを切替える(@xref{pgp-viewing})。
@item C-cC-z
昔ながらの自動処理できない PGP メッセージを PGP に復号化、検証させる(@xref{pgp-viewing})。
@item C
送受信のケースを変更する。詳しくは、@xref{config} を参照のこと。
@item =
フォルダ名とメッセージ番号を表示する。キャッシュ・メッセージの場合は、加
えて ID とサイズも表示する。
@item ;
Received: フィールドを解析し、分りやすく Message モードに表示する。
@end ifset
@ifset us
@item v
Toggle "Summary mode only" and "Summary & Message mode". If you choose
"Summary mode only", you can quickly put the @samp{D} mark since the
next message is not displayed.
@item zv
If @samp{mew-use-header-veil} is non-nil, field lines of To: and Cc:
over @samp{mew-header-veil-count} are covered with invisible
veils. This commands toggles visibility of these lines.
@samp{mew-use-header-veil} and @samp{mew-header-veil-count} are
default to @samp{t} and 4, respectively.
@item M-l
Make the current line the center of the Summary mode.
@item C-cC-s
Incremental search forward in Message mode.
@item C-cC-r
Incremental search backward in Message mode.
@item y
Save this message or this part into the file whose name is specified by
you.
@item C-uy
Save this message or this part into the file whose name is specified by
you, specifying coding-system for text.
@item #
Print the content of Message mode according to @samp{mew-print-function}.
@item C-u#
Print the content of Message mode with a specified printer name.
@item |
Send the content of Message buffer to a command via pipe.
@item C-u|
Send the body of Message buffer (excluding its header) to a command via
pipe.
@item \
Executing an external command specifying this message as an argument.
@item O
Pack messages and list them up again.
@item B
De-capsulate embedded messages in MIME format.
@item C-cC-a
Register the information on the current message to Addrbook
(@xref{addrbook}).
@item C-cC-v
Select PGP version (@xref{pgp-viewing}).
@item C-cC-z
Let PGP decrypt and/or verify old fashioned PGP messages
(@xref{pgp-viewing}).
@item C
Change the value of sending/receiving case. For more information,
please refer to @xref{config}.
@item =
Display the folder name of this message and the message number. If this
is a cache message, both the unique id and the size are also shown.
@item ;
Parse the Received: fields and display them in Message mode.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node status-update, thread, features, Viewing
@ifset jp
@section 状態の更新
@end ifset
@ifset us
@section Updating status
@end ifset
@vindex mew-use-8bit
@vindex mew-debug
@vindex mew-decode-broken
@vindex mew-warning-field-level
@vindex mew-use-old-pgp
@vindex mew-use-header-veil
@kindex Z (Summary)
@kindex C-uZ (Summary)
@kindex 1Z (Summary)
@kindex 2Z (Summary)
@kindex 3Z (Summary)
@kindex z8 (Summary)
@kindex zc (Summary)
@kindex zd (Summary)
@kindex zo (Summary)
@kindex zp (Summary)
@kindex zv (Summary)
@kindex zw (Summary)

@ifset jp
いくつかの設定の変更には、その変更を反映するために、状態を更新しなければ
ならない場合があります。変更が反映されなかったり、変更のためにエラーが生
じるようになった場合は、以下のコマンドを利用して下さい。
@end ifset
@ifset us
In some cases of configuration modifications, you have to update status
to reflect them. When you think configuration modifications don't make
any effects or some errors occur, use one of the following commands:
@end ifset

@table @samp
@ifset jp
@item Z
アドレス帳(@xref{addrbook})などの情報を更新する。
@item C-uZ
アドレス帳に加えてローカル・フォルダのリストの情報を更新する。
@item 1Z
ローカル・フォルダのリストの情報を更新する。
@item 2Z
ニュースグループのリストの情報を更新する。
@item 3Z
IMAP のフォルダのリストの情報を更新する。
@end ifset
@ifset us
@item Z
Update information including Addrbook(@xref{addrbook}). 
@item C-uZ
Update information about local folders in addition to including
Addrbook(@xref{addrbook}).
@item 1Z
Update information about local folders.
@item 2Z
Update information about newsgroups.
@item 3Z
Update information about IMAP folders.
@end ifset
@end table

@ifset jp
状態を反転させるコマンドを以下にまとめます。
@end ifset
@ifset us
Here is a summary of toggle commands.
@end ifset

@table @samp
@ifset jp
@item z8
8ビット・モード(@samp{mew-use-8bit})を反転させる。
@item zc
解析したメッセージのキャッシュを消去する。
@item zd
@samp{mew-debug} を反転させる。
@item zo
PGP を省略方法で作成する場合、PGP/MIME なのか古い PGP の書式なのか
(@samp{mew-use-old-pgp})を反転させる。
@item zp
解析、復号化のポリシ(@samp{mew-decode-broken})を反転させる。
@item zv
Message モードでベールを使うか否か(@samp{mew-use-header-veil})を反転さ
せる。
@item zw
警告のレベル(@samp{mew-warning-field-level})が 2 なら 1 へ、1 なら 2 へ
設定する。
@end ifset
@ifset us
@item z8
Toggle 8bit mode(i.e. @samp{mew-use-8bit}).
@item zc
Clean-up caches of analyzed messages.
@item zd
Toggle @samp{mew-debug}.
@item zo
Toggle PGP/MIME or old-fashioned PGP (@samp{mew-use-old-pgp}) when
composing with shortcut methods.
@item zp
Toggle decode policy(i.e. @samp{mew-decode-broken}).
@item zv
Toggle whether or not veil is used in Message
mode(@samp{mew-use-header-veil}).
@item zw
Toggle warning level. If @samp{mew-warning-field-level} is 2, set it to
1.  If @samp{mew-warning-field-level} is 1, set it to 2.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node thread, sorting, status-update, Viewing
@ifset jp
@section スレッド
@end ifset
@ifset us
@section Thread
@end ifset
@vindex mew-use-thread-separator
@vindex mew-thread-separator
@kindex tt (Summary)
@kindex C-utt (Summary)
@kindex mt (Summary)
@kindex tr (Summary)
@kindex tp (Virtual)
@kindex tn (Virtual)
@kindex ^ (Virtual)
@kindex & (Virtual)
@kindex ( (Virtual)
@kindex ) (Virtual)
@kindex t* (Virtual)
@kindex t@ (Virtual)
@kindex td (Virtual)
@kindex tM-d (Virtual)
@kindex to (Virtual)
@kindex tu (Virtual)
@kindex tSPC (Virtual)
@kindex tg (Virtual)

@ifset jp
メッセージをやりとりしていると、対話の流れは木構造になります。この対話の
流れをスレッドといいます。Mew ではスレッドの木構造を可視化する機能があり
ます。以下にスレッドの例を示します。
@end ifset
@ifset us
When in the process of exchanging messages, the relationship of the
messages is presented in a tree structure, this is called thread. Mew
has a feature to render the tree structure of threads. Here is an
example.
@end ifset

@example
@ifset jp
  03/12 Hidenori Ohta  今週末                    |日曜にストーンマジック
  03/13 かずくん       ┣Re: 今週末              |雨なので、中にしますか
  03/15 Hidenori Ohta  ┃┗Re: 今週末            |それでは、12:00 に集合
  03/14 おだちゃん     ┗Re: 今週末              |いいねぇ。次はあれを落
@end ifset
@ifset us
  03/12 Hidenori Ohta  This weekend              |Let's go to StoneMagic
  03/13 Kazu-kun        +Re: This weekend        |Since it'll be rainy, 
  03/15 Hidenori Ohta   | +Re: This weekend      |OK. Get together at 12
  03/14 Oda-chan        +Re: This weekend        |Sounds lovely. I'd lik
@end ifset
@end example

@ifset jp
スレッドを表示するモードは、Virtual モードとして実現されています。たと
えば、+inbox に対しスレッドを作ると、*+inbox というバッファが用意されま
す。Virtual モードに関する詳しいことは、@xref{virtual} を参照して下さい。
ここでは、スレッドを表示する Virtual モードを Thread モードと呼ぶことに
します。Thread モードを作るために、以下のコマンドが用意されています。
@end ifset
@ifset us
The thread feature is implemented as Virtual mode. For instance, if
you make threads for +inbox, a buffer called *+inbox is prepared.  For
more information about Virtual mode, please refer to @xref{virtual}.
In this section, we call Virtual mode for thread "Thread mode". To
make Thread mode, the following commands exist.
@end ifset

@table @samp
@ifset jp
@item tt
Summary モード、あるいは 1 つフォルダから作成された Virtual モードで起
動された場合は、スレッドを作り Thread モードに表示する。そして、Thread
モードにおいて、カーソルを現在のメッセージに移動する。もし、対応する
Thread モードが存在しているなら、その Thread モードに表示を切り替える。
Thread モードで使用された際は、対応する Summary モードへ移り、カーソル
を現在のメッセージへ移動する。
@item C-utt
リージョンに対し、スレッドを作る。
@item mt
@samp{*} マークの付いているメッセージに対し、スレッドを作る。
@item tr
@samp{*} 正規表現に合致したメッセージに対し、スレッドを作る。
@end ifset
@ifset us
@item tt
If called in Summary mode or in Virtual mode made of a single physical
folder, this command makes Thread mode then the cursor jump onto the
current message in the Thread mode. If a corresponding Thread mode
exists, this command just visits the Thread mode.  If called in Thread
mode, switch back to the corresponding Summary mode and move to the
current message."
@item C-utt
Make threads for messages in the region.
@item mt
Make threads for messages marked with @samp{*}.
@item tr
Make threads for messages matched to a regular expression.
@end ifset
@end table


@ifset jp
スレッドに特化した移動コマンドを以下に示します。
@end ifset
@ifset us
Here are the commands used for moving to thread presentation.
@end ifset

@table @samp
@ifset jp
@item tp
現在のスレッドの頭に移動する。もし、あるスレッドの頭にカーソルがある場合
は、前のスレッドの頭に移動する。
@item tn
次のスレッドの頭に移動する。
@item ^
親のメッセージに移動する。
@item &
長男のメッセージに移動する。
@item (
兄のメッセージに移動する。
@item )
弟のメッセージに移動する。
@end ifset
@ifset us
@item tp
Move to the top of the current thread. If the current message is a top
node, move to the top of the next thread.
@item tn
Move to the top of the next thread.
@item ^
Move to the parent message of the current message.
@item &
Move to the child message of the current message.
@item (
Search backward by one sibling message of the current message.
@item )
Search forward by one sibling message of the current message.
@end ifset
@end table


@ifset jp
スレッドにマークを付けるコマンドを以下に示します。
@end ifset
@ifset us
Here are commands to mark messages in a thread.
@end ifset

@table @samp
@ifset jp
@item t*
現在のメッセージを頭とする部分木に属するメッセージすべてに @samp{*} マー
クを付ける。詳しくは @xref{target mark} を参照のこと。
@item t$
現在のメッセージを頭とする部分木に属するメッセージすべてに @samp{$} マー
クを付ける。詳しくは @xref{escape mark} を参照のこと。
@item td
現在のメッセージを頭とする部分木に属するメッセージすべてに @samp{D} マー
クを付ける。詳しくは @xref{delete mark} を参照のこと。
@item tM-d
現在のメッセージを頭とする部分木に属するメッセージすべてに @samp{X} マー
クを付ける。詳しくは @xref{delete mark} を参照のこと。
@item to
現在のメッセージを頭とする部分木に属するメッセージすべてに @samp{o} マー
クを付ける。詳しくは @xref{refile mark} を参照のこと。
@end ifset
@ifset us
@item t*
Put the @samp{*} mark all messages of the current sub-thread. Please
refer to @xref{target mark} for more information.
@item t$
Put the @samp{$} mark all messages of the current sub-thread. Please
refer to @xref{escape mark} for more information.
@item td
Put the @samp{D} mark all messages of the current sub-thread. Please
refer to @xref{delete mark} for more information.
@item tM-d
Put the @samp{X} mark all messages of the current sub-thread. Please
refer to @xref{delete mark} for more information.
@item to
Put the @samp{o} mark all messages of the current sub-thread. Please
refer to @xref{refile mark} for more information.
@end ifset
@end table

@ifset jp
スレッドからマークを消すコマンドは、@samp{tu} です。
@end ifset
@ifset us
A command to unmark all messages of the current sub-thread is @samp{tu}.
@end ifset


@ifset jp
以下に、スレッドを加工するコマンドを示します。
@end ifset
@ifset us
Here are commands to manipulate a thread:
@end ifset

@table @samp
@ifset jp
@item tSPC
子供以下を隠して親だけにする。子供以下が隠れている親メールには、"+" が
付く。また、子供以下が隠れている親メールでこのコマンドを実行すると、子
供以下が現れる。
@item tg
あるスレッドをあるメールに接ぎ木する。接ぎ木するスレッドは、
@samp{C-SPC} で指定する。目的のスレッドの一番上のメールで、
@samp{C-SPC} を押すと、そのスレッドが選択されたことになる。そして目的の
メールへ移動し、@samp{tg} を押すと、スレッドがこのメールの子供として接
ぎ木される。
@end ifset
@ifset us
@item tSPC
Hide children and leave the parent only. If its children are hidden,
"+" is displayed on the parent. Also, if this command is executed on a
message whose children are hidden, they appear.
@item tg
Graft a thread to a message. To specify which thread is grafted, type
@samp{C-SPC} on the root of the thread. Then move onto your target
message, and typing @samp{tg} grafts the thread to the target message
as children.
@end ifset
@end table


@ifset jp
なお、@samp{mew-use-thread-separator} を @samp{t} にすると、スレッド間に
境界文字列として @samp{mew-thread-separator} (デフォルトは "--") が挿入
されます。
@end ifset
@ifset us
If @samp{mew-use-thread-separator} is @samp{t}, threads are
distinguished by a separator defined by @samp{mew-thread-separator} (its
default value is "--").
@end ifset

@c %%%%%%%%%%%%%%%%%
@node sorting, invalid, thread, Viewing
@ifset jp
@section メッセージのソート
@end ifset
@ifset us
@section Sorting messages
@end ifset
@vindex mew-sort-key-alist
@vindex mew-sort-default-key
@vindex mew-sort-default-key-alist
@kindex S (Summary)

@ifset jp
ローカル・フォルダ内のメッセージをソートするには @samp{S} を使います。
このとき次のようにどのフィールドでソートするか訊いてくるので、ソートし
たいフィールド名を入力して下さい。
@end ifset
@ifset us
To sort messages in the current local folder, use @samp{S}. Then you
will be asked to input the field name as follows:
@end ifset

@example
Sort by? (default date): 
@end example

@ifset jp
指定したフィールドに書かれている文字列は単純に文字列比較でソートするべき
ではありません。たとえば、Subject: はテキストと考えてよいのですが、Date: 
は日付、X-Mail-Count: は数字と考えてソートすべきです。このように文字列を
どう取り扱うかをモードといいます。ソートによく指定されるフィールド名に対
するデフォルトのモードは @samp{mew-sort-key-alist} で設定されています。
@end ifset
@ifset us
There are some cases where strings stored in the specified field should
not be compared as text. For example, while Subject: can be considered
as text, Date: and X-Mail-Count: should be treated as date and number,
respectively. In this way, we call the distinctions in methods of string
sorting "modes".  Default modes for typical field names are configured
in @samp{mew-sort-key-alist}.
@end ifset

@ifset jp
ソートのモードを明示的に指定、変更したい場合には @samp{:} で区切って指定
します。たとえば X-Mail-Count: フィールドの内容を(テキストとしてではなく) 
数値とみなしてソートしたい場合には、次のように入力します。
@end ifset
@ifset us
When you want to specify the mode of sorting, the mode is followed by
@samp{:}.  For example, to sort with the X-Mail-Count: field as
arithmetic value (not text), input like this:
@end ifset

@example
x-mail-count:num
@end example

@ifset jp
フィールド名やモードは @samp{TAB} で補完できます。
@end ifset
@ifset us
You can complete field names and modes with @samp{TAB}.
@end ifset

@ifset jp
モードには、以下の 4 つがあります。
@end ifset
@ifset us
Mew provides four modes for sorting:
@end ifset

@table @samp
@ifset jp
@item text
先頭の "Re: " や "Fw: " を取り除いた文字列。
@item ml
text と同じであるが、さらにメーリングリスト特有の文字列も取り除く
@item num
数値。
@item date
日付。
@end ifset
@ifset us
@item text
String with preceding "Re: " and or "Fw: " removed.
@item ml
The same as text but preceding mailing-list-string removed.
@item num
Number.
@item date
Date.
@end ifset
@end table

@ifset jp
"Sort by?" と訊かれる際のデフォルトのフィールド名は、
@samp{mew-sort-default-key} で設定できます。以下は、デフォルトの "date" 
を "x-ml-count" に変更する例です。
@end ifset
@ifset us
The default field name, your response to the prompt "Sort by?", can be
specified in @samp{mew-sort-default-key}. The following example changes
the default value from "date" to "x-ml-count".
@end ifset

@lisp
(setq mew-sort-default-key "x-ml-count")
@end lisp

@ifset jp
@samp{mew-sort-default-key-alist} で、フォルダごとにデフォルトのフィール
ド名を設定することもできます。ここで指定しなかったフォルダでは、デフォル
トのフィールド名として @samp{mew-sort-default-key} の値が使われます。以
下は、+inbox フォルダでのデフォルトを "subject" に、+mew-dist フォルダで
のデフォルトを "x-mail-count" に変更する例です。
@end ifset
@ifset us
You can also set a default field name for each folder by
@samp{mew-sort-default-key-alist}. For folders not explicitly specified
here, @samp{mew-sort-default-key} is used for their default field name.
The following is an example that specifies "subject" for the +inbox
folder and "x-mail-count" for the +mew-dist folder.
@end ifset

@lisp
(setq mew-sort-default-key-alist
      '(("+inbox" . "subject")
        ("+mew-dist" . "x-mail-count")))
@end lisp

@c %%%%%%%%%%%%%%%%%
@node invalid, Composing, sorting, Viewing
@ifset jp
@section 規格違反のメッセージ
@end ifset
@ifset us
@section Invalid messages
@end ifset
@vindex mew-decode-quoted
@kindex C-u. (Summary)
@kindex C-cC-l (Summary)
@kindex C-uC-cC-l (Summary)

@ifset jp
以下のようなメッセージは、Content-Type: で charset が指定されていないの
で、本来 US-ASCII と認識されてしまいます。
@end ifset
@ifset us
The following message contains Japanese text in its body. The charset
parameter is not specified in the Content-Type: field. So, the body
should be treated as US-ASCII.
@end ifset

@example
@ifset jp
To: piglet
Subject: 規格違反のメッセージ
From: pooh
MIME-Version: 1.0
Content-Type: Text/Plain

日本語の本文
@end ifset
@ifset us
To: piglet
Subject: an invalid message
From: pooh
MIME-Version: 1.0
Content-Type: Text/Plain

Japanese comes here.
@end ifset
@end example

@ifset jp
また以下のようなヘッダも規格違反です。
@end ifset
@ifset us
The following header is invalid as well.
@end ifset

@example
From: "=?iso-2022-jp?B?GyRCOzNLXE9CSScbKEI=?=" <kazu@@iijlab.net>
@end example

@ifset jp
上の例では "=?" と "?=" で囲まれた部分はもともと日本語でした。メッセージ
の規格ではヘッダには ASCII のみが格納できると定められています。よって、
ASCII 以外の文字コードをヘッダに格納するには、ある規則に従って ASCII に
符号化する必要があります。しかし、この符号化された文字列を 「"」 で囲む
のは間違いです。「"」で囲まれた文字列は、そのままの形で取り扱われます。
よって、上の例の "=?" と "?=" で囲まれた部分が日本語に復号化されることは
本来ありません。
@end ifset
@ifset us
The string delimited by "=?" and "?=" in the above example was
originally Japanese. Since the spec of mail limits the content of
headers to ASCII characters, if a string whose character set is other
than ASCII, is to be stored in a header, the string must be encoded with
ASCII strings according to the defined rule. But it is certainly invalid
to embed the ASCII strings with @samp{"}. Strings surrounded by @samp{"}
are treated as is. Therefore, the string between "=?" and "?=" in the
example will not be decoded into Japanese.
@end ifset

@ifset jp
規格に無頓着な一部のメーラではこのような間違いを平気で犯します。正しい対
処方法は、このようなメーラの作者に頼んで、規格を正しく実装するように変更
してもらうことです。しかし、このようなメーラはあまりにも多いので、Mew で
はできる限り復号化するよう試みます。そして、以下のような警告をヘッダに出
します。
@end ifset
@ifset us
Several mailers are careless about the spec and regularly violate these
rules. The right way to do is ask the programmers of such mailers to
make the programs conformant to the spec. However, since there are so
many mailers of this kind around the world, Mew tries to decode as many
different formats as possible. In these cases Mew displays warnings such
as:
@end ifset

@example
X-Mew: Charset for body is not specified.
       To: has encoded-words in quoted text.
@end example

@ifset jp
もし、規格に厳密に復号化したいのなら、@samp{mew-decode-broken} を nil に
設定して下さい。この値は @samp{C-u.} を使うと動的に反転できます
(@xref{singlepart} を参照)。
@end ifset
@ifset us
If you want to decode messages strictly, set @samp{mew-decode-broken} to
nil. This value can be toggled dynamically by @samp{C-u.} (see
@xref{singlepart}).
@end ifset

@ifset jp
次のようなメッセージは、charset で指示されている文字コードと実際の文字が異
なるため、文字化けを起こします。
@end ifset
@ifset us
The following message is displayed as a mess since the character set
specified with the charset parameter and the actual character set
of its body are different.
@end ifset

@ifset jp
@example
Content-Type: Text/Plain; charset=ISO-2022-JP

Shift_JIS で書かれた日本語の本文
@end example
@end ifset
@ifset us
@example
Content-Type: Text/Plain; charset=ISO-2022-JP

Japanese text written in Shift_JIS
@end example
@end ifset

@ifset jp
@samp{C-cC-l} を使えば、charset で指定された文字コードを無視し、指定した
言語の推測規則に従って文字コードを推測し、再表示させることができます。ま
た、@samp{C-uC-cC-l} で明示的に文字コードを指定し、再表示させることも可
能です。
@end ifset
@ifset us
By using @samp{C-cC-l}, the text is re-displayed with charset guessed
according to a specified language, ignoring the character set specified
by the charset parameter. If you type @samp{C-uC-cC-l}, you can
re-display the text by specifying a character set explicitly.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Composing
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Composing, header, invalid, Top
@ifset jp
@chapter メッセージを作成する
@end ifset
@ifset us
@chapter Composing messages
@end ifset
@vindex mail-user-agent
@kindex M-x mew-send
@kindex C-xm
@kindex w (Summary)
@kindex a (Summary)
@kindex A (Summary)
@kindex f (Summary)
@kindex F (Summary)

@ifset jp
ここではメッセージの作成方法について説明します。
@end ifset
@ifset us
This section explains how to compose a message.
@end ifset

@ifset jp
新しいメッセージを書くために、Draft モードに移行するには、次の手段があり
ます。
@end ifset
@ifset us
Methods to enter Draft mode to write a new message are given below.
@end ifset

@enumerate
@ifset jp
@item
@samp{M-x mew-send} と入力する。
@item
@samp{mail-user-agent} が設定されている場合、@samp{C-xm} と入力する。
@item
Summary モードで @samp{w} を押す。
@end ifset
@ifset us
@item
Type @samp{M-x mew-send}.
@item
Type @samp{C-xm} if @samp{mail-user-agent} is configured.
@item
Press @samp{w} in Summary mode.
@end ifset
@end enumerate

@ifset jp
すると、以下のようなバッファが用意されます。
@end ifset
@ifset us
Then a buffer like the following is prepared. 
@end ifset

@example
To: 
Subject:
From: Kazu Yamamoto <Kazu@@Mew.org> 
X-Mailer:@value{X-Mailer:}
----
@end example

@ifset jp
これを Draft モードといいます。Draft モードにおいて、"----" より上をヘッ
ダ、下を本文と呼びます。
@end ifset
@ifset us
We call this "Draft mode". In Draft mode, we call the region above
"----" the header, and the region below "----" the body.
@end ifset

@ifset jp
またメッセージへの返答(@samp{a} や @samp{A})や転送(@samp{f} や @samp{F})
でも Summary モードから Draft モードへ移行します。
@end ifset
@ifset us
Also, replying a message (@samp{a} or @samp{A}) and/or forwarding
messages (@samp{f} or @samp{F}) lead you to Draft mode from Summary
mode.
@end ifset

@ifset jp
草稿は、+draft フォルダの下に作成されます。同時に複数の草稿を持つことが
可能です。
@end ifset
@ifset us
Drafts are temporarily stored in the +draft folder. You can write
multiple messages simultaneously.
@end ifset

@ifset jp
一旦用意した草稿を削除する方法については、@xref{Quit}を参照して下さい。
@end ifset
@ifset us
For the method of deleting a prepared draft, please refer to
@xref{Quit}.
@end ifset

@ifset jp
以下、Draft モードの使い方を説明します。
@end ifset
@ifset us
Now let's see how to use Draft mode.
@end ifset

@menu
@ifset jp
* header::                      ヘッダの補完
* cheader::                     ヘッダの循環的な補完
* addr-comp::                   アドレスの補完
* addrbook::                    アドレス帳
* auto-alias::                  アドレスの自動学習
* addr-comp1::                  アドレスの補完(1)
* addr-comp2::                  アドレスの補完(2)
* send::                        メッセージの送信
* cite::                        シグニチャと引用
* mime-comp::                   マルチパートの作成
* charset-guess::               文字コードの決定
* reply::                       メッセージへの返答と宛先の決定
* forward::                     メッセージの転送
* resend::			メッセージの再送
* pgp-shortcut::                PGP を利用する
* mark-b-comp::                 マークを使った PGP/MIME の作成
* pgp-key::                     PGP の鍵の配布
* anonymous::                   宛先を匿名にしたメッセージの送信
@end ifset
@ifset us
* header::                      Completions in a header
* cheader::                     Circular completions in a header
* addr-comp::                   Address Completion
* addrbook::                    Address book
* auto-alias::                  Learning addresses
* addr-comp1::                  Address Completion(1)
* addr-comp2::                  Address Completion(2)
* send::                        Sending a message
* cite::                        Signature and citation
* mime-comp::                   Composing multipart
* charset-guess::               Defining charset
* reply::                       Replying to a message and deciding recipients
* forward::                     Forwarding messages
* resend::			Re-sending messages
* pgp-shortcut::                Using PGP
* mark-b-comp::                 Mark based composer
* pgp-key::                     PGP key distribution
* anonymous::                   Sending messages with anonymous receivers
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node header, cheader, Composing, Composing
@ifset jp
@section ヘッダの補完
@end ifset
@ifset us
@section Completions in a header
@end ifset
@vindex mew-fields
@kindex TAB (Draft)

@ifset jp
ヘッダでは @samp{TAB} に対し、以下ように各フィールド用の補完機能が割り当て
られています。
@end ifset
@ifset us
In the header, completions for each field are assigned to @samp{TAB} as
follows:
@end ifset

@itemize @minus
@ifset jp
@item フィールド名の補完
@item アドレスの補完 (To:、Cc: など) (@xref{addr-comp} を参照)
@item フォルダ名の補完 (Fcc:)
@end ifset
@ifset us
@item Field completion
@item Address completion (To:, Cc:, etc) (See @xref{addr-comp})
@item Folder completion (Fcc:)
@end ifset
@end itemize

@ifset jp
<フィールド名の補完>
@end ifset
@ifset us
<Field completion>
@end ifset

@ifset jp
行頭の単語中で、しかも、上の行の最後が "," で終る継続行でなければ、
@samp{TAB} で @samp{mew-fields} に定義されているフィールド名を補完できま
す。
@end ifset
@ifset us
If the cursor is at the beginning of a line and the previous line does
not end with ",", you can complete field defined in the
@samp{mew-fields} variable with @samp{TAB}.
@end ifset

@example
To: kazu@@mew.org
R@samp{TAB}
@end example

@ifset jp
上記の場所で @samp{TAB} を押すと以下のようになります。
@end ifset
@ifset us
At the point above, if you type @samp{TAB}, you get:
@end ifset

@example
To: kazu@@mew.org
Reply-To: 
@end example

@ifset jp
<フォルダ名の補完>
@end ifset
@ifset us
<Folder completion>
@end ifset

@ifset jp
Fcc: などのようにフォルダを補完すべきところでは、@samp{TAB} でフォルダを
補完できます。以下例を挙げてみます。
@end ifset
@ifset us
At a point, such as Fcc:, you can complete folder name with
@samp{TAB}. For example:
@end ifset

@example
Fcc: @samp{TAB}
@end example

@ifset jp
"+" が補完されます。
@end ifset
@ifset us
Here, "+" is completed.
@end ifset

@example
Fcc: +@samp{TAB}
@end example

@ifset jp
@samp{TAB}をもう1度押すと候補が表示されるので、候補を見ながら適切な文字
を入力します。
@end ifset
@ifset us
One more type of @samp{TAB} shows candidates. Please type in the
appropriate characters then type @samp{TAB}.
@end ifset

@example
Fcc: +b@samp{TAB}
@end example

@ifset jp
候補が一意に定まれば補完されます。
@end ifset
@ifset us
hnfsaIf a single candidate can be determined, you get a completion.
@end ifset

@example
Fcc: +backup
@end example

@c %%%%%%%%%%%%%%%%%
@node cheader, addr-comp, header, Composing
@ifset jp
@section ヘッダの循環的な補完
@end ifset
@ifset us
@section Circular completions in a header
@end ifset
@vindex mew-mail-domain-list
@vindex mew-from-list
@kindex C-cTAB (Draft)

@ifset jp
ヘッダでは、@samp{C-cTAB} に循環的な補完機能が割り当てられています。循環
的な補完機能とは、あるリストのある値がそのリストの次の値に置き換えられる
ことです。リストの最後は、最初につながっていると考えます。ヘッダ中の循環
的な補完機能は、以下のようにフィールドごとに異なります。
@end ifset
@ifset us
In a header, circular completions are assigned to @samp{C-cTAB}.
Circular completion means that a value of a list is replaced by the next
value of the list. The end of the list is considered continuous to the
top of the list. Circular completions in a header are different for each
field as follows:
@end ifset

@itemize @minus
@ifset jp
@item ドメイン名の循環的な補完 (To:、Cc: など)
@item From: の循環的な補完 (From:)
@end ifset
@ifset us
@item Circular completion of domain name (To:, Cc:, etc)
@item Circular completion of From: (From:)
@end ifset
@end itemize

@ifset jp
<ドメイン名の循環的な補完>
@end ifset
@ifset us
<Circular completion of domain name>
@end ifset

@ifset jp
アドレスを書くべきフィールドでは、@samp{C-cTAB} でドメインを補完します。
補完の候補は @samp{mew-mail-domain-list} から選ばれます。
@end ifset
@ifset us
On a field where addresses are written, use @samp{C-cTAB} for domain
completion. Candidates are selected from @samp{mew-mail-domain-list}.
@end ifset

@example
To: kazu@@@samp{C-cTAB}
@end example

@ifset jp
上記の場所のように候補が一意に定まらない場合は、
@samp{mew-mail-domain-list} の最初のドメイン名が挿入されます。
@end ifset
@ifset us
If you try to complete just after "@@" as up above, the first domain of
@samp{mew-mail-domain-list} is inserted.
@end ifset

@example
To: kazu@@mew.org@samp{C-cTAB}
@end example

@ifset jp
補完された後、さらに @samp{C-cTAB} を押すと @samp{mew-mail-domain-list} 
の次の候補に変換します。
@end ifset
@ifset us
After completion, pressing @samp{C-cTAB} one more times inserts the next
domain of @samp{mew-mail-domain-list}. This completion is looped.
@end ifset

@example
To: kazu@@wide.ad.jp
@end example

@ifset jp
また、以下の補完が一意に定まれば、その候補を挿入します。
@end ifset
@ifset us
If a single candidate can be determined, it is inserted.
@end ifset

@example
To: kazu@@w@samp{C-cTAB}
@end example

@ifset jp
上記の例は次のようになります。
@end ifset
@ifset us
The above example gives:
@end ifset

@example
To: kazu@@wide.ad.jp
@end example

@ifset jp
<From: の循環的な補完>
@end ifset
@ifset us
<Circular completion of From:>
@end ifset

@ifset jp
草稿には、あらかじめ "mew-name <mew-user@@mew-domain>" という形式で、
From: フィールドが挿入されています。
@end ifset
@ifset us
In Draft mode, the From: field is inserted with the format of 
"mew-name <mew-user@@mew-domain>".
@end ifset

@example
@ifset jp
From: Kazu Yamamoto (山本和彦) <Kazu@@Mew.org>
@end ifset
@ifset us
From: Kazu Yamamoto <Kazu@@Mew.org>
@end ifset
@end example

@ifset jp
From: フィールド上では、@samp{C-cTAB} は @samp{mew-from-list} の値を循環
的に補完します。@samp{mew-from-list} は自分で設定してもよいですし、自動
的に設定することも可能です。自動設定に関しては、@xref{config}を参照して
下さい。
@end ifset
@ifset us
On the From: field, @samp{C-cTAB} circularly completes its value from
@samp{mew-from-list}. You can set @samp{mew-from-list} by yourself.
Also, @samp{mew-from-list} can be set automatically. For automatic
setup, please refer to @xref{config}.
@end ifset

@ifset jp
値の場所ならどこでも構いませんが、@samp{C-cTAB} と入力すると、
この値を @samp{mew-from-list} の次の値と置き換えます。たとえば、
@end ifset
@ifset us
Typing @samp{C-cTAB} anywhere on the value replaces the value with the
next value of @samp{mew-from-list}. For example,
@end ifset

@example
@ifset jp
From: Kazu Yamamoto (山本和彦) <Kazu@@Mew.org>@samp{C-cTAB}
@end ifset
@ifset us
From: Kazu Yamamoto <Kazu@@Mew.org>@samp{C-cTAB}
@end ifset
@end example

@ifset jp
は以下のようになります。
@end ifset
@ifset us
becomes as follows:
@end ifset

@example
From: Kazuhiko Yamamoto <kazu@@wide.ad.jp>
@end example

@c %%%%%%%%%%%%%%%%%
@node addr-comp, addrbook, cheader, Composing
@ifset jp
@section アドレスの補完
@end ifset
@ifset us
@section Address Completion
@end ifset

@ifset jp
To: や Cc: では、アドレスを補完できます。補完には @samp{TAB} を用います。
@end ifset
@ifset us
You can complete addresses on To: or Cc:. This completion command is
bound to @samp{TAB}.
@end ifset

@example
To: kazu@samp{TAB}
@end example

@ifset jp
上記のように、アドレスの一部で @samp{TAB} を押すと、以下のようにアドレ
スが補完される訳です。
@end ifset
@ifset us
When you type @samp{TAB} after a part of an address as the example
above, the entire address is completed as follows:
@end ifset

@example
To: kazu@@mew.org
@end example

@ifset jp
アドレスの補完に利用されるアドレスの種類には、以下の3つがあります。
@end ifset
@ifset us
There are three kinds of registered addresses to be used for
the completion.
@end ifset

@enumerate
@ifset jp
@item
アドレス帳の展開規則
@item
アドレス帳の個人情報
@item
送信時に学習されたアドレス
@end ifset
@ifset us
@item
The expansion rule in an address book
@item
The personal information in the address book
@item
Learned addresses when sending
@end ifset
@end enumerate

@ifset jp
アドレスの補完には 2 つの方法が提供されています。
@samp{mew-use-full-alias} によって選択します(デフォルトは @samp{nil})。
@end ifset
@ifset us
Mew provides two ways to complete addresses. You can select one of
them with @samp{mew-use-full-alias}, which is default to @samp{nil}.
@end ifset

@ifset jp
@samp{mew-use-full-alias} が @samp{nil}の場合、@samp{@@} の前、つまりユー
ザ名(短縮名)が補完の対象となります。@samp{TAB} を押すとユーザ名が補完さ
れ、補完しきったところでさらに @samp{TAB} を押すとアドレスに「展開」さ
れます。これをアドレスの補完(1)と呼びましょう。
@end ifset
@ifset us
If @samp{mew-use-full-alias} is @samp{nil}, the portion before
@samp{@@}, a user name or a short name, is a target of the
completion. When you type @samp{TAB}, the user name is completed. And
if the user name is uniquely completed and you type @samp{TAB} again,
it is expanded to its entire address. Let's call this Address
Completion(1).
@end ifset

@ifset jp
アドレスの補完(1)(@xref{addr-comp1})の利点は、上に書いた3種類のアドレス
に対し、補完・展開が矛盾なく実行できることです。後述のように、「強制展
開」も @samp{TAB} で実行できます。欠点は、ユーザ名の部分が一意でなけれ
ばならないので、あるユーザ名が登録されている場合、同じユーザ名を持つ別
のアドレスを学習できないとです。
@end ifset
@ifset us
An advantage of Address Completion(1)(@xref{addr-comp1}) is that you
can use the completion/expansion against the three kinds of addresses
seamlessly.  You can also explicitly expand the user name with
@samp{TAB} as described later. A disadvantage is that user names must
be unique.  So, if a user name is already registered, other addresses
with the same user name cannot be learned.
@end ifset

@ifset jp
@samp{mew-use-full-alias} が @samp{t}の場合、学習されたアドレスに関して
は、アドレスの全体が補完の対象になります。これをアドレスの補完(2)と呼び
ましょう。
@end ifset
@ifset us
If @samp{mew-use-full-alias} is @samp{t}, for earned addresses when
sending, completion target is an entire address. Let's call this
Address Completion(2).
@end ifset

@ifset jp
アドレスの補完(2)(@xref{addr-comp2})の利点は、ユーザ名が一致している複
数のアドレスを学習できることです。欠点は、アドレス帳の個人情報に登録さ
れているアドレスの先頭以外は利用できないこと。また、「強制展開」は、
@samp{M-C-e} という (@samp{TAB} とは別の) キーを押さなければいけないこ
とです。
@end ifset
@ifset us
An advantage of Address Completion(2)(@xref{addr-comp1}) is that Mew
can learn addresses whose user names are the same. One of
disadvantages is that only the first address of personal information
can be used(the other addresses are useless). And for the explicit
expansion, you have to type @samp{M-C-e}, a different key from
@samp{TAB}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node addrbook, auto-alias, addr-comp, Composing
@ifset jp
@section アドレス帳
@end ifset
@ifset us
@section Address Book
@end ifset
@kindex C-cC-a (Summary)
@kindex C-uC-cC-a (Summary)
@kindex C-cC-c (Addrbook)
@kindex C-cC-q (Addrbook)

@ifset jp
Mew ではアドレス帳("~/Mail/Addrbook")が利用できます。アドレス帳には 2 つ
の書式が用意されています。一方は「展開規則」を指定する書式、他方は「個人
情報」を記述するための書式です。
@end ifset
@ifset us
Mew provides an address book ("~/Mail/Addrbook). The address book has 2
formats. One specifies expansion rules, while the other defines personal
information.
@end ifset

@ifset jp
まず、「展開規則」を記述するための書式を示します。
@end ifset
@ifset us
First, let's look at the format that specifies expansion rules.
@end ifset

@example
<shortname>: <address1>[, <address2>, <address3>,...]
@end example

@ifset jp
このように短縮名と展開すべきアドレスを @samp{:} で区切って書きます。複数
のアドレスに展開する場合は、それらのアドレスを @samp{,} で区切ります。
(これは、To: などでアドレスが @samp{,} で区切られているのと同じです。)
@samp{,} の後ろに空白を入れても構いません。以下に例を示します。
@end ifset
@ifset us
In this way, you should specify a short name and a full address
separated by @samp{:}. If you want to expand the short name to multiple
addresses, you can delimit them with a comma @samp{,}. (This is exactly
same as addresses delimited by @samp{,} in the To: field, for instance.)
A space SPC is allowed after the comma @samp{,}. For example:
@end ifset

@example
pooh:           winnie-the-pooh@@100acre.woodwest.uk
piglet:         piglet@@beech.tree.uk
friends:        pooh, piglet
@end example



@ifset jp
次に、「個人情報」を記述するための書式を示します。
@end ifset
@ifset us
Next, the format to define personal information is shown below:
@end ifset

@example
<shortname> <address1>[, <address2>, <address3>,...] <nickname> <fullname>
@end example

@ifset jp
このように 4 つの要素を空白で区切ります。<shortname> が短縮名です。
<nickname> と <fullname> はそれぞれニックネームと正式な氏名であり、日本
語でも構いません。(ニックネームの使い方は @xref{summary-mode} と 
@xref{draft-mode} を参照して下さい。)
@end ifset
@ifset us
In this way, four elements are separated by SPC.<shortname> is a short
name. <nickname> and <fullname> are the person's nickname and full name,
respectively. (For proper usage of the nickname, please refer to
@xref{summary-mode} and/or @xref{draft-mode}.)
@end ifset

@ifset jp
2 番目の要素はアドレスです。複数のアドレスをその人が持っている場合は、
@samp{,} で区切って書きます。@samp{,} の後に空白を入れても構いません。つ
まり、この空白は要素の区切りではありません。また、@samp{"} で囲まれた空
白も要素の区切りにはなりません。以下に例を示します。
@end ifset
@ifset us
The second element is the addresses. If the person has multiple
addresses, delimit them using @samp{,}. SPC is allowed after @samp{,},
which means that it does not function as the delimiter. SPC surrounded
by quotes @samp{"} also has no delimiting function here. For example:
@end ifset

@example
kazu	kazu@@mew.org, kazu@@iijlab.net	Kazu-kun  "Kazuhiko Yamamoto"
@end example

@ifset jp
「個人情報」の書式では、各要素を省略できます。中間の要素を省略する場合は、
@samp{*} と書いて下さい。以下に、アドレスに対してニックネームのみを定義
する例を示します。
@end ifset
@ifset us
In the personal information format, you can omit any element. When you
want to omit an intermediate element, specify @samp{*}. The following is
an example to define nicknames for addresses.
@end ifset

@example
*	kazu@@mew.org, kazu@@iijlab.net	Kazu-kun
@end example

@ifset jp
ニックネームは Summary モードでのアドレスの置き換えと、Draft モードでの
引用記号の置き換え(@xref{cite})に利用されます。
@end ifset
@ifset us
The nickname is used to replace addresses in Summary mode and to replace
the citation prefix (@xref{cite}) in Draft mode.
@end ifset

@ifset jp
アドレス帳のコメント文字は @samp{;} と @samp{#} です。@samp{;} は行頭に
ある場合のみコメントとなり、その行が無視されます。@samp{#} は任意の場所
でコメントとなり、そこから行末までが無視されます。また、@samp{\} は継続
行を表わします。
@end ifset
@ifset us
The comment letters are @samp{;} and @samp{#}. @samp{;} is valid only
when it appears at the beginning of lines, resulting in the disregarding
of the entire line. The comment marker @samp{#} is valid everywhere. The
strings between @samp{#} and the end of the line are ignored. Also,
@samp{\} means a continuous line.
@end ifset



@ifset jp
Summary モードには、現在読んでいるメッセージの情報を Addrbook に登録す
る機能があります。展開規則を登録するには @samp{C-cC-a}と押して下さい。
以下に例を示します。
@end ifset
@ifset us
Summary mode includes the feature of directly registering the
information of the current message into Addrbook. To register a
expansion rule, type @samp{C-cC-a}.
@end ifset

@example
#If you want to register this entry, type 'C-c C-c'.
#If you want to NOT register this entry, type 'C-c C-q'.
Shortname: kazu
Addresses: kazu@@mew.org
Comments: 
@end example

@ifset jp
個人情報を登録するには @samp{C-uC-cC-a}と押して下さい。以下に例を示します。
@end ifset
@ifset us
To register personal information, type @samp{C-uC-cC-a}.
@end ifset

@example
#If you want to register this entry, type C-c C-c.
#If you want to NOT register this entry, type C-c C-q.
Shortname: kazu
Addresses: kazu@@mew.org
Nickname: 
Name: Kazuhiko Yamamoto
Comments: 
@end example

@ifset jp
必要であれば加筆訂正します。実際に登録するには @samp{C-cC-c}、登録を取り
止める場合は @samp{C-cC-q}と入力して下さい。@xref{Quit} も参照して下さい。
@end ifset
@ifset us
Add or modify the information if necessary. To register this
information, type @samp{C-cC-c}. To quit the registration, type
@samp{C-cC-q}. You should also refer to @xref{Quit}.
@end ifset

@ifset jp
なお、Addrbook に複数の言語の文字を使いたい場合は、以下の設定を Addrbook 
の先頭に記述して下さい。
@end ifset
@ifset us
If you want to use characters of multiple languages, put the following
onto the beginning of Addrbook.
@end ifset

@example
#-*-coding:ctext;-*-
@end example


@c %%%%%%%%%%%%%%%%%
@node auto-alias, addr-comp1, addrbook, Composing
@ifset jp
@section アドレスの自動学習
@end ifset
@ifset us
@section Learning addresses
@end ifset
@kindex Z (Summary)
@vindex mew-addrbook-override-by-newone
@vindex mew-lisp-max-length

@ifset jp
メッセージを送信した場合、To: と Cc: に書かれているアドレスは、自動的に
学習されます。以下の例を考えて下さい。
@end ifset
@ifset us
When you send a message, addresses on the To: and Cc: field are
automatically registered. Consider the following:
@end ifset

@example
To: kazu@@mew.org
@end example

@ifset jp
アドレスの補完(1)(@xref{addr-comp1})の場合：このメッセージを送信すると、
アドレス "kazu@@mew.org" に対し、短縮名 "kazu" が自動登録されます。ただ
し、すでに "kazu" という短縮名が自動登録されているなら、
@samp{mew-addrbook-override-by-newone} の値に応じて上書きするかを決定し
ます。@samp{nil} なら古い設定を残し、それ以外なら上書きします。展開の際
は、アドレス帳の方が優先されます。ですから、アドレス帳に無い短縮名のみ
が有効になります。
@end ifset
@ifset us
In the case of Address Completion(1)(@xref{addr-comp1}): When this
message is sent, a short name "kazu" is automatically registered for
the address "kazu@@mew.org". If there is already a short name of
"kazu", the next action is decided according to
@samp{mew-addrbook-override-by-newone}. If @samp{nil}, the old entry
remains. Otherwise, the new entry overrides the old one. When
expanded, the address book short name has priority over the automatic
short name. Only automatic short names which are not contained in the
address book are valid.
@end ifset

@ifset jp
アドレスの補完(2)(@xref{addr-comp2})の場合：このメッセージを送信すると、
アドレス "kazu@@mew.org" が自動登録されます。
@end ifset
@ifset us
In the case of Address Completion(1)(@xref{addr-comp2}): When this message
is sent, the address "kazu@@mew.org" is automatically registered.
@end ifset

@ifset jp
自動登録されるのは通常 2000 個(@samp{mew-lisp-max-length})のアドレスま
でです。それを越えて登録するとアルファベット順で最後の方が消えます。こ
れらの情報は Mew を終了する際に、"~/Mail/.mew-alias" に保存されます。
@end ifset
@ifset us
The limit number of automatic short names is 2000
(@samp{mew-lisp-max-length}). Once the number exceeds 2000, the tail
entries in the alphabetical order are removed. This information is
automatically saved to the file "~/Mail/.mew-alias".
@end ifset

@ifset jp
自動登録ですから、不要な短縮名も登録されます。不要な短縮名を削除するには、
以下のようにするといいでしょう。まず、@samp{M-a} を実行し、
"~/Mail/.mew-alias" を開きます。次に、テキストファイルを編集する要領で、
不要な短縮名を削除します。そして、@samp{C-xC-s} で保存して下さい。保存と
同時に、その内容が Mew に反映されます。
@end ifset
@ifset us
The automatic registration would register unnecessary short names.  If
you want to remove these entry, take the following steps. First, type
@samp{M-a} to open "~/Mail/.mew-alias". Then edit it as you do against a
text file. Lastly, type @samp{C-xC-s} to save it. When saving it, the
modifications are automatically reflected to Mew.
@end ifset

@ifset jp
アドレスの補完(1)とアドレスの補完(2)では、"~/Mail/.mew-alias" の書式が
異なります。@samp{mew-use-full-alias}の値を変え、方法を切り替えたら、
Summary モードで一回 @samp{Z} を押して下さい。これで、書式が変換されま
す。
@end ifset
@ifset us
The formats of Address Completion (1) and (2) are different. When you
change the value of @samp{mew-use-full-alias} to switch one to the
other, type @samp{Z} once in Summary mode. This converts the format
properly.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node addr-comp1, addr-comp2, auto-alias, Composing
@ifset jp
@section アドレスの補完(1)
@end ifset
@ifset us
@section Address Completion(1)
@end ifset

@ifset jp
アドレスの補完(1)では、アドレス帳の展開規則、アドレス帳の個人情報、
および送信時に学習されたアドレスで登録されたアドレスは、
ユーザ名(短縮名)が一意であることが前提となっています。
@end ifset
@ifset us
As far as Address Completion (2) is concerned, there is an assumption:
user names or short names of expansion rules, personal information and
learned addresses are unique.
@end ifset

@ifset jp
たとえば、以下のように「展開規則」を設定したとします。
@end ifset
@ifset us
For example, consider the following configuration of expansion rules:
@end ifset

@example
pooh:           winnie-the-pooh@@100acre.woodwest.uk
@end example

@ifset jp
Draft モードのヘッダ内で、かつ、アドレスを書くべきフィールド上で、しかも、
1 文字以上の文字列が前にある場所で @samp{TAB} を打つと、アドレスの短縮名
が補完されます。
@end ifset
@ifset us
When you are in a header in Draft mode, working within an address field,
after typing one or more characters, you can complete a short name for
an address by pressing the @samp{TAB} key.
@end ifset

@example
To: piglet@@beech.tree.uk, 
        po@samp{TAB}
@end example

@ifset jp
このように @samp{TAB} を押すと、(他に候補が無ければ) "pooh" まで補完され
ます。
@end ifset
@ifset us
If you press the @samp{TAB} key, "pooh" is completed (unless other
candidates exist).
@end ifset

@example
To: piglet@@beech.tree.uk, 
        pooh@samp{TAB}
@end example

@ifset jp
もう一度 @samp{TAB} を押すと "winnie-the-pooh@@100acre.woodwest.uk" に展
開されます。
@end ifset
@ifset us
One more press of the @samp{TAB} key expands the name to
"winnie-the-pooh@@100acre.woodwest.uk".
@end ifset

@example
To: piglet@@beech.tree.uk, 
        winnie-the-pooh@@100acre.woodwest.uk
@end example

@ifset jp
"@@"で終る文字列は強制的に展開します。たとえば、以下のように似たような 
短縮名があった場合を考えて下さい。
@end ifset
@ifset us
A string ending with "@@" is explicitly expanded. Please pay attention
to the following case where similar short names are defined.
@end ifset

@example
pooh:           winnie-the-pooh@@100acre.woodwest.uk
pooh-pooh:      pooh-pooh@@somewhere.jp
@end example

@ifset jp
"pooh-" まで入力すれば、"pooh-pooh" まで補完できることは明らかです。し
かし、"pooh" までだと、"pooh" を「展開」するのか、"pooh-pooh" まで補完
するのか分りません。"pooh" を "winnie-the-pooh@@100acre.woodwest.uk" に
強制的に展開するには、以下のように @samp{@@} を挿入し、@samp{TAB}を押し
ます。
@end ifset
@ifset us
It is obvious that "pooh-" is completed to "pooh-pooh". But if you
input "pooh", Mew cannot tell whether it should be expanded or
completed to "pooh-pooh". Thus, if you want to explicitly complete
"pooh" to "winnie-the-pooh@@100acre.woodwest.uk", insert @samp{@@} and
type @samp{TAB}.
@end ifset

@example
To: pooh@@@samp{TAB}
@end example

@ifset jp
強制展開は、@samp{@@}を挿入せず、@samp{M-C-e} を押しても実行できます。
@end ifset
@ifset us
Explicit expansion can be accomplished by @samp{M-C-e} instead of
insertion of @samp{@@}.
@end ifset

@ifset jp
上記の説明は、送信時に学習されたアドレスにもあてはまります。
@end ifset
@ifset us
The explanation above can be applied to learned addresses when
sending.
@end ifset

@ifset jp
「個人情報」の書式では、アドレスが順に置き換えられていきます。以下の例
を考えて下さい。
@end ifset
@ifset us
The format of personal information means that each subsequently
generated address will replace the former one. For example:
@end ifset

@example
kazu	kazu@@mew.org, kazu@@iijlab.net	Kazu-kun  "Kazuhiko Yamamoto"
@end example

@ifset jp
kazu がどう変化するのか見てみましょう。
@end ifset
@ifset us
Let's watch how it will be converted:
@end ifset

@example
To: kazu@samp{TAB}
@end example

@ifset jp
"kazu" の後で @samp{TAB} を打つと、"kazu@@mew.org" に置き換わります。
@end ifset
@ifset us
Typing @samp{TAB} after "kazu" generates "kazu@@mew.org".
@end ifset

@example
To: kazu@@mew.org@samp{TAB}
@end example

@ifset jp
次に "kazu@@mew.org" の後で @samp{TAB} を打つと、"kazu@@iijlab.net" に置
き換わります。
@end ifset
@ifset us
Typing @samp{TAB} after "kazu@@mew.org" brings about "kazu@@iijlab.net".
@end ifset

@example
To: kazu@@iijlab.net@samp{TAB}
@end example

@ifset jp
さらに "kazu@@iijlab.net" の後で @samp{TAB} を打つと、"kazu@@mew.org" に
戻ります。このように @samp{TAB} を押すと、アドレスが循環的に置換されます。
@end ifset
@ifset us
Then "kazu@@mew.org" will appear again if you type @samp{TAB} after
"kazu@@iijlab.net". In this way, each address is replaced one by one.
@end ifset

@ifset jp
アドレスを決定した後は、正式名称が付加できます。
@end ifset
@ifset us
After deciding an address, you can add its full name.
@end ifset

@example
To: kazu@@mew.org@samp{M-TAB}
@end example

@ifset jp
このように @samp{M-TAB} を押すと、以下のように正式名称が付加されます。
@end ifset
@ifset us
Like this, typing @samp{M-TAB} replace the address with the following
format.
@end ifset

@example
To: Kazuhiko Yamamoto <kazu@@mew.org>
@end example

@c %%%%%%%%%%%%%%%%%
@node addr-comp2, send, addr-comp1, Composing
@ifset jp
@section アドレスの補完(2)
@end ifset
@ifset us
@section Address Completion(2)
@end ifset

@ifset jp
アドレスの補完(2)では、学習されたアドレスに関しては、アドレス全体が補完
の対象になります。アドレス帳の展開規則は、短縮名が補完の対象になり、一
意に定まれば展開されます。アドレス帳の個人情報では、短縮名が補完の対象
になり、一意に定まれば、登録されている先頭のアドレスに展開されます。
@end ifset
@ifset us
As far as Address Completion(2) is concerned, for learned addresses
when sending, the entire addresses are completion targets. For
expansion rules in the address book, short names are completion
targets and unique short names are expanded to corresponding
addresses. For personal information in the address book, short names
are completion targets and unique short names are expanded to their
first addresses.
@end ifset

@ifset jp
Draft モードのヘッダ内で、かつ、アドレスを書くべきフィールド上で、しか
も、1 文字以上の文字列が前にある場所で @samp{TAB} を打つと、短縮名ある
いは学習されたアドレスが補完されます。
@end ifset
@ifset us
When you are in a header in Draft mode, working within an address
field, after typing one or more characters, you can complete a short
name or a learned address by pressing the @samp{TAB} key.
@end ifset

@ifset jp
kazu@@mew.org を学習しているとしましょう。
@end ifset
@ifset us
Suppose that kazu@@mew.org is already learned.
@end ifset

@example
To: ka@samp{TAB}
@end example

@ifset jp
曖昧でないところまで入力し、@samp{TAB}を押せば、アドレスが補完されます。
@end ifset
@ifset us
When you type some characters and press @samp{TAB}, its address is
completed:
@end ifset

@example
To: kazu@@mew.org
@end example

@ifset jp
さらに kazunori@@foo.bar を学習したとしましょう。kazu@@mew.org へ補完す
るには kazu@@ まで、kazunori@@foo.bar へ補完するには kazun まで入力する
必要があります。
@end ifset
@ifset us
Also suppose that "kazunori@@foo.bar" is learned. To expand a user
name to "kazu@@mew.org", you should input "kazu@@". To convert it to
"kazunori@@foo.bar", you need to input "kazun".
@end ifset

@ifset jp
展開規則と個人情報は、@samp{TAB} により、まず短縮名が補完されます。短縮
名が一意に定まれば、@samp{TAB} で展開できます。
@end ifset
@ifset us
For expansion rules and personal information, @samp{TAB} completes
short names first. You can expand a unique short name to corresponding
address with @samp{TAB}.
@end ifset

@ifset jp
たとえば、以下のように「展開規則」を設定したとします。
@end ifset
@ifset us
For example, consider the following configuration of expansion rules:
@end ifset

@example
pooh:           winnie-the-pooh@@100acre.woodwest.uk
@end example

@ifset jp
短縮名 "pooh" を補完してみましょう。
@end ifset
@ifset us
Let's complete "pooh":
@end ifset

@example
To: po@samp{TAB}
@end example

@ifset jp
このように @samp{TAB} を押すと、(他に候補が無ければ) "pooh" まで補完され
ます。
@end ifset
@ifset us
If you press the @samp{TAB} key, "pooh" is completed (unless other
candidates exist).
@end ifset

@example
To: pooh@samp{TAB}
@end example

@ifset jp
もう一度 @samp{TAB} を押すと "winnie-the-pooh@@100acre.woodwest.uk" に展
開されます。
@end ifset
@ifset us
One more press of the @samp{TAB} key expands the name to
"winnie-the-pooh@@100acre.woodwest.uk".
@end ifset

@example
To: winnie-the-pooh@@100acre.woodwest.uk
@end example

@ifset jp
問題は、短縮名が一意に定まらない場合の展開です。以下の展開規則を考えて
下さい。
@end ifset
@ifset us
A problem occurs when a short name is not unique. Consider the
following example:
@end ifset

@example
pooh:           winnie-the-pooh@@100acre.woodwest.uk
pooh-pooh:      pooh-pooh@@somewhere.jp
@end example

@ifset jp
"pooh-" まで入力すれば、"pooh-pooh" まで補完できることは明らかです。し
かし、"pooh" までだと、"pooh" を「展開」するのか、"pooh-pooh" まで補完
するのか分りません。"pooh" を "winnie-the-pooh@@100acre.woodwest.uk" に
強制的に展開するには、@samp{M-C-e} を利用します。(@samp{TAB} で強制展開
する方法はありません。)
@end ifset
@ifset us
It is obvious that "pooh-" is completed to "pooh-pooh". But if you
input "pooh", Mew cannot tell whether it should be expanded or
completed to "pooh-pooh". Thus, if you want to explicitly complete
"pooh" to "winnie-the-pooh@@100acre.woodwest.uk", type @samp{M-C-e}.
(There is no way to accomplish this with @samp{TAB}.)
@end ifset

@example
To: pooh@samp{M-C-e}
@end example

@ifset jp
この例は、以下のように強制展開されます。
@end ifset
@ifset us
This example is explicitly expanded as follows:
@end ifset

@example
To: winnie-the-pooh@@100acre.woodwest.uk
@end example


@c %%%%%%%%%%%%%%%%%
@node send, cite, addr-comp2, Composing
@ifset jp
@section メッセージの送信
@end ifset
@ifset us
@section Sending a message
@end ifset
@vindex mew-ask-subject
@vindex mew-ask-fcc
@kindex C-cC-m (Draft)
@kindex C-cC-c (Draft)
@kindex i (Summary)
@kindex C-cC-c (Summary)

@ifset jp
メッセージを書き上げ、いよいよ送信するには、以下の 2 つのコマンドのどち
らかを選んで下さい。
@end ifset
@ifset us
When you are ready to send a message after completing composition,
choose one of the following two commands.
@end ifset

@table @samp
@ifset jp
@item C-cC-m
メッセージを作成し +queue または +postq に入れ、送信待ち状態にする。
@item C-cC-c
メッセージを作成し送信する。"Really send this message? (y or n) " と訊か
れる。@samp{y} を押せば、送信される。
@end ifset
@ifset us
@item C-cC-m
Compose a message, put it into +queue or +postq, and leave it for later
sending.
@item C-cC-c
Compose a message and send it. You receive the prompt: "Really send this
message?  (y or n) ". Type @samp{y} to send it.
@end ifset
@end table

@ifset jp
メッセージが送信される際にどう加工されるか説明します。以下のようなメッセー
ジを考えて下さい。
@end ifset
@ifset us
Let's look at how a message is modified when sent. Please see the
following example:
@end ifset

@example
@ifset jp
To: pooh
Subject: 明日の日曜日
From: Piglet <piglet@@beech.tree.uk>
X-Mailer:@value{X-Mailer:}
----
明日の日曜日、遊びませんか？

// ピグレット
@end ifset
@ifset us
To: pooh
Subject: the next Sunday
From: Piglet <piglet@@beech.tree.uk>
X-Mailer:@value{X-Mailer:}
----
Would you like to play with me next Sunday?

// Piglet
@end ifset
@end example

@ifset jp
たとえば、@samp{C-cC-m} でこのメッセージを +queue あるいは +postq に入れ
ると、メッセージは以下のように加工されています。
@end ifset
@ifset us
This message is modified as follows, for example, if it is put into
+queue or +postq by @samp{C-cC-m}.
@end ifset

@example
@ifset jp
Date: Mon, 13 Mar 2000 19:49:50 +0900 (JST)
Message-Id: <20000313.194950.59499544.piglet@@beech.tree.uk>
To: winnie-the-pooh@@100acre.woodwest.uk
Subject: =?iso-2022-jp?B?GyRCTEBGfCRORnxNS0Z8GyhC?=
From: Piglet <piglet@@beech.tree.uk>
X-Mailer:@value{X-Mailer:}
Mime-Version: 1.0
Content-Type: Text/Plain; charset=iso-2022-jp
Content-Transfer-Encoding: 7bit

明日の日曜日、遊びませんか？

// ピグレット
@end ifset
@ifset us
Date: Mon, 13 Mar 2000 19:49:50 +0900 (JST)
Message-Id: <20000313.194950.59499544.piglet@@beech.tree.uk>
To: winnie-the-pooh@@100acre.woodwest.uk
Subject: the next Sunday
From: Piglet <piglet@@beech.tree.uk>
X-Mailer:@value{X-Mailer:}
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Would you like to play with me in the next Sunday?

// Piglet
@end ifset
@end example

@ifset jp
Date: や Message-Id: が付加されたのはお分かりになるでしょう。Subject: に
あった日本語は、配送に安全となるよう ASCII コードに変換されています。ま
た、本文のデータ型や文字コードが推測され、正しく付加されていることは特筆
すべきでしょう。
@end ifset
@ifset us
As you can see, Data: and Message-Id: are added. You should note that
both its data type and its character set are guessed correctly and
added.
@end ifset

@ifset jp
@samp{C-cC-m} や @samp{C-cC-c} でメッセージを作成するとき、ヘッダに不備
があった場合に注意を促してくれる機能があります。
@end ifset
@ifset us
When composing a message using @samp{C-cC-m} and @samp{C-cC-c}, you can
make use of a feature that identifies errors in a header.
@end ifset

@ifset jp
@samp{mew-ask-subject} を @samp{t} にしておけば、Subject: が空のときに値
を尋ねてくれます。空のままに為たい場合は単純に @samp{RET} を押して下さい。
この変数の初期値は @samp{nil} です。
@end ifset
@ifset us
Suppose you set @samp{mew-ask-subject} to @samp{t}. If Subject: is
empty, Mew asks you its value. If you want to leave it empty, just type
@samp{RET}. The default value of this variable is @samp{nil}.
@end ifset

@ifset jp
@samp{mew-ask-fcc} を @samp{t} にしておけば、Fcc: に存在しないフォルダが
指定してある場合、そのフォルダを作成するか尋ねてくれます。作るなら 
@samp{y}、作らないなら @samp{n} を押して下さい。@samp{n} を押すと、送信
が中止され、カーソルは草稿に戻ります。この変数の初期値は @samp{nil} です。
@end ifset
@ifset us
Suppose you set @samp{mew-ask-fcc} to @samp{t}. If there is a folder
that doesn't exist, Mew asks you whether or not you want to create it.
If you want to create it, type @samp{y}. Otherwise, type @samp{n}. If
you type @samp{n}, sending is aborted and the cursor returns to the
draft. The default value of this variable is @samp{nil}.
@end ifset

@ifset jp
+queue に溜ているメッセージを送信するには、以下の 2 つの方法があります。
どちらも Summary モードのコマンドであることに注意しましょう。
@end ifset
@ifset us
There are two ways to send messages waiting in +queue.  Please note that
both of these are commands in Summary mode.
@end ifset

@table @samp
@ifset jp
@item i
@samp{mew-auto-flush-queue} が @samp{t} の場合は、メッセージを受信した後
に、+queue にあるメッセージを送信する。ダイアルアップ環境において、接続
料金を節約する意味でも、送信のための認証という意味でも、これはよい方法。
@samp{mew-auto-flush-queue} の初期値は @samp{t}。
@item C-cC-c
+queue にあるメッセージを送信する。+queue に行って、できあがったメッセー
ジを見た後に、このコマンドを使うと便利。@samp{mew-ask-flush-queue} が 
@samp{t} なら、"Flush queue? (y or n) " と訊かれる。
@samp{mew-ask-flush-queue} の初期値は @samp{nil}。
@end ifset
@ifset us
@item i
If @samp{mew-auto-flush-queue} is @samp{t}, the messages being held in
+queue will be sent after the incoming messages have been received.
This method is appropriate for dial-up environments, since one can save
on connection fees and repeated authentication for sending.
@samp{mew-auto-flush-queue} is default to @samp{t}.
@item C-cC-c
Send messages in +queue. Method is appropriate if you like to preview
composed messages first in +queue and then send them. If
@samp{mew-ask-flush-queue} is @samp{t}, you are asked, Flush queue? (y
or n) ".  @samp{mew-ask-flush-queue} is default to @samp{nil}.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node cite, mime-comp, send, Composing
@ifset jp
@section シグニチャと引用
@end ifset
@ifset us
@section Signature and citation
@end ifset
@vindex mew-signature-file
@vindex mew-signature-as-lastpart
@vindex mew-signature-insert-last
@kindex C-cTAB (Draft)
@kindex C-cC-y (Draft)
@kindex C-cC-t (Draft)
@kindex C-cC-l (Draft)

@ifset jp
ここでは、本文のテキストを便利に処理するコマンドについて述べます。
@end ifset
@ifset us
Next is the explanation of the commands for processing the text in the
body of the message.
@end ifset

@ifset jp
まずシグニチャについてです。カーソルのある場所に "~/.signature" を挿入す
るコマンドは @samp{C-cTAB} です。シグニチャファイルは、
@samp{mew-signature-file} で設定できます。
@samp{mew-signature-as-lastpart} や @samp{mew-signature-insert-last} を
設定することで、@samp{C-cTAB} の動作をカスタマイズできます。
@end ifset
@ifset us
The first one is signature. To insert your signature file
("~/.signature") on the cursor point, type @samp{C-cTAB}. You can define
your own signature file to @samp{mew-signature-file}. Setting
@samp{mew-signature-as-lastpart} and @samp{mew-signature-insert-last},
you can customize the action of @samp{C-cTAB}.
@end ifset

@table @samp
@ifset jp
@item C-cTAB
カーソルの位置に "~/.signature" を挿入する。
@end ifset
@ifset us
@item C-cTAB
Insert "~/.signature" on the cursor point.
@end ifset
@end table

@ifset jp
次に引用についてです。Summary モードの @samp{a} や @samp{A} を使ってメッ
セージに返答するための草稿を用意すると、Emacs が3分割されます。上が現在
の Summary モード、中が Message モード、下が Draft モードです。
@end ifset
@ifset us
The next one is citation. If you use @samp{a} or @samp{A} in Summary
mode, a draft for reply is opened up and Emacs is split into three
windows. The top is Summary mode, the middle is Message mode, and the
bottom is Draft mode.
@end ifset

@ifset jp
Message モードのテキストを引用するコマンドを以下に示します。
@end ifset
@ifset us
Here are the commands for citing text from Message mode to Draft mode.
@end ifset

@table @samp
@ifset jp
@item C-cC-y
Message モードからメッセージの一部をコピーし、引用ラベルと引用記号付で貼
り付ける。
@enumerate
@item
おおまかにいえば、Message モードの本文がコピーされる。たとえば、
Text/Plain が表示されていると、Message モード全体がコピーされる。
Message/Rfc822 が表示されている場合は、ヘッダを除いた本文がコピーされる。
@item
@samp{C-uC-cC-y} では、ヘッダがあればヘッダをコピーする。
@item
Emacs のマークがあると、そのマークとカーソルの間が対象となる。
@end enumerate
@item C-cC-t
Message モードからメッセージの一部をコピーし、引用ラベルと引用記号なしで
貼り付ける。
@end ifset
@ifset us
@item C-cC-y
Copy and paste a part of a message from Message mode WITH citation
prefix and label.
@enumerate
@item
Roughly speaking, it copies the body in Message mode. For example, if
Text/Plain is displayed, the entire Message mode is copied. If
Message/Rfc822 is displayed, the body without the header is copied.
@item
If you type @samp{C-uC-cC-y}, the header is also copied if exists.
@item
If an Emacs mark exists, the target is the region between the mark and
the cursor.
@end enumerate
@item C-cC-t
Copy and paste a part of the message from Message mode WITHOUT citation
prefix and label.
@end ifset
@end table

@ifset jp
デフォルトの引用ラベルと引用記号は以下のようになります。
@end ifset
@ifset us
The default label and prefix is as follows:
@end ifset

@example
@ifset jp
From: SUMIKAWA Munechika <sumikawa@@ebina.hitachi.co.jp>
Subject: Wine
Date: Wed, 23 Jul 1997 11:40:50 +0900

> おはようからおやすみまでニートでおなじみの角川です。
> 
> さて、とろけるワイン作戦ですが、定石通り '90 のボルドーの
> カベルネ・ソービニョンを狙いたいと思います。
@end ifset
@ifset us
From: SUMIKAWA Munechika <sumikawa@@ebina.hitachi.co.jp>
Subject: Wine
Date: Wed, 23 Jul 1997 11:40:50 +0900

> Hi, it's Sumikawa, the guy who's neat from good morning 
> to good night.
>
> Talking about the wonderful wine party, I would propose 
> Cabernet Sauvignon, Bordeaux, '90. 
@end ifset
@end example

@ifset jp
Draft モードでは Message モードに表示されているものならなんでも引用でき
ます。つまり、複数のメッセージを簡単に引用できるのです。引用したいメッセー
ジを表示させて、本文を引用する手順を、引用したいメッセージの回数だけ繰り
返して下さい。そのための3分割です。
@end ifset
@ifset us
In Draft mode, you can cite any text displayed in Message mode. So, you
can cite text from multiple messages easily. Select a message in Summary
mode and display it in Message mode, then cite it in Draft mode. Please
repeat this procedure as you like. Triple windows are opened for this
purpose.
@end ifset


@ifset jp
本文やヘッダの色付けがおかしくなった場合、@samp{C-cC-l} を実行することで、
色付けをやり直すことができます。
@end ifset
@ifset us
When highlighting gets wrong, type @samp{C-cC-l} to re-highlight both
the header and the body
@end ifset

@c %%%%%%%%%%%%%%%%%
@node mime-comp, charset-guess, cite, Composing
@ifset jp
@section マルチパートの作成
@end ifset
@ifset us
@section Composing multipart
@end ifset
@kindex C-cC-a (Draft)
@kindex C-p (Attach)
@kindex C-n (Attach)
@kindex C-f (Attach)
@kindex C-b (Attach)
@kindex c (Attach)
@kindex i (Attach)
@kindex d (Attach)
@kindex m (Attach)
@kindex f (Attach)
@kindex F (Attach)
@kindex y (Attach)
@kindex e (Attach)
@kindex a (Attach)
@kindex p (Attach)
@kindex D (Attach)
@kindex T (Attach)
@kindex t (Attach)
@kindex C (Attach)
@kindex P (Attach)

@ifset jp
さて、ここでマルチパートの作り方を披露しましょう。
@end ifset
@ifset us
Now let's see how to create multipart messages.
@end ifset

@ifset jp
たとえば、+draft/1 でメッセージを書いているときに、@samp{C-cC-a} と入力
すると、草稿の一番下に
@end ifset
@ifset us
When you are writing a message in +draft/1 and type @samp{C-cC-a}, the
following lines are inserted at the bottom of the draft.
@end ifset

@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/     
     1  Text/Plain(guess)                                       CoverPage*
     2                                                          .   
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example

@ifset jp
という行が挿入されます。"1/" はマルチパートを構築するための一時的なディ
レクトリで、実体は "~/Mail/attach/1" です。パート 1 の CoverPage は本
文を意味します。ここで Draft モードは次のようになっているでしょう。
@end ifset
@ifset us
"1/" is a temporary directory to create multipart and provides a
location for "~/Mail/attach/1". The part 1, "CoverPage", refers to the
body. Now the entire draft looks like:
@end ifset

@example
@ifset jp
To: mew-dist
Subject: ここがヘッダ
From: Kazu Yamamoto <Kazu@@Mew.org> 
X-Mailer:@value{X-Mailer:}
----
本文だよ。

----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/     
     1  Text/Plain(guess)                                       CoverPage*
     2                                                          .   
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end ifset
@ifset us
To: mew-dist
Subject: This is header
X-Mailer:@value{X-Mailer:}
----
This is the body.

----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/     
     1  Text/Plain(guess)                                       CoverPage*
     2                                                          .   
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end ifset
@end example

@ifset jp
3つの領域を以下のように呼ぶことにします。
@end ifset
@ifset us
Here we designate three regions as follows:
@end ifset

@itemize @bullet
@ifset jp
@item
"----" より上を 「ヘッダ」
@item
"----" から "attachments" までを「本文」
@item
"attachments" より下を「添付領域」
@end ifset
@ifset us
@item
the region above "----" @samp{header}
@item
the region from "----" to "attachments" @samp{body}
@item
the region below "attachments" @samp{attachments}
@end ifset
@end itemize

@ifset jp
Draft モードでは、リージョンによってキー割当が違います。
@end ifset
@ifset us
In Draft mode, the key bindings differ according to the region.
@end ifset

@ifset jp
たとえば、@samp{TAB} は以下のようになります。
@end ifset
@ifset us
To @samp{TAB}, for instance, the following functions are assigned:
@end ifset

@table @asis
@ifset jp
@item ヘッダ
さまざまな補完。
@item 本文
TAB の挿入。
@item 添付領域
なにもしない。
@end ifset
@ifset us
@item header
Completions.
@item body
Insert TAB.
@item attachments
Do nothing.
@end ifset
@end table

@ifset jp
@samp{c} だと以下のようになります。
@end ifset
@ifset us
To @samp{c}, functions are assigned as follows:
@end ifset

@table @asis
@ifset jp
@item ヘッダ
c を挿入。
@item 本文
c を挿入。
@item 添付領域
ファイルのコピー。
@end ifset
@ifset us
@item header
Insert c.
@item body
Insert c.
@item attachments
Copy a file.
@end ifset
@end table

@ifset jp
以下、添付領域でのキー割当です。
@end ifset
@ifset us
The following is a summary of commands in the attachments region.
@end ifset

@table @samp
@ifset jp
@item C-p
現在のディレクトリの前のファイルへ移動。
@item C-n
現在のディレクトリの後のファイルへ移動。
@item C-f
1 番目のサブディレクトリに移動。
@item C-b
親ディレクトリに移動。
@item c
ファイルのコピー。"." 上で有効。ネットワーク経由でも可。リモートのファイ
ルをコピーする場合は、"/[user@@]hostname:/filepath"の形式でファイルを指
定。
@item l
ファイルへシンボッリクリンクを張る。"." 上で有効。添付ファイルを 
@samp{f} を使って読み込んで編集する場合は、実体を編集してしまわないよう
に、@samp{l} ではなく @samp{c} でコピーすべき。
@item d
ファイルとディレクトリの消去。
@item m
サブディレクトリ(つまりマルチパート)の作成。"." 上で有効。
@item f
ファイルをバッファに読み込む。
@item F
新規ファイルをバッファに読み込む。"." 上で有効。
@item y
Message モードに表示されているメッセージにリンクを張る。"." 上で有効。
@item e
external-body の入力。"." 上で有効。
@item a
音をサンプリングしオーディオファイルとして挿入。"." 上で有効。
@item p
入力されたユーザの PGP 公開鍵を取り出す。"." 上で有効。
@item D
ちょっとした説明(Content-Description:)の入力。
@item T
データ型(Content-Type:)の変更。
@item t
データ型に関し、テキストとバイナリを反転させる。
@item I
Text/* 型の入力 coding-system を指定する。
@item C
Text/* 型の出力 coding-system を指定する。
@item P
受信側でこのパートを保存する際のファイル名(Content-Disposition:)の変更。
ファイル名の入力の際に、単に @samp{RET}を押すと値が消える。そして、送信
側のファイル名が @samp{*} と共に表示される。
@end ifset
@ifset us
@item C-p
Go to the previous file in the current directory.
@item C-n
Go to the next file in the current directory.
@item C-f
Go to the first subdirectory.
@item C-b
Go to the parent directory.
@item c
Copy a file (possibly via networks) on ".". To copy a remote file, use
the "/[user@@]hostname:/filepath" syntax.
@item l
Link a file with a symbolic link on ".". If you want to edit the
attached file, you should @samp{c} instead of @samp{l} so that you do not
edit the original file.
@item d
Delete this file or this directory.
@item m
Create a subdirectory (i.e. multipart) on ".".
@item f
Open this file into a buffer.
@item F
Open a new file into a buffer on ".".
@item y
Link the message which is displayed in Message mode on ".".
@item e
Input external-body on ".".
@item a
Sampling voice and insert as audio file on ".".
@item p
Extract the PGP key for the inputted user on ".".
@item D
Input a description (Content-Description:).
@item T
Change the data type (Content-Type:).
@item t
Toggle text and binary for the data type.
@item I
Specify input coding-system for a Text/* object.
@item C
Specify output coding-system for a Text/* object.
@item P
Specify a file name (Content-Disposition:) to save this part in the
receiver side. If you type just @samp{RET} without any string, its value
is cleared. Then the file name in the sender side is displayed with
@samp{*}.
@end ifset
@end table

@ifset jp
添付領域では、ファイルの拡張子によってデータを取り扱います。現在サポート
している拡張子は以下の通りです。
@end ifset
@ifset us
In attachments, data types are guessed by suffix. The currently
supported suffixes are as follows:
@end ifset

@example
.txt       Text/Plain
.html      Text/Html
.rtf       Text/Enriched
.css       Text/Css
.sgml      Text/Sgml
[0-9]+     Message/Rfc822
.ps        Application/Postscript
.pdf       Application/Pdf
.xml       Application/Xml
.doc       Application/Msword
.xls       Application/Vnd.Ms-Execl
.ppt       Application/Vnd.Ms-Powerpoint
.tar|.tar.|.gz|.Z|.taz|.tgz|.bz2?|.lzh|.zip|.bin|.pgp|.gpg|.exe|.dll
           Application/Octet-Stream
.gif       Image/Gif
.tiff      Image/Tiff
.jpe?g     Image/Jpeg
.png       Image/Png
.xwd       Image/X-Xwd
.xbm       Image/X-Xbm
.xpm       Image/X-Xpm
.bmp       Image/X-Bmp
.pcx       Image/X-Pcx
.tga       Image/X-Tga
.au        Audio/Basic
.wav       Audio/X-Wav
.aif?f     Auido/X-Aiff
.midi?     Auido/X-Midi
.mpga|.mp[23]  Audio/X-Mpeg
.mpe?g     Video/Mpeg
.mov       Video/Quicktime
.avi       Video/X-Msvideo
@end example

@ifset jp
コピーするときのファイル名は、適切なデータ型を推測できるよう拡張子に気を
付ければなんでもよいです。もし、該当する拡張子がない場合、
@samp{mew-content-type} で指定されるデータ型が選ばれます。デフォルトは、
Text/Plain(テキスト)です。
@end ifset
@ifset us
Please choose an appropriate suffix for the file name so that Mew can
guess its data type. If there is no matched suffix, the data type
specified by @samp{mew-content-type} is chosen. Its default value is
Text/Plain.
@end ifset


@ifset jp
@samp{c} でファイルをコピーすると、たとえば次のようになります。
@end ifset
@ifset us
For instance, if you copy files with @samp{c}, the part becomes as
follows:
@end ifset

@ifset jp
@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/     
     1  Text/Plain(guess)                                       CoverPage*
B    2  Image/Gif                    MagicPoint のロゴ          mgp.gif
Q    3  Application/Postscript       資料                       ohp.ps
     4                                                          .
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example
@end ifset
@ifset us
@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/   
     1  Text/Plain(guess)                                       CoverPage*
B    2  Image/Gif                    MagicPoint logo            mgp.gif
Q    3  Application/Postscript       Presentation Material      ohp.ps
     4                                                          .
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example
@end ifset

@ifset jp
各行は、

@itemize @minus
@item
マーク (Content-Transfer-Encoding:)
@item
パート番号
@item
データ型 (Content-Type:)
@item
説明 (Content-Description:)
@item
ファイル名 (Content-Disposition:)
@end itemize

から構成されています。
@end ifset
@ifset us
Each line of a multipart message consists of 

@itemize @minus
@item
marks (Content-Transfer-Encoding:)
@item
part number
@item
data type (Content-Type:)
@item
description (Content-Description:)
@item
file name (Content-Disposition:).
@end itemize
@end ifset

@ifset jp
データ型(Content-Type:)は @samp{T} によって変えられます。データ型がテキ
スト(Text/Plain)かバイナリ(Application/Octet-Stream)の場合は、@samp{t} 
によって一方を他方へ反転できます。
@end ifset
@ifset us
You can change data types (Content-Type:) by pressing @samp{T} at any
time. If the data type is either text (Text/Plain) or binary
(Application/Octet-Stream), you can toggle between them using @samp{t}.
@end ifset

@ifset jp
マーク(Content-Transfer-Encoding:)を変更する方法は、@xref{mark-b-comp} 
を参照して下さい。説明(Content-Description:)は @samp{D} で入力できます。
この説明のカラムは、@xref{mark-b-comp} で説明する暗号化の際に上書きされ
ます。
@end ifset
@ifset us
Please refer to @xref{mark-b-comp} for explanation on changing the mark
(Content-Transfer-Encoding:).You can also insert descriptions
(Content-Description:) by @samp{D}. This description column is
overwritten when encrypted as described in @xref{mark-b-comp}.
@end ifset

@ifset jp
第5カラムに表示されるのは、実際にはコピーしたファイル名か 
Content-Disposition:、つまり、受信者がそのパートを保存する際のファイル
名です。Content-Disposition: の値があれば、それが表示されます。なけれ
ば、コピーしたファイル名に @samp{*} を付加して表示します。ファイルをコ
ピーした際の Content-Disposition: の値は、コピーしたファイル名が指定さ
れています。ただし、Message/* と Multipart/* には Content-Disposition: 
は設定されません。Message/* の Content-Disposition: を指定するには、
@samp{P} を利用して下さい。
@end ifset
@ifset us
Strictly speaking, the fifth column is the copied file name or the
value of Content-Disposition:, namely the file name to which the
receiver saves the part. If Content-Disposition: exists, Mew displays
it. Otherwise, Mew displays the copied file name with @samp{*}
appended.  When you copy a file, the file name is specified as
Content-Disposition:. But this is not true for both Message/* and
Multipart/*. To specify Content-Disposition: for Message/*, use
@samp{P}.
@end ifset

@ifset jp
ファイルはシングルパートに、ディレクトリはマルチパートに対応します。で
すから、ファイル構造を作っていく感覚で複雑なマルチパートを作成できます。
簡単でしょ？
@end ifset
@ifset us
Files are treated as singlepart while directories are treated as being
multipart. Therefore you can create very complex multipart MIME messages
in the same way as you would create a file system. Very easy, isn't it?
@end ifset

@ifset jp
ディレクトリのデフォルトのデータ型は一般的なマルチパート
(Multipart/Mixed)です。これも @samp{T} によって変更できます。
@end ifset
@ifset us
The default data type for directories is Multipart/Mixed. Of course, you
can change it by pressing @samp{T}.
@end ifset

@ifset jp
お好みのマルチパートが作成できたら、前節で述べたように @samp{C-cC-m} か
@samp{C-cC-c} を利用してメッセージを送信して下さい。
@end ifset
@ifset us
Once you are ready to send a multipart message, type @samp{C-cC-m} or
@samp{C-c C-c} to send it as described the previous subsection.
@end ifset

@ifset jp
パートの実体が外部にある external-body を作成するコマンド@samp{e} につい
て説明しましょう。access-type に ftp か anon-ftp を入力するときは、
ange-ftp のおかげでリモートのファイル名が補完できます。access-type が
local-file の場合は、もちろんファイル名を補完できます。
@end ifset
@ifset us
Next is the explanation of the creation of a Message/External-body by
pressing @samp{e}. If the access-type is "ftp" or "anon-ftp", you can
take advantage of remote filename completion due to the existence of the
native Emacs mode of ange-ftp. Of course file completion is available
for the access-type of "local-file".
@end ifset

@ifset jp
もし、マルチパートの作成途中でやっぱりシングルパートに戻したくなったら、
一番上のマルチパート部分で @samp{d} を押して下さい。
@end ifset
@ifset us
If you want to abort creating multipart and to get back to singlepart,
type @samp{d} in the top level of the multipart message.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node charset-guess, reply, mime-comp, Composing
@ifset jp
@section 文字コードの決定
@end ifset
@ifset us
@section Defining charset
@end ifset
@kindex I (Attach)
@kindex C (Attach)
@kindex C-x RET l

@ifset jp
Mew はシングルパートとマルチパートの両方に対し、配送時の文字コードを決定
する機能を持っています。
@end ifset
@ifset us
Mew has a mechanism for determining the character set of the transfer
form for both singlepart and multipart.
@end ifset

@ifset jp
<シングルパート>
@end ifset
@ifset us
<Singlepart> 
@end ifset

@ifset jp
Draft モードで @samp{C-cC-m} や @samp{C-cC-c} と入力しメッセージを作成す
ると、Mew は本文の内部表現から配送時の文字コードを決定します。バイリンガ
ル Emacs では、7ビットの文字コードに対し US-ASCII を選び、8 ビットの文字
コードに対し ISO-8859-1 を選択します。国際化 Emacs では、内部表現から 
Mew が定めた規則に従って、配送時の文字コードを決定します。
@end ifset
@ifset us
When you type @samp{C-cC-m} or @samp{C-cC-c} to compose a message in
Draft mode, Mew decides the character set of the transfer based on the
internal representation of its body. On Bilingual Emacs, US-ASCII is
chosen for 7bit character sets while ISO-8859-1 is selected for 8bit
character sets. On Internationalized Emacs, the character set of the
transfer form is chosen based on rules defined by Mew.
@end ifset

@ifset jp
<マルチパート>
@end ifset
@ifset us
<Multipart> 
@end ifset

@ifset jp
マルチパートの一部として添付するデータは、ファイルですからディスク上に存
在します。そこで、メッセージの作成の際に、配送時の文字コードを決定するた
めには、まず Emacs のバッファに取り込み、内部表現に直す必要があります。
内部表現に直した後は、シングルパートと同様の方法で、配送時の文字コードを
決定します。
@end ifset
@ifset us
Since the data to be attached as a part of multipart is a file, it is
stored on disk. Therefore, in order to determine its character set for
the transfer form, it is necessary to load the file into an Emacs buffer
converting it into internal representation. After that, Mew determines
the character set of the transfer form for the file by the same method
as singlepart.
@end ifset

@ifset jp
バイリンガル Emacs では、Mew はファイルをそのままの形式で読み込みます。
ですから、7ビットのファイルには US-ASCII が、8ビットのファイルには 
ISO-8859-1 が選ばれます。
@end ifset
@ifset us
On Bilingual Emacs, Mew reads a file as is. So if the file is 7bit,
US-ASCII is chosen. Otherwise ISO-8859-1 is selected.
@end ifset

@ifset jp
国際化 Emacs では、Mew は環境(つまり auto conversion)に従って、文字コー
ドを推測しながらファイルを読み込みます。国際化 Emacs でこの環境を決定す
るコマンドは、@samp{C-x RET l} です。
@end ifset
@ifset us
On Internationalized Emacs, Mew reads a file according to the local
convention (i.e. auto conversion). The command to set a local convention
is @samp{C-x RET l}.
@end ifset

@ifset jp
たとえば、日本語の環境では、国際化 Emacs は ISO-2022-JP、EUC-JP、そして、
Shift_JIS を見事に推測し、日本語用の内部表現に変換してバッファに格納しま
す。Mew はこの内部表現から、配送時の文字コードとして ISO-2022-JP を選択
します。つまり、ファイルの文字コードが EUC-JP や Shift-JIS であっても、
配送用の ISO-2022-JP に自動的に変換されます。そこでユーザは、添付するファ
イルの文字コードを気にすることなしに、ファイルを添付可能です。
@end ifset
@ifset us
For example, in Japan, ISO-2022-JP, EUC-JP, and Shift_JIS is readily
guessed and stored in buffer as internal representations for
Japanese. Mew chooses ISO-2022-JP as the character set of the transfer
form from the internal representation. That is, even if the character
set of the file is EUC-JP or Shift_JIS, it is automatically converted
into ISO-2022-JP, which is the transfer form for Japanese. This means
that you can attach a file without needing to pay attention to its
character set.
@end ifset

@ifset jp
もし、ディスク上のファイルの coding-system を明示的に指定したいなら
@samp{I} を使って下さい。これを入力文字コードと呼ぶことにします。また、
配送時の coding-system を明示的に指示したいなら、@samp{C} を利用して下
さい。
@end ifset
@ifset us
If you want to specify the coding-system of a file to be attached, type
@samp{I}. Let's call the character set "input character set". Also, if
you want to specify the coding-system of the transfer form, use
@samp{C}.
@end ifset

@ifset jp
文字コードの情報は、添付領域において、丸括弧の内側に表示されます。もし、
配送時の文字コードが明示的に指定されていれば、それが表示されます。そうで
なくて、入力文字コードが明示的に指定されていれば、それが "*" と共に表示
されます。そうでなければ、"guess" と表示されます。
@end ifset
@ifset us
Information regarding the character set is displayed in parentheses.  If
the character set of the transfer form is specified explicitly, it is
displayed. Otherwise, if the input character set is specified, it is
displayed with "*".  Otherwise, "guess" is displayed.
@end ifset

@ifset jp
以下の例の見て下さい。パート1は、本文ですからあらかじめバッファ内にあり
ます。"guess" と表示されていますから、配送時の文字コードを Mew が定めた
規則に従って決定します。
@end ifset
@ifset us
Let's look at the following example. Since part 1 is a body, it is
stored in an Emacs buffer. Because "guess" is displayed, it is Mew that
determines the character set of the transfer form according to the rules
that Mew defines.
@end ifset

@ifset jp
パート2は、入力文字コードとして iso-8859-1 が指定されていますので、ファ
イルの文字コードを iso-8859-1 であるとして読み込み、内部表現に変換します。
配送時の文字コードは Mew が定めた規則に従って決定します。
@end ifset
@ifset us
Since iso-8859-1 is specified as the input character set, Mew loads the
file considering that its character set is iso-8859-1, and then converts
it into internal representation. The character set of the transfer form
is decided according to rules defined by Mew.
@end ifset

@ifset jp
パート 3 の入力文字コードは、この例だけからだと明示的に指定されているか
分かりません。(しかし、ユーザ自身はは実際に指定したか分かっているはずで
す。) とにかく、ファイルは内部表現に直され、配送時の文字コードに指定され
ている EUC-JP に変換されます。
@end ifset
@ifset us
The input character set in part 3 cannot be identified just from this
example. (But a user certainly knows what it is since he actually
specified it.) In any case, a file will be loaded and be converted into
internal representation, then be converted into EUC-JP which is
specified as the character set of the transfer form.
@end ifset

@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/     
     1  Text/Plain(guess)                                       CoverPage*
     2  Text/Plain(*iso-8859-1)                                 text1
B    3  Text/Plain(euc-jp)                                      text2
     4                                                          .    
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example

@ifset jp
バイリンガル Emacs では @samp{C} と @samp{I} は利用できません。
@end ifset
@ifset us
Note that both @samp{C} and @samp{I} are not available on Bilingual
Emacs.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node reply, forward, charset-guess, Composing
@ifset jp
@section メッセージへの返答と宛先の決定
@end ifset
@ifset us
@section Replying to a message and deciding recipients
@end ifset
@vindex mew-mail-address-list
@vindex mew-reply-all-alist
@vindex mew-reply-sender-alist
@vindex mew-reply-fromme-alist
@kindex a (Summary)
@kindex A (Summary)
@kindex C-ua (Summary)
@kindex C-uA (Summary)

@ifset jp
新規にメッセージを書く場合は、To:、Cc:、および Newsgroups: を自分で書く
ことになります。一方 Summary モードで @samp{a} や @samp{A} を使って、あ
るメッセージに返答しようとすると、To:、Cc:、Newsgroups: は自動的に用意さ
れます。
@end ifset
@ifset us
As distinguished from the case of a new message, where the writer
specifies the addresses of the To:, Cc: or Newsgroups: fields, in a
reply message addresses are automatically generated.
@end ifset

@ifset jp
Summary モードで @samp{a} や @samp{A} を使うと、新しい草稿がDraft mode 
に用意されます。To:、Cc:、Newsgroups: の値は、以下の三つの alist に従っ
て用意されます。
@end ifset
@ifset us
When @samp{a} and @samp{A} is used in Summary mode, a new draft is
prepared in Draft mode. Values of To:, Cc:, and Newsgroups: are prepared
according to three alists.
@end ifset

@enumerate
@ifset jp
@item
もし @samp{C-u} 付きで呼び出された場合、送信者/投稿者のみに返答する。こ
の場合、@samp{mew-reply-sender-alist} が利用される。
@item
もし対象が自分自身で送ったメッセージなら、そのヘッダを加工せずに返答した
いのであろう。この場合、@samp{mew-reply-fromme-alist} が利用される。
@item
そうでなければ、すべての人に返答する。この場合、
@samp{mew-reply-all-alist} が利用される。
@end ifset
@ifset us
@item
If called with @samp{C-u}, replying to the sender/poster only. In this
case, @samp{mew-reply-sender-alist} is used.
@item
If this message is sent by ME, you probably intend to reply with the
original header. In this case, @samp{mew-reply-fromme-alist} is used.
@item
Otherwise, replying to all people listed. In this case,
@samp{mew-reply-all-alist} is used.
@end ifset
@end enumerate

@ifset jp
@samp{mew-reply-sender-alist} の初期値は以下の通りです。
@end ifset
@ifset us
The default value of @samp{mew-reply-sender-alist} is as follows:
@end ifset

@lisp
'(("Reply-To:"
   ("To:" "Reply-To:" "From:"))
  (t
   ("To:" "From:")))
@end lisp

@ifset jp
これは、次のように解釈します。
@end ifset
@ifset us
This is read as follows:
@end ifset

@enumerate
@ifset jp
@item
Reply-To: が存在すれば、Reply-To: と From: の値を新しい To: へコピーする。
@item
そうでなければ、From: の値を新しい To: へコピーする。
@end ifset
@ifset us
@item
If Reply-To: exists, copy the values of Reply-To: and From: to new To:.
@item
Otherwise, copy the value of From: to To:.
@end ifset
@end enumerate

@ifset jp
もし、Reply-To: で指定されたアドレスのみに返答したい場合は、
@samp{mew-reply-sender-alist} を以下のように設定するとよいでしょう。
@end ifset
@ifset us
If you would like to reply only to the address on Reply-To: (if any),
set @samp{mew-reply-sender-alist} like this:
@end ifset

@lisp
(setq mew-reply-sender-alist
      '(("Reply-To:"
         ("To:" "Reply-To:"))
        (t
         ("To:" "From:"))))
@end lisp

@ifset jp
@samp{mew-reply-fromme-alist} の初期値は以下の通りです。
@end ifset
@ifset us
The default value of @samp{mew-reply-fromme-alist} is as follows:
@end ifset

@lisp
'((t
   ("To:" "To:")
   ("Cc:" "Cc:")
   ("Newsgroups:" "Newsgroups:"))))
@end lisp

@ifset jp
これは、次のように解釈します。
@end ifset
@ifset us
This is read as follows:
@end ifset

@enumerate
@ifset jp
To: の値を新しい To: へ、
Cc: の値を新しい Cc: へ、
Newsgroups: の値を新しい Newsgroups: へコピーする。
@end ifset
@ifset us
@item
Copying the value of To: to new To: and 
copying the value of Cc: to new Cc: and
copying the value of Newsgroups: to new Newsgroups:.
@end ifset
@end enumerate

@ifset jp
@samp{mew-reply-all-alist} の初期値は以下の通りです。
@end ifset
@ifset us
The default value of @samp{mew-reply-all-alist} is as follows:
@end ifset

@lisp
'((("Followup-To:" "poster")
   ("To:" "From:"))
  ("Followup-To:"
   ("Newsgroups:" "Followup-To:" "Newsgroups:"))
  ("Newsgroups:"
   ("Newsgroups:" "Newsgroups:"))
  ("Reply-To:"
   ("To:" "Reply-To:" "From:")
   ("Cc:" "To:" "Cc:" "Apparently-To:"))
  (t
   ("To:" "From:")
   ("Cc:" "To:" "Cc:" "Apparently-To:")))
@end lisp

@ifset jp
これは、次のように解釈します。
@end ifset
@ifset us
This is read as follows:
@end ifset

@enumerate
@ifset jp
@item
Follwup-To: の値が "poster" であれば、From: の値を新しい To: へコピーす
る。
@item
Follwup-To: が存在すれば、Follwup-To: と Newsgroups: の値を新しい
Newsgroups: へコピーする。
@item
Newsgroups: が存在すれば、Newsgroups: の値を新しい Newsgroups: へコピー
する。
@item
Reply-To: が存在すれば、Reply-To: と From: の値を新しい To: へコピーする。
また、To:、Cc:、Apparently-To: の値を新しい Cc: へコピーする。
@item
そうでなければ、From: の値を新しい To: へコピーする。また、To:、Cc:、
Apparently-To: の値を新しい Cc: へコピーする。
@end ifset
@ifset us
@item
If the value of Followup-To: is "poster", copying the value of From: to
new To:.
@item
If Followup-To: exists, copying the values of Followup-To: and
Newsgroups: to new Newsgroups:.
@item
If Newsgroups: exists, copying the value of Newsgroups: to Newsgroups:.
@item
If Reply-To: exists, copying the values of Reply-To: and From: to new
To:. And copying the values of To:, Cc: and Apparently-To: to new Cc:.
@item
Otherwise, copying the value of From: to new To:. And copying the values
of To:, Cc: and Apparently-To: to new Cc:.
@end ifset
@end enumerate

@ifset jp
@samp{mew-reply-all-alist} を以下のように設定したいと思う人もいるかもし
れません。
@end ifset
@ifset us
You may want to set @samp{mew-reply-all-alist} like this:
@end ifset

@lisp
(setq mew-reply-all-alist
      '((("Followup-To:" "poster")
         ("To:" "From:"))
        ("Followup-To:"
         ("Newsgroups:" "Followup-To:"))
        ("Newsgroups:"
         ("Newsgroups:" "Newsgroups:"))
        ("Reply-To:"
         ("To:" "Reply-To:"))
        (t
         ("To:" "From:")
         ("Cc:" "To:" "Cc:" "Apparently-To:"))))
@end lisp

@ifset jp
あるアドレスが複数ある場合は、自動的に 1 つになります。また、匿名の宛先
を表す ":;" で終るアドレスも、自動的に消去されます。
@end ifset
@ifset us
If there are multiple entries for a certain address, they are
unified. Addresses ending with ":;", which indicates anonymous
recipients, are automatically removed.
@end ifset

@ifset jp
自分のアドレスは自動的に消去されます。自分のアドレスは、
@samp{mew-config-alist} などから @samp{mew-mail-address-list} に自動設定
されます。この値が気に入らないなら、以下のように明示的に設定することも可
能です。
@end ifset
@ifset us
Your addresses are automatically removed. Your addresses are
automatically defined to @samp{mew-mail-address-list} according to, for
example, @samp{mew-config-alist}. If you dislike this value, you
can also explicitly set it like this:
@end ifset

@lisp
(setq mew-mail-address-list
       '("^pooh@@[a-z]*.aist-nara.ac.jp$"
         "^pooh@@mew.org$"
         "^winnie@@iijlab.net$"))
@end lisp

@c %%%%%%%%%%%%%%%%%
@node forward, resend, reply, Composing
@ifset jp
@section メッセージの転送
@end ifset
@ifset us
@section Forwarding messages
@end ifset
@vindex mew-field-delete-for-forwarding
@kindex f (Summary)
@kindex F (Summary)

@ifset jp
メッセージを転送するには、Summary モードで @samp{f} や @samp{F} を利用し
ます。すると、Draft モードに移行し、あらかじめメッセージが添付領域に添付
された草稿が準備されます。
@end ifset
@ifset us
To forward messages, type @samp{f} or @samp{F} in Summary mode. Then
Draft mode appears and the messages are already attached in the
attachments region.
@end ifset

@ifset jp
また Draft モードで添付領域を用意し、メッセージをコピー(@samp{c})したり
メッセージにリンク(@samp{l})を張ったりしても、メッセージを転送できます。
ファイル名が数字([0-9]+)の場合は、自動的にメッセージだと判断されます。ま
た、添付領域で @samp{y} を使うと、Message モードに表示しているメッセージ
にリンクを張るので便利です。
@end ifset
@ifset us
Also, you can prepare the attachments region by yourself, then copy
(@samp{c}) the messages or make links (@samp{l}) to the messages.  If
the file names of the messages are numeric ([0-9]+), they are
automatically considered as messages. @samp{y} is very convenient
because it make a link to the message displayed in Message mode.
@end ifset

@ifset jp
通常は添付したメッセージの全体が転送されます。もし、ヘッダの一部を削りた
い場合は、@samp{mew-field-delete-for-forwarding} を定義して下さい。以下
に "Received:" と "Return-Path:" を転送時に削るための設定例を示します。
@end ifset
@ifset us
By default, the entire message is forwarded. If you want to remove some
parts of its header, define @samp{mew-field-delete-for-forwarding}. The
following is an example to remove "Received:" and "Return-Path:" when
forwarded.
@end ifset

@lisp
(setq mew-field-delete-for-forwarding '("Received:" "Return-Path:"))
@end lisp

@c %%%%%%%%%%%%%%%%%
@node resend, pgp-shortcut, forward, Composing
@ifset jp
@section メッセージの再送
@end ifset
@ifset us
@section Re-sending messages
@end ifset
@kindex r (Summary)
@kindex W (Summary)
@kindex C-cC-c (Header)
@kindex C-cC-m (Header)

@ifset jp
メッセージのヘッダの一部のみを変更して、送信したい場合があります。
@end ifset
@ifset us
You may occasionally wish to send messages modifying the header of a
message.
@end ifset

@ifset jp
たとえば、同じ内容のメッセージを、複数の宛先に独立して送りたい場合です。
pooh 宛のメッセージを作成して、+queue に入れ、すぐさまそのメッセージをコ
ピーし、宛先だけを piglet に変更したい場合を想像して下さい。これを、メッ
セージの再利用による送信と呼びましょう。
@end ifset
@ifset us
For instance, you may want to send a message with the same body to
multiple receivers independently. Please imagine the case where you put
a created message destined to pooh in +queue and then you wish to send
an another message to piglet by copying it and modifying its header.
Let's call this recycle sending.
@end ifset

@ifset jp
また、メッセージに Resent-To: というフィールドを付けて再送したいこともあ
ります。これは、転送の一種です。こちらはヘッダだけ書き直すので、ヘッダ変
換といいます。前節で説明した転送は、メッセージを新規のメッセージに包み込
んで転送するため、カプセル化と呼ばれています。
@end ifset
@ifset us
Also, you occasionally wish to send a message adding the Resent-To:
field to a target message. This is a kind of forwarding. This is called
header conversion because a message header is modified. The forwarding
described the previous subsection is called encapsulation because a
message is embedded into another new message.
@end ifset

@ifset jp
ヘッダの一部だけを編集し、メッセージを送信したり、キューに入れたりするモー
ドとして、Header モードが用意されています。本文が編集できない Draft モー
ドだと思えばいいでしょう。
@end ifset
@ifset us
Header mode exists for this reason, modifying a part of the header,
sending/queuing the created message. You can think this is a kind of
Draft mode which prohibits modifications of its body.
@end ifset

@ifset jp
Header モードに入るために、Summary モードには以下のコマンドが用意されて
います。
@end ifset
@ifset us
The following commands are provided in Summary mode to enter Header
mode.
@end ifset

@table @samp
@ifset jp
@item W
メッセージの再利用による送信。対象となるメッセージの To:、Cc:、From: な
どを書き換えるために、Header モードに移行する。典型的には、+queue または 
+postq に入っているメッセージに対して利用する。
@item r
メッセージの再送。対象となるメッセージのヘッダに、Resent-To:、Resent-Cc:、
Resent-From: などを追加するために、Header モードに移行する。再送によるメッ
セージの転送は、受信者を混乱させることがあるので、よく考えてから利用する
こと。
@end ifset
@ifset us
@item W
Recycle sending. Enter Header mode in order to modify To:, Cc:, From: of
a target message. Typical usage is for messages in +queue or +postq.
@item r
Re-sending. Enter Header mode in order to add Resent-To:, Resent-Cc:,
Resent-From: of a target message. Re-sending may confuse receivers, so
you should think carefully before using it.
@end ifset
@end table

@ifset jp
Header モードでは、Draft モードのように、補完や循環的な補完が利用できま
す。ヘッダの入力が終わったら、以下のいずれかのコマンドを用いて、メッセー
ジを送信して下さい。本文が表示されていないので不安かもしれませんが、ちゃ
んと対象となっているメッセージの本文とヘッダの一部が再利用されます。
@end ifset
@ifset us
In Header mode, you can make use of completion and circular completion
like in Draft mode. When you are finished inputting the header, send the
message using one of the following commands. You may be concerned
because the body of the message is not displayed in your new
message. But you need not worry, since the body and a part of the target
message is certainly used.
@end ifset

@table @samp
@ifset jp
@item C-cC-m
メッセージを作成し +queue または +postq に入れ、送信待ち状態にする。
@item C-cC-c
メッセージを作成し送信する。"Really send this message? (y or n) " と訊か
る。@samp{y} を押せば送信される。
@end ifset
@ifset us
@item C-cC-m
Compose a message, put it into +queue or +postq, and let it be waiting
to be sent.
@item C-cC-c
Compose a message and send it. You are asked, "Really send this message?
(y or n) ". Type @samp{y} to send it.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node pgp-shortcut, mark-b-comp, resend, Composing
@ifset jp
@section PGP を利用する
@end ifset
@ifset us
@section Using PGP
@end ifset
@vindex mew-protect-privacy-always
@vindex mew-protect-privacy-always-type
@vindex mew-protect-privacy-encrypted
@vindex mew-protect-privacy-encrypted-type
@vindex mew-use-old-pgp
@vindex mew-protect-privacy-with-old-pgp-signature
@kindex C-cC-s (Draft)
@kindex C-cC-e (Draft)
@kindex C-cC-b (Draft)
@kindex C-cC-r (Draft)
@kindex C-cC-pC-a (Draft)
@kindex C-cC-pC-e (Draft)

@ifset jp
ここでは、テキストである本文を PGP で署名したり暗号化したりする方法につ
いて説明します。紹介するコマンドは以下の通りです。
@end ifset
@ifset us
This section explains the method for signing or encrypting "text only"
messages with PGP. The following commands are explained.
@end ifset

@table @samp
@ifset jp
@item C-cC-s
草稿全体を PGP で署名する。パスフレーズを入力すること。
@item C-cC-e
草稿全体を PGP で暗号化する。
@item C-cC-b
草稿全体を PGP で署名後暗号化する。パスフレーズを入力すること。
@item C-cC-r
草稿全体を PGP で暗号化後署名する。パスフレーズを入力すること。
@end ifset
@ifset us
@item C-cC-s
Sign the entire draft with PGP. Input your pass-phrase.
@item C-cC-e
Encrypt the entire draft with PGP.
@item C-cC-b
Sign, and then encrypt the entire draft with PGP. Input your
pass-phrase.
@item C-cC-r
Encrypt, and then sign the entire draft with PGP. Input your
pass-phrase.
@end ifset
@end table

@ifset jp
メッセージを暗号化するには受信者の公開鍵を使用します。逆に署名するには自
分の秘密鍵を使います。よって、署名するためにはパスフレーズを入力する必要
があります。ただし、パスフレーズの保存機能を使っており、パスフレーズが保
存されている場合は、パスフレーズを入力する必要はありません
(@xref{pgp-viewing})。
@end ifset
@ifset us
To encrypt a message, receivers' public keys are used. On the other
hand, your secret key is used to sign a message, and so you need to
input your pass-phrase when applying the signature. Note that if you are
using the pass-phrase cache and there are pass-phrases presently cached,
you do not have to type your pass-phrase (@xref{pgp-viewing}).
@end ifset

@ifset jp
これらのコマンドは PGP/MIME を作成します。これらは、次節で説明するマー
クを使った PGP/MIME の作成方法の省略方法に当たります。
@end ifset
@ifset us
These commands create a PGP/MIME message. We can consider that these
are shortcut methods of mark based composing of PGP/MIME described in
the next section.
@end ifset

@ifset jp
Mew で PGP を使うためには、PGP の userid としてアドレスを選ぶ必要があり
ます(例 "Kazuhiko Yamamoto <kazu@@mew.org>")。
@end ifset
@ifset us
If you use PGP with Mew, you have to select an e-mail address for your
PGP userid (e.g. "Kazuhiko Yamamoto <kazu@@mew.org>").
@end ifset

@ifset jp
メッセージに署名を施すには、@samp{C-cC-s} と入力します。署名の際には、自
分の秘密鍵を復号化する必要がありますので、パスフレーズがキャッシュされて
いなければ、入力を促されます。署名が施されたメッセージは、+queue または
+postq に格納されます。
@end ifset
@ifset us
To sign a message, type @samp{C-cC-s}. When signing, because your secret
key is needed to be decrypted, you may be asked for your pass-phrase if
it is not cached. Created messages are stored in +queue or +postq.
@end ifset

@ifset jp
自分の秘密鍵は、From: にあるアドレスを元に特定されます。From: がない場合
は、PGP が自動的にデフォルトの秘密鍵を選択します。From: にあるアドレスと
は違うアドレスで秘密鍵を指定したい場合は、@samp{C-uC-cC-s} と入力して下
さい。
@end ifset
@ifset us
Your secret key is identified in From: address. If From: does not exist,
PGP automatically selects your default secret key. When you want to
specify a secret key that is not identified the address of From:, type
@samp{C-uC-cC-s}.

@end ifset

@ifset jp
メッセージを暗号化するには、@samp{C-cC-e} とタイプして下さい。To: や Cc: 
からアドレスを切り出して、その受信者が復号化できるよう暗号化します。暗号
化するだけのなので、パスフレーズを訊かれることはありません。作成されたメッ
セージは、+queue に格納されます。
@end ifset
@ifset us
To encrypt a message, type @samp{C-cC-e}. A message is encrypted with
public keys identified with the addresses on To: and Cc:. Since this is
encryption only, you are not asked for your pass-phrase. Created cipher
messages are stored in +queue.
@end ifset

@ifset jp
このメッセージは、受信者の公開鍵に加えて、自分の公開鍵でも暗号化されてい
ます。ですから、作成したメッセージを復号化できます。たとえば、@samp{g} 
で +queue に移動し、念のため復号化して確認することが可能です。
@end ifset
@ifset us
This message is encrypted with your public key in addition to those of
the receivers. Therefore you can decrypt created messages. For example,
you can go to +queue by @samp{g} and preview a created message to
reconfirm this.
@end ifset

@ifset jp
署名後暗号化するには、@samp{C-cC-b} と入力します。暗号化後署名するには、
@samp{C-cC-r} とタイプします。どちらの場合も作成されたメッセージは、
+queue に蓄えられます。
@end ifset
@ifset us
To sign a draft and then encrypt it, type @samp{C-cC-b}. To encrypt a
draft and then sign it, type @samp{C-cC-r}. In both cases, created
messages are stored in +queue.
@end ifset

@ifset jp
PGP で署名を施したり、暗号化したりしてメッセージを送ろうと思っていても、
うっかり忘れることがあります。そのため、メッセージを作成するコマンド 
@samp{C-cC-m} や @samp{C-cC-c} に対し、必要に応じて PGP を起動させる機能
があります。
@end ifset
@ifset us
It is very likely that you will forget to sign and/or encrypt a draft
even if you intended to do so. To resolve this, Mew provides an
automatic PGP mechanism for the message creation function, @samp{C-cC-m}
or @samp{C-cC-c}.
@end ifset

@ifset jp
作成するすべてのメッセージのプライバシを保護したいなら、
@samp{mew-protect-privacy-always} を @samp{t} にして、
@samp{mew-protect-privacy-always-type} に利用したいサービスを設定します。
@end ifset
@ifset us
If you want to protect privacy of all drafts, set
@samp{mew-protect-privacy-always} to @samp{t} and set
@samp{mew-protect-privacy-always-type} to one of PGP services.
@end ifset

@ifset jp
暗号化されたメッセージに対する返答メッセージのプライバシを保護したいなら、
@samp{mew-protect-privacy-encrypted} を @samp{t} にして、
@samp{mew-protect-privacy-encrypted-type} に利用したいサービスを設定しま
す。この設定は、暗号化されたメッセージへの返答する場合、上記のすべてのメー
ルに対する設定よりも優先されます。
@end ifset
@ifset us
If you want to protect the privacy of drafts when replying encrypted
messages, set @samp{mew-protect-privacy-encrypted} to @samp{t} and set
@samp{mew-protect-privacy-encrypted-type} to one of the PGP services.
This configuration is preferred to the configuration for all drafts
described above in the case of replying encrypted messages.
@end ifset

@ifset jp
以下に利用できるサービスを示します。かっこ内はそれぞれのサービスを表すシ
ンボルです。@samp{C-cC-m} や @samp{C-cC-c} と入力する際に利用されるサー
ビスは、モードラインに表示されます。
@end ifset
@ifset us
The following services are available. The strings enclosed in braces are
the symbols for each service. The service applied when typing
@samp{C-cC-m} or @samp{C-cC-c} is displayed in the mode line.
@end ifset

@ifset jp
@table @asis
@item pgp-signature (PS)
署名
@item pgp-encryption (PE)
暗号化
@item pgp-signature-encryption (PSPE)
署名後暗号化
@item pgp-encryption-signature (PEPS)
暗号化後署名
@end table
@end ifset
@ifset us
@table @asis
@item pgp-signature (PS)
Sign
@item pgp-encryption (PE)
Encrypt
@item pgp-signature-encryption (PSPE)
Sign then encrypt
@item pgp-encryption-signature (PEPS)
Encrypt then sign
@end table
@end ifset

@ifset jp
以下の例は、すべてのメッセージに対し署名する設定です。
@end ifset
@ifset us
The following example works for signing all drafts.
@end ifset

@lisp
(setq mew-protect-privacy-always t)
(setq mew-protect-privacy-always-type 'pgp-signature)
@end lisp

@ifset jp
以下の例は、暗号化されたメッセージへの返答メッセージに対し、暗号化する設
定です。
@end ifset
@ifset us
The following example is for encrypting drafts when replying encrypted
messages.
@end ifset

@lisp
(setq mew-protect-privacy-encrypted t)
(setq mew-protect-privacy-encrypted-type 'pgp-encryption)
@end lisp

@ifset jp
Draft モードでは、@samp{C-cC-pC-a} で @samp{mew-protect-privacy-always}、
@samp{C-cC-pC-e} で @samp{mew-protect-privacy-encrypted} の値を反転でき
ます。
@end ifset
@ifset us
In Draft mode, @samp{C-cC-pC-a} toggles
@samp{mew-protect-privacy-always} and @samp{C-cC-pC-e} toggles
@samp{mew-protect-privacy-encrypted}.
@end ifset

@ifset jp
Draft モードにおいて現在書いている草稿対してのみあらかじめサービスを指定
しておき、送信時にサービスを施すことを忘れないようにできます。現在の草稿
に対し @samp{C-cC-m} や @samp{C-cC-c} で施されるサービスを指定するには、 
@samp{C-cC-pC-d} に続いて上記のサービスの 1 つを入力して下さい。現在のサー
ビスをキャンセルするには、サービス名の代りに単に @samp{RET} を押して下さ
い。
@end ifset
@ifset us
You can specify privacy services for the current draft in Draft mode
beforehand so that you do not forget to apply the privacy services when
sending. To set privacy services to the current draft evaluated when
typing @samp{C-cC-m} or @samp{C-cC-c}, type @samp{C-cC-pC-d}, and then
input one of privacy services listed above. To cancel the current
privacy service, just type @samp{RET} instead of selecting the privacy
service.
@end ifset

@ifset jp
@samp{C-cC-c} や @samp{C-cC-m} でメッセージを作成する際、署名や暗号化に
失敗したら、草稿に戻ります。このとき指定していたサービスはキャンセルされ
ます。続けて @samp{C-cC-c} や @samp{C-cC-m} でメッセージを作成すると、普
通のメッセージが作成されるので気をつけて下さい。問題を取り除いた後、同じ
サービスを望むなら、明示的に @samp{C-cC-pC-d} でサービスを指定するか、
@samp{C-cC-s}、@samp{C-cC-e} などを用いて下さい。
@end ifset
@ifset us
When you compose a message by @samp{C-cC-c} or @samp{C-cC-m}, and if
signing and/or encryption fails, the cursor gets back to the draft. At
this time, the service that you specified is canceled. If you type
@samp{C-cC-c} or @samp{C-cC-m} in this situation, a plain message is
created, so please be careful. After correcting the cause of the
failure, if you want the same service, type @samp{C-cC-pC-d} to specify
your service explicitly or use @samp{C-cC-s}, @samp{C-cC-e}, etc.
@end ifset


@ifset jp
@samp{mew-use-old-pgp} を @samp{t} に設定すれば(デフォルトは
@samp{nil})、@samp{C-cC-s} や @samp{C-cC-e} はPGP/MIME の代りに、古い
PGP の書式にしたがってメッセージを生成します。添付領域がある場合は、エ
ラーになります。
@end ifset
@ifset us
If @samp{mew-use-old-pgp} is set to @samp{t} (the default value is
@samp{nil}), @samp{C-cC-s} and @samp{C-cC-e}, etc create old fashioned
PGP message instead of PGP/MIME. If the attachment region exists, an
error occurs.
@end ifset

@ifset jp
上記で説明した @samp{mew-protect-privacy-*} は、PGP/MIME のみに有効であ
り、古い PGP には機能しません。@samp{C-cC-m} や @samp{C-cC-c} で常に
古い PGP の署名を施すには、@samp{mew-protect-privacy-with-old-pgp-signature}
を @samp{t} にして下さい。
@end ifset
@ifset us
@samp{mew-protect-privacy-*} described above are effective only to
PGP/MIME, not to old PGP. If you want to create old PGP signature with
@samp{C-cC-m} or @samp{C-cC-c} always, set
@samp{mew-protect-privacy-with-old-pgp-signature} to @samp{t}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node mark-b-comp, pgp-key, pgp-shortcut, Composing
@ifset jp
@section マークを使った PGP/MIME の作成
@end ifset
@ifset us
@section Mark based composer
@end ifset
@kindex B (Attach)
@kindex Q (Attach)
@kindex G (Attach)
@kindex S (Attach)
@kindex E (Attach)
@kindex U (Attach)

@ifset jp
PGP/MIME をサポートするために、マークを使った作成方法が提供されています。
以前の例を思い出してみましょう。
@end ifset
@ifset us
To support PGP/MIME, mark based composing is provided. Remember the
previous example.
@end ifset

@ifset jp
@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/     
     1  Text/Plain(guess)                                       CoverPage*
B    2  Image/Gif                    MagicPoint のロゴ          mgp.gif
Q    3  Application/Postscript       資料                       ohp.ps
     4                                                          . 
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example
@end ifset
@ifset us
@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/
     1  Text/Plain(guess)                                       CoverPage*
B    2  Image/Gif                    MagicPoint logo            mgp.gif
Q    3  Application/Postscript       Presentation Material      ohp.ps
     4                                                          .
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example
@end ifset

@ifset jp
行頭に @samp{B} や @samp{Q} といったマークがあります。このマークは符号化
を意味しています。Mew では、新しい概念「符号化」を導入しています。符号化
には、Base64, Quoted-Printable, Gzip64 (Gzip + Base64), PGP で署名, PGP
で暗号化などがあります。
@end ifset
@ifset us
You can find the @samp{B} mark and the @samp{Q} mark at the beginning of
the line. Mew provides you with a new concept of "encoding". Encoding
includes Base64, Quoted-Printable, Gzip64 (Gzip + Base64), sign with
PGP, encrypt with PGP.
@end ifset

@ifset jp
現在次の 6 つのマークがサポートされています。
@end ifset
@ifset us
At present, 6 marks are prepared.
@end ifset

@table @samp
@ifset jp
@item " "
符号化しない。ただし、8ビットのテキストは符号化されるかもしれない。
@item B
Base64
@item Q
Quoted-Printable
@item G
Gzip64(gzip 圧縮し Base64 で符号化する。Mew が実験的に採用している。相手
が Mew を使っていない場合は、使用すべきではない。)
@item PS 
PGP で電子署名。
@item PE
PGP で暗号化。
@end ifset
@ifset us
@item " "
No encoding. But 8bit text would be encoded.
@item B 
Base64 
@item Q
Quoted-Printable
@item G
Gzip64 (compressed with gzip then encoded with Base64. This is
experimental. Do not use this if receivers do not use Mew.)
@item PS 
Sign with PGP
@item PE
Encrypt with PGP
@end ifset
@end table

@ifset jp
添付領域でのマークに関係する新しいキー割当は以下の通りです。
@end ifset
@ifset us
Additional key binding for marks in attachments is as follows:
@end ifset

@table @samp
@ifset jp
@item B
Base64 で符号化するため @samp{B} マークを付ける。
@item Q
Quoted-Printable で符号化するため @samp{Q} マークを付ける。
@item G
Gzip64 で符号化するため @samp{G} マークを付ける。ただし、Text/Plain と 
Application/Postscript でしか実行できない。これ以外の型には圧縮は無意味
である。なぜなら、jpeg などはあらかじめ圧縮されているから。
@item S
PGP で署名するため @samp{PS} マークを付ける。
@item E 
PGP で暗号化するため @samp{PE} マークを付ける。受信者のアドレスを入力す
る。
@item U
符号化を元に戻す。元々のマークに戻る。
@end ifset
@ifset us
@item B
Put the @samp{B} mark to encode with Base64.
@item Q
Put the @samp{Q} mark to encode with Quoted-Printable.
@item G
Put the @samp{G} mark to encode with Gzip64. This is applicable only to
Text/Plain and Application/Postscript since compression is not effective
with other objects. For example, JPEG is already compressed.
@item S
Put the @samp{PS} mark to sign with PGP.
@item E 
Put the @samp{PE} mark to encrypt with PGP. Input decryptors' addresses.
@item U 
Unmark. The original mark appears.
@end ifset
@end table

@ifset jp
次の例を考えてみましょう。パート 2 は PGP で署名され、"kazu" 用に PGP で
暗号化されます。安心して下さい。説明の部分は上書きされていますが、保存さ
れています。パート 3 は Gzip64 で符号化されます。
@end ifset
@ifset us
Consider the following example: The second part will be signed with PGP
then encrypted with PGP for "kazu". Don't be alarmed. Its description is
overwritten but saved. The third part will be encoded with Gzip64.
@end ifset

@ifset jp
@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/
     1  Text/Plain(guess)                                       CoverPage*
PSPE 2  Image/Gif                    kazu@@mew.org               mgp.gif
G    3  Application/Postscript       資料                       ohp.ps
     4                                                          .
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example
@end ifset
@ifset us
@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/
     1  Text/Plain(guess)                                       CoverPage*
PSPE 2  Image/Gif                    kazu@@mew.org               mgp.gif
G    3  Application/Postscript       Presentation Material      ohp.ps
     4                                                          .
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example
@end ifset

@ifset jp
マークを付けた後は、@samp{C-cC-m} や @samp{C-cC-c} を使って、PGP/MIME を
作成して下さい。
@end ifset
@ifset us
After applying marks, type @samp{C-cC-m} or @samp{C-cC-c} to create
PGP/MIME messages.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node pgp-key, anonymous, mark-b-comp, Composing
@ifset jp
@section PGP の鍵の配布
@end ifset
@ifset us
@section PGP key distribution
@end ifset
@kindex p (Attach)

@ifset jp
PGP の公開鍵を配布するには、Draft モードの添付領域で @samp{p} を押して下
さい。だれの公開鍵を配布するか尋ねられます。自分の公開鍵であれば、単に 
@samp{RET} と入力して下さい。他人の公開鍵であれば、補完を利用しながらそ
の人のアドレスを入力して下さい。PGP の公開鍵は、Application/Pgp-Keys と
いうデータ型で配送されます。
@end ifset
@ifset us
To distribute a PGP public key, please use @samp{p} on attachments in
Draft mode. It asks whose public key you want to distribute. Just type
@samp{RET} if it is yours. If you want to distribute someone else's key,
input his e-mail address with completion. The PGP public key will
distributed as Content-Type: Application/Pgp-Keys.
@end ifset

@ifset jp
Summary モード、あるいは、Virtual モードでメッセージを読んでいる際に、あ
るパートのデータ型が Application/Pgp-Keys であれば、Mew は PGP の公開鍵
リングにそれを登録しようとします。Mew は、「信用度」と「有効性」を全く考
慮しないことに注意して下さい。これらの値を設定するのは、あなた自身です。
設定は Mew が表示する説明に従って下さい。。もし、「信用度」と「有効性」
の意味が分からなければ、PGP を使って自分のプライバシを保護しようとする前
に、PGP が提供する「信用の輪」とは何かを学ぶべきです。
@end ifset
@ifset us
If Mew finds that the part is Application/Pgp-keys, it tries to add the
PGP public key onto your PGP public keyring. Remember that Mew is not
responsible for TRUST or VALIDITY. It is YOU who set these
values. Please use the commands described by Mew to set these as
necessary. If you do not know the meaning of TRUST and VALIDITY, you
should learn the web of trust system provided by PGP BEFORE using PGP to
protect your privacy.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node anonymous, Marks, pgp-key, Composing
@ifset jp
@section 宛先を匿名にしたメッセージの送信
@end ifset
@ifset us
@section Sending messages with anonymous receivers
@end ifset

@ifset jp
宛先を匿名にして、複数の受信者にメッセージを送信したいことがあります。
@end ifset
@ifset us
You may occasionally wish to send a message to anonymous receivers.
@end ifset

@ifset jp
たとえば、pooh がパーティーへのお誘いを複数の友達に送ることを考えて下さ
い。パーティーへ参加するという piglet からの返事は、pooh のみに送るべき
です。しかし、To: にたくさんの友達を列挙していると、piglet は誤って多く
の人に返答を送りつけてしまうかもしれません。そもそも、pooh は誰を誘った
のか、当日までふせておきたいこともあるでしょう。
@end ifset
@ifset us
For instance, please imagine that Pooh is trying to invite multiple
friends to a party. Piglet should reply only to Pooh. However, Piglet
might make a mistake of replying to other people if the addresses of all
the invitees are listed in Cc:. Moreover, Pooh does not want to disclose
the names of those who he invited until the day of the party.
@end ifset

@ifset jp
このような要望を実現するために、Mew では匿名の宛先として、":;" を利用し
ます。以下の例を見て下さい。
@end ifset
@ifset us
To handle this, Mew makes use of ":;" for anonymous addresses. Please
look at the following example.
@end ifset

@example
To: party:piglet@@beech.tree.uk,roo@@beech.tree.uk;
From: Pooh <winnie-the-pooh@@100acre.woodwest.uk>
@end example

@ifset jp
"party" という説明文字列の後に ":" があります。そして、いくつかアドレス
が "," で区切られながら列挙され、";" で終端されています。このような形式
でアドレスを書くと、Mew は ":" と ";" のアドレスにメッセージを届けますが、
ヘッダからは削り取ります。この例では、piglet と roo は以下のようなメッセー
ジを受け取ります。
@end ifset
@ifset us
Here, there is a colon (":") after the explanatory comment "party". This
is followed by some addresses that are delimited by "," and terminated
by ";". If you write addresses in this format, Mew sends the message to
the addresses with them removed form the header.  In this example,
Piglet and Roo will receive the following message.
@end ifset

@example
To: party:;
From: Pooh <winnie-the-pooh@@100acre.woodwest.uk>
@end example

@ifset jp
受信者はこのヘッダから、送信者は pooh であることは分かりますが、自分以外
の誰に送られたのかは、想像するほかありません。また、"party:;" という文字
列は、アドレスではありませんから、ここに返答することも不可能です。
@end ifset
@ifset us
The receiver knows that the sender is Pooh, but will not know who else
received the message. Also, the string "party:;" is not address, so the
receiver cannot reply to it.
@end ifset

@ifset jp
なお、To: や Cc: にたくさんのアドレスを列挙することは、本質的によいこと
ではありません。特定の人にメッセージを何度も送信する機会があるなら、通常
メーリングリストを作成します。
@end ifset
@ifset us
You should understand that enumerating many addresses on To: or Cc: is
basically not a good practice anyway. If you often have the occasion to
send messages a set group of people, you should create a mailing-list.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Marks
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Marks, unread mark, anonymous, Top
@ifset jp
@chapter 愉快なマークたち
@end ifset
@ifset us
@chapter Funny marks
@end ifset

@ifset jp
ここでは、Summary モードでユーザが付けたり消したりできるマークについて
説明します。このマークは以下のように、行頭に付きます。(Mew が付けるマー
クは日付の左に付くことに注意。)
@end ifset
@ifset us
Here is a listing of marks that a user can use for insertion or
deletion in Summary mode. This mark is displayed in the beginning of a
line as follows: (Note that the marks that Mew inserts are displayed
left side of date.)
@end ifset

@example
@ifset jp
D 03/12 Hidenori Ohta  今週末                    |日曜にストーンマジック
oM03/14 ももちゃん     能登の写真                |この前撮った写真を添付
* 03/15 Neat Sumikawa  Re: ワイン                |じゃぁ、水曜日に例の店
@end ifset
@ifset us
D 03/12 Hidenori Ohta  This weekend              |Let's go to StoneMagic
oM03/14 Momo-chan      The pictures of Noto      |Attached are the pictu
* 03/15 Neat Sumikawa  Re: wine                  |OK. I vote for Wednesd
@end ifset
@end example

@ifset jp
現在利用できるマークは以下の6つです。
@end ifset
@ifset us
There are six marks at present.
@end ifset

@table @samp
@ifset jp
@item U
未読マーク。
@item D
消去のマーク。
@item X
消去のマーク。
@item o
整頓、つまり、フォルダを移動させるマーク。
@item *
処理の対象とするマーク。
@item $
マークを一時的に待避するためのマーク。
@end ifset
@ifset us
@item U
The unread mark.
@item D
The delete mark.
@item X
The delete mark.
@item o
The refile mark, that is, to move a message to another folder.
@item *
The target mark.
@item $
The mark to save another mark temporarily.
@end ifset
@end table

@ifset jp
以下それぞれについて説明します。また、Mew が表示するマークについてもまと
めます。
@end ifset
@ifset us
They are explained in sequence. The marks which Mew inserts are
summarized here as well.
@end ifset

@menu
@ifset jp
* unread mark::                 未読 @samp{U}
* delete mark::                 消去 @samp{D}、@samp{X}
* refile mark::                 整頓 @samp{o}
* target mark::                 対象 @samp{*}
* escape mark::	                待避 @samp{$}
* unmark::                      マークの消去
* mark change::                 マークの変換
* off-line::                    マークのオフライン処理
* mew-mark::                    Mew が表示するマーク
@end ifset
@ifset us
* unread mark::                 Unread @samp{U}
* delete mark::                 Delete @samp{D}, @samp{X}
* refile mark::                 Refile @samp{o}
* target mark::                 Target @samp{*}
* escape mark::                 Escape @samp{$}
* unmark::                      Deleting marks
* mark change::                 Overwriting marks
* off-line::                    Processing marks off-line
* mew-mark::                    Marks displayed by Mew
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node unread mark, delete mark, Marks, Marks
@ifset jp
@section 未読 @samp{U}
@end ifset
@ifset us
@section Unread @samp{U}
@end ifset
@kindex zSPC
@kindex M-u
@vindex mew-use-unread-mark
@vindex mew-delete-unread-mark-by-mark

@ifset jp
以下のように設定すると、メッセージを一覧表示する際に、未読マーク
@samp{U} がメッセージに付きます。
@end ifset
@ifset us
With the following configuration, messages are marked with the unread
mark @samp{U} when scanning the messages.
@end ifset

@lisp
(setq mew-use-unread-mark t)
@end lisp

@ifset jp
@samp{SPC}、@samp{n}、および @samp{p} などでメッセージを読むと
@samp{U} マークは消えます。
@end ifset
@ifset us
When you read a message with @samp{SPC}, @samp{n}, or @samp{p} and
etc, the @samp{U} mark disappears.
@end ifset

@ifset jp
この三つのコマンドは、通常 @samp{*} マーク、@samp{U} マーク、およびマー
クの付いていないメッセージを読み進みます。@samp{zSPC} を押すと、これら
は @samp{*} マークと @samp{U} マークの付いたメッセージのみを読み進めま
す。これは、未読のメッセージを読み進める場合に便利です。もう一度
@samp{zSPC} を実行すると、対象とするメッセージが元に戻ります。
@end ifset
@ifset us
These three commands read through messages marked with the @samp{*}
mark, the @samp{U} mark, and non-marked messages. If you type
@samp{zSPC}, they read through messages marked with the @samp{*} mark
and the @samp{U} mark only. This is convenient to read through unread
messages. Typing @samp{zSPC} again gets the target messages back.
@end ifset

@ifset jp
前のメッセージにマークを付けて、現在のメッセージに移動して来ると、
@samp{U}マークは消えます。@samp{SPC}、@samp{n}、および@samp{p}で移動し
て来た場合は、このメッセージを読むことを意図しているはずですが、マーク
を付けることで移動した場合はメッセージを読むことを意図していないかもし
れません。その場合、@samp{U} マークが消えると少し不便です。マークを付け
ることで移動した際に、@samp{U} マークを消したくないのであれば、以下のよ
うに設定するとよいでしょう。
@end ifset
@ifset us
When you move onto the current message by putting a mark on the
previous message, the @samp{U} mark is deleted. It's sure that you
want to read the current message if you move onto it by @samp{SPC},
@samp{n}, and @samp{p}. However, you might not intend to read the
current message when you move onto it by putting a mark. If this is
the case, this spec is inconvenient for you. If you want to retain the
unread mark on the current message when you move onto it by putting a
mark on the previous message, configure as follows:
@end ifset

@lisp
(setq mew-delete-unread-mark-by-mark nil)
@end lisp

@ifset jp
以下に @samp{U} マークに関するコマンドをまとめます。
@end ifset
@ifset us
The followings are summary of commands related to the @samp{U} mark.
@end ifset

@table @samp
@ifset jp
@item zSPC
@samp{SPC}、@samp{n}、および @samp{p} が読み進める対象とするメッセージ
を反転させる。反転とは、「@samp{U} マーク、@samp{*} マーク、およびマー
クなし」と「@samp{U} マークおよび @samp{*} マーク」に対し、一方を他方へ
変えること。
@item M-u
@samp{U} マークを付ける。
@end ifset
@ifset us
@samp zSPC
Toggle the target of @samp{SPC}, @samp{n} and @samp{p}. Toggling means
change one to the other out of ``the @samp{U} mark, the @samp{*} mark,
and non-mark'' and ``the @samp{U} mark and the @samp{*} mark''.
@item M-u
Put the @samp{U} mark to the current message.
@end ifset
@end table


@c %%%%%%%%%%%%%%%%%
@node delete mark, refile mark, unread mark, Marks
@ifset jp
@section 消去 @samp{D}、@samp{X}
@end ifset
@ifset us
@section Delete @samp{D}, @samp{X}
@end ifset
@vindex mew-trash-folder
@vindex mew-trash-folder-list
@vindex mew-imap-trash-folder
@vindex mew-imap-trash-folder-list
@kindex d (Summary)
@kindex M-d (Summary)
@kindex x (Summary)
@kindex mxd (Summary)
@kindex mxM-d (Summary)
@kindex md (Summary)
@kindex mM-d (Summary)
@kindex Md (Summary)
@kindex D (Summary)
@kindex C-uD (Summary)

@ifset jp
メッセージを消去するには、まず Summary モードで @samp{d} を押して、
@samp{D} マークを付けます。マークを付けただけでは何も起こらないので、間
違って @samp{d} を押しても大丈夫です。デフォルトでは、@samp{x} を押すと
@samp{D} マークの付いたメッセージがゴミ箱に移動します。
@end ifset
@ifset us
If you want to delete a message, type @samp{d} in Summary mode to put
the @samp{D} mark on it. Don't be worried about losing the message by
mistake. Since putting the @samp{D} mark has no immediate effect, it
does not result in a serious mistake. By default, typing @samp{x}
moves messages marked with @samp{D} to a trash.
@end ifset

@ifset jp
ローカル・フォルダのためのゴミ箱は +trash です。IMAP のためのゴミ箱は、
%trash です。
@end ifset
@ifset us
For local folders, a trash is +trash. For IMAP, it is %trash.
@end ifset

@ifset jp
ゴミ箱の中のメッセージを実際に消去するには、以下の 2 つの方法があります。
@end ifset
@ifset us
To really delete messages in the trashes, there are two methods:
@end ifset

@enumerate
@ifset jp
@item
Summary モードで @samp{D} を実行する。
@item
ゴミ箱で @samp{D} マークを付けて、@samp{x} を押す。
@end ifset
@ifset us
@item
Type @samp{D} in Summary mode.
@item
Put the @samp{D} mark in the trashes then type @samp{x}.
@end ifset
@end enumerate

@ifset jp
もう少し正確に言うと、ローカル・フォルダでは以下のルールが適応されます。
(@samp{mew-trash-folder} のデフォルトは +trash。
@samp{mew-trash-folder-list} のデフォルトは @samp{nil}。)
@end ifset
@ifset us
Exactly speaking, the following rule is applied for local folders.
(@samp{mew-trash-folder} is default to +trash。
@samp{mew-trash-folder-list} is default to @samp{nil}。)
@end ifset

@itemize @minus
@ifset jp
@item @samp{mew-trash-folder} が @samp{nil} なら、'D' マークの付いたメッ
セージは消去される。
@item @samp{mew-trash-folder-list} が定義されていたら、それらのフォルダ
で 'D' マークを付けたメッセージは消去される。それ以外のフォルダからは
@samp{mew-trash-folder} へ。
@item @samp{mew-trash-folder-list} が @samp{nil} なら、 
@samp{mew-trash-folder} で 'D' マークを付けたメッセージは消去される。そ
れ以外のフォルダからは @samp{mew-trash-folder} へ。(これがデフォルト。)
@end ifset
@ifset us
@item If @samp{mew-trash-folder} is @samp{nil}, messages marked with
'D' are deleted.
@item If @samp{mew-trash-folder-list} is defined, messages marked with
'D' in one of the folders defined in it are deleted. Otherwise,
they are moved to the trash.
@item If @samp{mew-trash-folder-list} is @samp{nl},
messages marked with 'D' in @samp{mew-trash-folder} are deleted.
Otherwise, they are moved to the trash. (This is default.)
@end ifset
@end itemize

@ifset jp
IMAP に対しては、@samp{mew-imap-trash-folder} と
@samp{mew-imap-trash-folder-list} に従って、同じ規則が適応されます。
@end ifset
@ifset us
For IMAP, the same rule is applied according to both
@samp{mew-imap-trash-folder} and @samp{mew-imap-trash-folder-list}
@end ifset

@ifset jp
すべての @samp{*} マークを @samp{D} マークに変換できれば、一度にたくさ
んの @samp{D} マークを付けれて便利です。これには、@samp{md} を利用して
下さい。
@end ifset
@ifset us
It is convenient if you can change the @samp{*} mark to the @samp{D}
mark since you can put many the @samp{D} marks at once. To achieve this,
use @samp{md}.
@end ifset

@ifset jp
また、@samp{Md} を使うと、現在のフォルダ内で同じ Message-Id: を持つメッ
セージがある場合、1 つを残して他のメッセージに @samp{D} が付きます。
@end ifset
@ifset us
Also, typing @samp{Md} put the @samp{D} mark to all duplicated
messages excluding one for each.
@end ifset

@ifset jp
@samp{D} マークに似たものに @samp{X} マークがあります。このマークの付け
られたメッセージは、@samp{x} を押した際に必ず消去されます。@samp{X} マー
クは、@samp{M-d} で付けることができます。
@end ifset
@ifset us
There is also another mark, @samp{X}, which is like the mark @samp{X}.
Messages marked with @samp{X} are deleted when @samp{x} is typed. The
@samp{X} mark can be put by @samp{M-d}.
@end ifset

@ifset jp
@samp{mxM-d} で、@samp{X} マークが付いたメッセージだけを処理できます。
すべての @samp{*} マークを @samp{X} マークに変換するコマンドは、
@samp{mM-d} です。
@end ifset
@ifset us
@samp{mxM-d} processes messages marked with @samp{X} only. Typing
@samp{mM-d} converts all @samp{*} marks to @samp{X}.
@end ifset


@ifset jp
以下に、@samp{D} マークと @samp{X} マークに関するコマンドをまとめます。
@end ifset
@ifset us
The following is a summary regarding with the @samp{D} mark and the
@samp{X} mark.
@end ifset

@table @samp
@ifset jp
@item d 
@samp{D} マークを付ける。
@item M-d
@samp{X} マークを付ける。
@item md
@samp{*}マークを@samp{D}マークへ変換する。
@item mM-d
@samp{*}マークを@samp{X}マークへ変換する。
@item x
マークの付いたメッセージを処理する。
@item mxd
@samp{D} マークの付いたメッセージのみを処理する。
@item mxM-d
@samp{X} マークの付いたメッセージのみを消去する。
@item D
ゴミ箱の中のメッセージを全部消去する。
@item C-uD
指定されたフォルダのメッセージを全部消去する。
@end ifset
@ifset us
@item d
Put the @samp{D} mark.
@item M-d
Put the @samp{X} mark.
@item md
Convert all @samp{*} marks to @samp{D}.
@item mM-d
Convert all @samp{*} marks to @samp{X}.
@item x
Process marked messages.
@item mxd
Process messages marked with @samp{D} only.
@item mxM-d
Delete messages marked with @samp{X} only.
@item D
Delete all messages in a trash.
@item C-uD
Delete all messages in a specified folder.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node refile mark, target mark, delete mark, Marks
@ifset jp
@section 整頓 @samp{o}
@end ifset
@ifset us
@section Refile @samp{o}
@end ifset
@kindex o (Summary)

@ifset jp
メッセージを整頓するには @samp{o} を押して、移動先のフォルダを入力し、
@samp{o} マークを付けます。移動先のフォルダは、賢く推測してくれるので、
ほどんどの場合はフォルダ名を入力する代わりに @samp{RET} を押すだけです。
"," で区切って複数のフォルダを入力することもできます。もちろん、
@samp{TAB} で補完できます。詳しくは @xref{Refile} を参照して下さい。
@end ifset
@ifset us
To refile a message, type @samp{o} and input a folder name, then
@samp{o} is put. A folder is guessed neatly, so most time what you
should to is just type @samp{RET}. For more information, refer to
@xref{Refile}.
@end ifset

@ifset jp
@samp{o} マークの付いたメッセージの上で @samp{o} を押すと、移動先を追加
したり変更したりできます。また、実際の移動は @samp{x} と入力されたときに
実行されます。
@end ifset
@ifset us
If you type @samp{o} on a message marked with @samp{o}, the refile
folder is shown. When typing @samp{x}, messages marked with @samp{o} are
actually refiled.
@end ifset

@ifset jp
複数のフォルダを指定し、移動させたときのことを考えましょう。ハードリンク
の機能を持つファイルシステムを使っている場合、そのメッセージは最初のフォ
ルダに移動され、その他のフォルダからはハードリンクが張られます。そうでな
いファイルシステムの場合は、最初のフォルダに移動後、その他のフォルダへ複
製されます。
@end ifset
@ifset us
Consider that you specify multiple folders and refiles actually. If your
file system has hard link, the message is moved to the first folder, and
hard links are created from the other folders. Otherwise, the message is
moved to the first folder, and it is copied to the other folders.
@end ifset

@ifset jp
指定したフォルダが 1 つで、しかもそれが現在のフォルダである場合、整頓し
てもなにも起こりません。指定したフォルダが複数で、現在のフォルダが含まれ
る場合、現在のフォルダ内での番号を保ったまま、その他のフォルダからハード
リンクが張られるか、その他のフォルダへ複製されます。
@end ifset
@ifset us
If the number of specified folders are 1, and it is the current folder,
refiling means do nothing. If the number is more than two and the
current folder is included, refiling means that the message number in
the current folder remains and hard links are created from the other
folders (or it is copied to the other folders).
@end ifset

@ifset jp
@samp{o} に似ていますが、かならず現在のフォルダも候補として提示する
@samp{c} というコマンドも用意されています。
@end ifset
@ifset us
Mew provides @samp{c} which is very similar to @samp{o}. @samp{c} shows
the current folder as a candidate in addition to guessed folders.
@end ifset

@ifset jp
以下に、@samp{o} マークに関するコマンドをまとめます。
@end ifset
@ifset us
A summary about the @samp{o} mark is here.
@end ifset

@table @samp
@ifset jp
@item o
@samp{o} マークを付ける。
@item c
@samp{o} マークを付ける。推測したフォルダに加えて、現在のフォルダも候補
として提示する。
@item x
@samp{o} マークの付いたメッセージを移動させる。
@item mxo
@samp{o} マークの付いたメッセージのみを移動させる。他のマークは処理しない。
@item C-umxo
@samp{o} マークの付いたメッセージの中で、現在のメッセージと同じ移動先を
持つもののみを移動させる。
@end ifset
@ifset us
@item o
Put the @samp{o} mark.
@item c
Put the @samp{o} mark. Showing the current folder as a candidate in
addition to guessed folders.
@item x
Refile messages marked with @samp{o}.
@item mxo
Refile messages marked with @samp{o} only. This command does not process
other marks.
@item C-umxo
Refile messages marked with @samp{o}, whose destination is the same as
that of the current message.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node target mark, escape mark, refile mark, Marks
@ifset jp
@section 対象 @samp{*}
@end ifset
@ifset us
@section Target @samp{*}
@end ifset
@kindex * (Summary)
@kindex N (Summary)
@kindex P (Summary)
@kindex M-n (Summary)
@kindex C-uM-n (Summary)
@kindex M-p (Summary)
@kindex C-uM-p (Summary)
@kindex ma (Summary)
@kindex mr (Summary)
@kindex F (Summary)
@kindex J (Summary)
@kindex mI (Summary)
@kindex C-umI (Summary)
@kindex M-b (Summary)
@kindex M-\ (Summary)
@kindex M-s (Summary)
@kindex M-t (Summary)

@ifset jp
後から読み返したいメッセージには、@samp{*} で @samp{*} マークを付けて下
さい。また、選択コマンド @samp{?} を使うと、入力した条件にマッチするメッ
セージに@samp{*} マークが付きます(詳しくは、@xref{Pick} を参照して下さい)。
@samp{N} や @samp{P} で @samp{*} マークの付いたメッセージに移動し表示で
きます。
@end ifset
@ifset us
Please put the @samp{*} mark onto messages that you want to review
later. @samp{?} also put the @samp{*} mark onto matched messages (for
more information, refer to @xref{Pick}). Use @samp{N} and @samp{P} to
walk around messages marked with @samp{*}.
@end ifset

@ifset jp
以下に、@samp{*} に関連するコマンドを示します。
@end ifset
@ifset us
Here is a summary for @samp{*} commands.
@end ifset

@table @samp
@ifset jp
@item *
@samp{*} マークを付ける。
@item N
下方向の @samp{*} マークの付いたメッセージへ移動し表示。
@item P
上方向の @samp{*} マークの付いたメッセージへ移動し表示。
@item M-n
下方向の @samp{*} マークの付いたメッセージへ移動しキーワードをハイライト
して表示。このコマンドを繰り返し利用すると、キーワードの付近がが次々と表
示されていく。キーワードは、そのバッファに固有な値として管理されており、
@samp{C-u?} や @samp{C-u/} (@xref{Pick} を参照) を利用すると設定される。
キーワードが設定されていないなら、ユーザにキーワードを訊く。
@item C-uM-n
キーワードを明示的に設定できること以外は、@samp{M-n} に同じ。
@item M-p
@samp{M-n} を逆方向にしたコマンド。
@item C-uM-p
@samp{C-uM-n} を逆方向にしたコマンド。
@item ma
マークの付いていないメッセージすべてに @samp{*} マークを付ける。
@item mr
入力した正規表現にマッチしたメッセージに @samp{*} マークを付ける。
@end ifset
@ifset us
@item *
Put the @samp{*} mark.
@item N
Jump to the message marked with @samp{*} below and display it.
@item P
Jump to the message marked with @samp{*} above and display it.
@item M-n
Display a message marked with @samp{*} and find a keyword and highlight
it in the forward direction. The keyword is stored in a buffer local
variable in Summary mode and is set when you use @samp{C-u?} or
@samp{C-u/} (see @xref{Pick}). If no key word is set to the variable,
this command first asks you a keyword.
@samp C-uM-n
The same as @samp{M-n} except that you can change the stored keyword
explicitly.
@item M-p
A reverse version of @samp{M-n}.
@item C-uM-p
A reverse version of @samp{C-uM-n}.
@item ma
Put the @samp{*} mark to all unmarked messages.
@item mr
Put the @samp{*} mark to all matching messages with inputted regular
expression.
@end ifset
@end table

@ifset jp
@samp{*} マークは、複数のメッセージを処理するためにも利用します。
以下に複数のメッセージを処理するコマンドを示します。
@end ifset
@ifset us
The @samp{*} mark is used to handle multiple messages. The following
is a list of commands which handle multiple messages.
@end ifset

@table @samp
@ifset jp
@item F
@samp{*} マークの付いたメッセージを MIME 形式で転送するための草稿を準備。
@item J
大きなメッセージは Message/Partial として複数に分割されている場合がある。
これらのメッセージには、Mew によって @samp{P} マークが付けられている。こ
こで、ユーザがそれらのメッセージに @samp{*} マークを付け、このコマンド
を実行すれば、元のメッセージが復元される。
@item mI 
@samp{*} マークの付いている一部だけが取得されたメッセージ群(@samp{T})を
取得する。
@item C-umI
@samp{mI} を実行する。
@item M-b
@samp{*} マークの付いたメッセージに格納されているメッセージを取り出す。
@item M-\
@samp{*} マークの付いたメッセージを引数として、外部コマンドを起動する。
@item M-s
@samp{*} マークの付いたメッセージを "unshar" の入力として渡す。つまり、
shar (の後に split)されたデータを取り出す。
@item M-t
@samp{*} マークの付いたメッセージを "uudecode" する。
@end ifset
@ifset us
@item F
Prepare a draft to forward multiple messages marked with @samp{*} in MIME
format.
@item J
A large message is occasionally fragmented into multiple messages whose
Content-Type: is Message/Partial. Mew puts the @samp{P} mark to these
messages. Now a user marks these messages with @samp{*} and executing
this commands results in producing the original message.
@item mI 
Retrieve the rest of truncated(@samp{T}) messages marked with
@samp{*}.
@item C-umI
Perform @samp{mI}.
@item M-b
De-capsulate messages embedded in the messages marked with @samp{*}.
@item M-\
Executing an external command specifying messages marked with @samp{*}
as arguments.
@item M-s
Apply unshar on messages marked with @samp{*}.
@item M-t
Apply "uudecode" on messages marked with @samp{*}.
@end ifset
@end table

@ifset jp
@samp{M-s} や @samp{M-t} では、@samp{*} マークの付いたメッセージがきち
んと分割順になっている必要があります。順番がくるっているなら、@samp{S}
でソートするとよいかもしれません。
@end ifset
@ifset us
For @samp{M-s} and @samp{M-t}, messages marked with @samp{*} are
supposed to be in the right order. If out of order, sorting with
@samp{S} would help.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node escape mark, unmark, target mark, Marks
@ifset jp
@section 待避 @samp{$}
@end ifset
@ifset us
@section Escape @samp{$}
@end ifset
@kindex m$
@kindex m*

@ifset jp
たとえば @samp{/} などを使いパターンに合致したメッセージに @samp{*} を
付けることを考えて下さい。@samp{*} マークの付いたメッセージがすでにある
なら、これらのメッセージは @samp{/} の結果と混ざってしまいます。そこで、
現在の @samp{*} マークを一時的に保存したくなります。
@end ifset
@ifset us
Suppose that you want to put the @samp{*} marks to messages matched to
a pattern specified to the @samp{/} command. If there are messages
marked with @samp{*} already, these messages are merged to the results
of @samp{/}. Thus, you would want to escape the current messages
marked with @samp{*}.
@end ifset

@ifset jp
この目的のために、待避マーク @samp{$} が提供されています。典型的な
使い方は、以下のようになります。
@end ifset
@ifset us
For this sake, the escape mark @samp{$} is provided. A typical usage
is as follows:
@end ifset

@enumerate
@ifset jp
@item
@samp{m$} で @samp{*} マークを一旦 @samp{$} マークに待避
@item
@samp{/} などで @samp{*} マークを付け、@samp{*}マークのついたメッセージを処理
@item
@samp{U*} で @samp{*} マークを消去
@item
@samp{m*} で @samp{$} マークを @samp{*} マークへ戻す
@end ifset
@ifset us
@item
Change the @samp{*} marks to the @samp{$} marks with @samp{m$}.
@item
Put the @samp{*} marks to messages, for instance, with @samp{/} and
process the messages marked with @samp{*}.
@item
Cancel the @samp{*} marks with @samp{U*}.
@item
Get the old @samp{*} marks back with @samp{m*}.
@end ifset
@end enumerate

@ifset jp
@samp{$}マークに関するコマンドを以下にまとめます。
@end ifset
@ifset us
Here is summary of the commands related to the @samp{$} mark.
@end ifset

@table @samp
@ifset jp
@item m$
@samp{*} マークを @samp{$} マークへ変換。
@item m*
@samp{$} マークを @samp{*} マークへ変換。
@end ifset
@ifset us
@item m$
Change the @samp{*} marks to the @samp{$} marks.
@item m*
Change the @samp{$} marks to the @samp{*} marks.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node unmark, mark change, escape mark, Marks
@ifset jp
@section マークの消去
@end ifset
@ifset us
@section Deleting marks
@end ifset
@kindex x (Summary)
@kindex u (Summary)
@kindex U (Summary)
@kindex M* (Summary)

@ifset jp
@samp{o} マークや @samp{D} マークが付いたメッセージは、マーク実行コマン
ド @samp{x} を押さない限り処理されません。よって、@samp{x} を押す前に、
マークを取り止めるコマンド @samp{u} でマークを消せば、誤ってメッセージを
消すことはありません。
@end ifset
@ifset us
Refiling and deleting is not processed unless you type @samp{x}. So, if
you press @samp{u} to unmark before you type @samp{x}, messages do not
disappear accidentally.
@end ifset

@ifset jp
以下にマークを消去するコマンドをまとめます。
@end ifset
@ifset us
Here is a summary for unmark commands.
@end ifset

@table @samp
@ifset jp
@item u
現在のメッセージのマークを消す。
@item U
入力したマークが付いているすべてのメッセージのマークを消す。
@end ifset
@ifset us
@item u
Cancel the mark on this message.
@item U
Cancel all marks according to what you input.
@end ifset
@end table

@ifset jp
@samp{$} マークを使って @samp{*} マークを待避し、なんらかの操作をし、元
に戻す方法は、目に見えるので分りやすいです。しかしながら、@samp{$} マー
クが付いているメッセージは、マークが付いているので目的の操作の対象外に
なるかもしれません。
@end ifset
@ifset us
The method with the @samp{$} mark, that is, preserve the @samp{*}
marks and operate something then get them back, is friendly to users
since it is visible. But since messages are marked, they would not be
the targets of the operation.
@end ifset

@ifset jp
このため @samp{U*} で消去した @samp{*} マークを復活させるコマンドがあり
ます。それは、@samp{M*} です。この方法は、復活できるマークは目に見えな
いので分りにくいかもしれません。しかしながら、マークが消えているので、
そのメッセージは確実に目的の操作の対象になります。
@end ifset
@ifset us
To solve this problem, a method to recover @samp{*} marks is provided.
The command is bound to @samp{M*}. This method would not be friendly
to users since the @samp{*} marks to recover are invisible. But
because the marks are canceled, these message are surely the target of
any operations.
@end ifset

@table @samp
@ifset jp
@item M*
一番最後の @samp{U*} で消した @samp{*} マークを復活させる。
@end ifset
@ifset us
@item M*
Recover the @samp{*} marks which are canceled by the last @samp{U*}.
@end ifset
@end table


@c %%%%%%%%%%%%%%%%%
@node mark change, off-line, unmark, Marks
@ifset jp
@section マークの変換
@end ifset
@ifset us
@section Overwriting marks
@end ifset
@kindex m$ (Summary)
@kindex m* (Summary)
@kindex ms (Summary)
@kindex mM-u (Summary)
@kindex md (Summary)
@kindex mM-d (Summary)
@kindex mo (Summary)
@kindex mc (Summary)

@ifset jp
マークには強さのレベルがあります。同じレベルのマークは上書きできます。
強いマークは弱いマークを上書きできます。
@end ifset
@ifset us
Marks have levels of strength. You can override a mark by another
same-level mark weak mark. Also stronger marks can override weaker
marks.
@end ifset

@ifset jp
マークを強い順に示します。
@end ifset
@ifset us
The followings shows the marks in the strong order:
@end ifset

@table @asis
@ifset jp
@item @samp{o}、@samp{D}、@samp{X}
新たにマークしたときは、次のメッセージを表示。上書きした場合は、その行に
留まる。
@item @samp{*} と @samp{$}
マークを付けた後は、その行に留まる。
@item @samp{U}
マークを付けた後は、その行に留まる。
@end ifset
@ifset us
@item @samp{o}、@samp{D}、@samp{X}
After marking a message newly, the next message is shown. After
overriding another mark, the cursor stays on the message.
@item @samp{*} と @samp{$}
After marking a message, the cursor stays on the message.
@item @samp{U}
After marking a message, the cursor stays on the message.
@end ifset
@end table

@ifset jp
強いマークを付けた後にカーソルが動く方向については、@xref{summary-mode} 
を参照して下さい。
@end ifset
@ifset us
Refer to @xref{summary-mode} to know which direction the cursor moves
after putting a strong mark.
@end ifset

@ifset jp
マークは以下のように交換できます。
@end ifset
@ifset us
You can exchange marks as follows:
@end ifset

@table @samp
@ifset jp
@item m$ 
@samp{*} -> @samp{$} :: @samp{*} マークを一時的に保存
@item m*
@samp{$} -> @samp{*} :: @samp{*} マークを元に戻す
@item ms
@samp{$} <-> @samp{*}
@item mM-u
@samp{*} -> @samp{U} :: 選択コマンド @samp{?} で選んだメッセージを未読
にするときに便利。
@item md
@samp{*} -> @samp{D} :: 選択コマンド @samp{?} で選んだメッセージを消去す
るときに便利。
@item mM-d
@samp{*} -> @samp{X} :: 選択コマンド @samp{?} で選んだメッセージを消去す
るときに便利。
@item mo
@samp{*} -> @samp{o} :: 選択コマンド @samp{?} で選んだメッセージをあるフォ
ルダに移動させる場合に便利。
@item mc
@samp{*} -> @samp{o} :: 選択コマンド @samp{?} で選んだメッセージをあるフォ
ルダにコピーする場合に便利。
@item e
最初に入力したマークを次に入力したマークへ変換する。ただし、@samp{o} マー
クは対象外。
@end ifset
@ifset us
@item m$ 
@samp{*} -> @samp{$} :: Preserve the @samp{*} marks temporarily
@item m*
@samp{$} -> @samp{*} :: Get the @samp{*} marks back
@item ms
@samp{$} <-> @samp{*}
@item mM-u
@samp{*} -> @samp{U} :: It is useful when you put @samp{U} marks to
messages picked by @samp{?}.
@item md
@samp{*} -> @samp{D} :: It is useful when you put @samp{D} marks to
messages picked by @samp{?}.
@item mM-d
@samp{*} -> @samp{X} :: It is useful when you put @samp{X} marks to
messages picked by @samp{?}.
@item mo
@samp{*} -> @samp{o} :: It is useful when you put @samp{o} marks to
messages to be moved picked by @samp{?}.  
@samp{*} -> @samp{o} :: It is useful when you put @samp{o} marks to
messages to be copied picked by @samp{?}.  
@item e
Exchange the first input mark to the second one. The @samp{o} mark is
not exchangeable.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node off-line, mew-mark, mark change, Top
@ifset jp
@chapter マークのオフライン処理
@end ifset
@ifset us
@chapter Processing marks off-line
@end ifset
@kindex lx
@kindex C-cC-c (Summary)
@kindex s (Summary)

@ifset jp
IMAP ユーザは、フォルダ A のメッセージをキャッシュし、出先で @samp{o} マー
クや @samp{D} マークを付け、その場でそれらのマークを処理したくなることが
あります。この場合、その後ネットワークに接続したときに、それらの処理が 
IMAP サーバに反映されて欲しいと思います。
@end ifset
@ifset us
An IMAP user may want to cache messages in folder A and go out. Then he
may want to put the @samp{o} and/or @samp{D} marks, and process the
marks off-line. In this story, these jobs should be done in his IMAP
server after connecting the Internet.
@end ifset

@ifset jp
通常 IMAP では、メッセージをフォルダ A からフォルダ B へ移動させた場合、
フォルダ A にキャッシュされているそのメッセージを削除し、IMAP サーバから
ネットワークを通じ、フォルダ B へそのメッセージをキャッシュし直す必要が
あります。なぜなら、フォルダ A にキャッシュされているメッセージに付随す
る IMAP の情報は、フォルダ A 内でのみ有効だからです。
@end ifset
@ifset us
If a message in folder A is moved to folder B with IMAP, the cached
message in folder A usually must be deleted and a corresponding message
in folder B must be retrieved from his IMAP server again. This is
because information embedded in a cached message in folder A is valid
only in folder A.
@end ifset

@ifset jp
出先でフォルダ A のメッセージをフォルダ B へ整理したとしましょう。仮に、
そのメッセージをフォルダ B で読むためには、ネットワークに接続してその処
理を IMAP サーバに反映し、IMAP サーバから取り直さないといけないとすると
不便です。欲を言えば、出先でフォルダ B へ整理したメッセージは、IMAP サー
バから取り直さなくとも、フォルダ B へ移動すれば読めるようになっていて欲
しいと思います。
@end ifset
@ifset us
Suppose you refile a message in folder A to folder B off-line. It is
very inconvenient for you to retrieve a corresponding message in folder
B from your IMAP server , in order to read it, after refile jobs are
done online. You may want to read the messages refiled to folder B by
just going to the folder B, without retrieval form the IMAP server.
@end ifset

@ifset jp
Mew では、メッセージ処理を後から IMAP サーバへ反映することと、IMAP サー
バからメッセージを再取得しなくても移動先のフォルダでメッセージを読めるこ
との両方を実現しています。ネットワークに接続していない状況で、マークを処
理するには、@samp{lx} を使用して下さい。@samp{lx} を実行すると、以下の処
理がなされます。
@end ifset
@ifset us
Mew implements delayed jobs processing and viewing refiled messages
without retrieval. If you want to process marks off-line, type @samp{lx}.
@samp{lx} carries out the following jobs.
@end ifset

@ifset jp
@enumerate
@item
@samp{o} マークや @samp{D} マークのついたメッセージがフォルダ A からなく
なる。
@item
この処理はメッセージ形式で、%queue に溜る。
@item
@samp{o} マークのついたメッセージは、ローカルでフォルダ B へ移動され、無
効なメッセージとして扱われる。
@end enumerate
@end ifset
@ifset us
@enumerate
@item
Deleting messages marked with @samp{o} and/or @samp{D} from folder A.
@item
Queuing these jobs in %queue.
@item
Moving messages marked with @samp{o} to folder B and marking them
invalid.
@end enumerate
@end ifset

@ifset jp
無効なメッセージとは、読むことはできるが、@samp{o} マークや @samp{D} マー
クをつけられないものをいいます。無効なメッセージには、@samp{#} マークが
付いています。@samp{g} を使って、フォルダ B へ行くと、無効なメッセージ
の一覧が自動的に表示されます。
@end ifset
@ifset us
'invalid' means that you can read it but you cannot put the
@samp{o}/samp{D} mark on it. Invalid messages are marked with
@samp{#}. When you go to folder B by typing @samp{g}, a list of
invalid messages is displayed automatically.
@end ifset

@ifset jp
ネットワークに接続た後に、%queue に溜っている処理を IMAP サーバに反映さ
せるには、%queue で @samp{C-cC-c} と入力して下さい。
@end ifset
@ifset us
If you want to let your IMAP server process jobs in %queue after you get
back online, type @samp{C-cC-c} in %queue.
@end ifset

@ifset jp
IMAP サーバに処理を反映した後に、フォルダ B で @samp{s} を押すと、無効な
メッセージが削除され、有効なメッセージがキャッシュされます。
@end ifset
@ifset us
Typing @samp{s} in folder B after jobs in %queue are done in your IMAP
server results in deletion of invalid messages and caching valid
messages.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node mew-mark, Refile, off-line, Top
@ifset jp
@chapter Mew が表示するマーク
@end ifset
@ifset us
@chapter Marks displayed by Mew
@end ifset

@ifset jp
以下に Mew が表示するマークをまとめます。
@end ifset
@ifset us
Here is a summary of marks displayed by Mew.
@end ifset

@table @samp
@ifset jp
@item M
マルチパートを表すマーク。@xref{multipart}を参照のこと。
@item T
メッセージが切り詰められたことを表すマーク。@xref{retrieving}を参照のこ
と。
@item S
署名を表すマーク。@xref{pgp-viewing}を参照のこと。
@item E
暗号を表すマーク。@xref{pgp-viewing}を参照のこと。
@item P
分割されていることを示すマーク。@xref{target mark}を参照のこと。
@item #
メッセージが無効であることを示すマーク。@xref{off-line}を参照のこと。
@end ifset
@ifset us
@item M
This message is a multipart. Please refer to @xref{multipart}.
@item T
This message was truncated by Mew. Please refer to @xref{retrieving}.
@item S
This message is signed. Please refer to @xref{pgp-viewing}.
@item E
This is a cipher message. Please refer to @xref{pgp-viewing}.
@item P
This message is fragmented. Please refer to @xref{target mark}.
@item #
This message is invalid. Please refer to @xref{off-line}.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Refile
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Refile, by-folder, mew-mark, Top
@ifset jp
@chapter 楽々整理整頓
@end ifset
@ifset us
@chapter Happy refiling
@end ifset

@ifset jp
1日に数百のメッセージを受け取るようになると整理整頓が大変になります(え、
そんなに受け取らないですって？ 幸せですね :) 。Mew では、@samp{o} でメッ
セージを整頓する際に、整頓先を推測しデフォルト値として表示してくれます。
たとえば、次のようになります。
@end ifset
@ifset us
When you come to receive hundreds of messages in a day (do not you
believe it?), refiling messages becomes a very tough job. Mew neatly
guesses default folders where the message is supposed to be refiled when
you type @samp{o}. You can see an example below.
@end ifset

@example
Folder name (+work/mew-dist): +
@end example

@ifset jp
もし、() の中のデフォルト値が自分の希望通りであれば、@samp{RET} を押すだ
けでよいのです。整頓先が決定しているメッセージには、@samp{o} マークが付
きます。
@end ifset
@ifset us
If the default value in () is proper, just type @samp{RET}. The messages
will be marked with @samp{o} if its refiling folders are decided.
@end ifset

@ifset jp
メッセージを移動できるのは、そのメッセージが属している「世界」の中でのみ
です。前述のように世界はケースと修飾子によって定まります。整頓先のフォル
ダを指定する場合には、ケースを付けず、同じ修飾子を持つフォルダ名を入力す
る必要があります。ケースを付けない理由は、そのメッセージのケースはすでに
定まっているからです。ミニバッファからフォルダ名を入力する際、ケースが 
"default" でないにも関わらずケースを明示的に入力しないのは、整頓先を指定
する場合のみです。
@end ifset
@ifset us
You can refile a message to folders of the same world to which the
message belong. As described above, a world is identified by a
combination of case and proto. When you input a folder to which the
message is refiled, you must not specify case and you must input a
folder whose proto is the same. The reason why you must not specify case
is that case is already known. With other commands, you have to specify
case, if necessary, when you input folder name in minibuffer. This
command is only the exception.
@end ifset

@ifset jp
@samp{o} に似たコマンドに @samp{c} があります。両者の違いは、
@xref{refile mark} を参照して下さい。
@end ifset
@ifset us
Mew also provides @samp{c} which is very similar to @samp{o}.  To know
the difference, please refer to @xref{refile mark}.
@end ifset

@ifset jp
この整頓先の推測が賢ければ賢い程ユーザは楽になります。Mew では以下のよう
な規則が用意されています。
@end ifset
@ifset us
As you know, the more excellent refiling guess algorithms become, the
less user's job troublesome. Mew provides you with the following rules.
@end ifset

@menu
@ifset jp
* by-folder::                   メーリングリスト用のフォルダから推測
* by-alist::                    指定した規則から推測
* by-thread::                   対話関係から推測
* by-from-folder::              個人用のフォルダから推測
* by-from::                     From: から推測
* by-newsgroups::               Newsgroups: から推測
* by-default::                  デフォルトの規則
* guess-rule::                  規則の制御
* auto-refile::                 自動で整理整頓
@end ifset
@ifset us
* by-folder::                   Guess by mailing-list folders
* by-alist::                    Guess by user defined rules
* by-thread::                   Guess by thread
* by-from-folder::              Guess by private folders
* by-from::                     Guess by From:
* by-newsgroups::               Guess by Newsgroups:
* by-default::                  Guess by default rule
* guess-rule::                  Controlling rules
* auto-refile::                 Auto refile
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node by-folder, by-alist, Refile, Refile
@ifset jp
@section メーリングリスト用のフォルダから推測
@end ifset
@ifset us
@section Guess by mailing-list folders
@end ifset
@vindex mew-use-fast-refile
@vindex mew-use-node-folder

@ifset jp
あるメーリングリスト宛のメッセージを、そのメーリングリスト名のフォルダに
整理することは多いと思います。Mew ではメーリングリスト宛に届いたメッセー
ジに対して、それ用のフォルダを推測する機能があります。
@end ifset
@ifset us
Many users tend to refile messages destined to a mailing-list to a
folder whose name is the same as the mailing-list. Mew provides a
mechanism to guess a mailing-list folder for messages destined to
mailing-lists.
@end ifset

@ifset jp
たとえば、+misc/pooh-lovers というフォルダがあったとしましょう。次のよう
なメッセージは、このフォルダに整頓すればよい可能性が高いといえます。
@end ifset
@ifset us
Suppose that you have a folder named +misc/pooh-lovers. The following
message is probably to be refiled to this folder.
@end ifset

@example
To: pooh-lovers@@mew.org 
@end example

@ifset jp
このように、To: や Cc: のアドレスが、フォルダ名の一番右側にマッチするも
のがないか探すわけです。フォルダを階層化していない人が多いようですが、
Mew を使う限り、階層化しない手はありません。
@end ifset
@ifset us
Likewise, Mew searches a matching folder forward with addresses on To:
and Cc:. There are many people who do not use recursive folders. With
Mew, however, you would not be smart if you do not use it.
@end ifset

@ifset jp
さて、鋭い人は次のように個人のアドレスが To: や Cc: にある場合、困るので
はないかと思うでしょう。
@end ifset
@ifset us
Smart users may wonder that they get a trouble in the following
situation where private addresses are on To: or Cc:.
@end ifset

@example
To: piglet@@mew.org
Cc: pooh-lovers@@mew.org
@end example

@ifset jp
たとえば、pooh は pooh-lovers の一員ですから、このメッセージが届きます。
しかし、piglet と仲がいいので、+from/piglet にマッチしてしまいます。
@end ifset
@ifset us
Since pooh is a member of pooh-lovers, he receives this message. But he
has a folder for his friend, pooh. So, +from/piglet may be chosen.
@end ifset

@ifset jp
そこで、Mew では無視するフォルダを設定できるようになっています。デフォル
トでは、+from 以下を無視します。ですから、個人からのメッセージは +from 
以下に収めて下さい
@end ifset
@ifset us
To avoid this, Mew allows you to specify which folders are to be
ignored. The default is +from. So, please take a convention to refile
personal messages under +from.
@end ifset

@ifset jp
候補が決定できたら
@end ifset
@ifset us
When Mew guesses a candidate by the folders, it asks you:
@end ifset

@example
Folder name (+misc/pooh-lovers): +
@end example

@ifset jp
と訊いてきます。あっていれば @samp{RET} を、違っていればお望みのフォルダ
を入力して下さい。
@end ifset
@ifset us
Just type @samp{RET} if the default is exactly what you want.
@end ifset

@ifset jp
@samp{o} で新しいフォルダを指定すると、そのフォルダが自動的に作成され、
次からは推測用の候補にも加わります。便利でしょ？
@end ifset
@ifset us
If you specify a new folder with @samp{o}, the folder is created and
added to the folder list to be used for guess. Convenient, isn't it?
@end ifset

@ifset jp
この機能を提供する関数は @samp{mew-refile-guess-by-folder} です。
@end ifset
@ifset us
The function name to provide this feature is
@samp{mew-refile-guess-by-folder}.
@end ifset

@ifset jp
もし、フォルダ名に大文字を使っていないなら、以下の設定により、この関数が
高速になります。
@end ifset
@ifset us
If you don't use capital letters for folder names, configure as follows
to make this function faster:
@end ifset

@example
(setq mew-use-fast-refile t)
@end example

@ifset jp
デフォルトでは、末端のフォルダと中間のフォルダが候補の対象となっていま
す。もし、中間のフォルダではなく、末端のフォルダだけを選びたい場合は、
以下のように設定して下さい。
@end ifset
@ifset us
By default, candidate includes node folders as well as leaf folders.
If you want to not select node folders but leave folders only,
configure as follows:
@end ifset

@example
(setq mew-use-node-folder nil)
@end example

@c %%%%%%%%%%%%%%%%%
@node by-alist, by-thread, by-folder, Refile
@ifset jp
@section 指定した規則から推測
@end ifset
@ifset us
@section Guess by user defined rules
@end ifset
@vindex mew-refile-guess-alist

@ifset jp
フォルダ名から推測する機能だけでは、思うようなフォルダを推測してくれない
場合があります。たとえば、To: が staff@@mew.org であるメッセージと To: 
が staff@@iijlab.net であるメッセージに対し、フォルダ名からの推測では同
じフォルダ(たとえば、"+net/staff")が選ばれてしまいます。そこで、Mew では、
変数 @samp{mew-refile-guess-alist} に明示的に規則を設定できます。
@end ifset
@ifset us
There are some cases where the refile guess mechanism by folders does
not work as you wish. For example, for both a message whose To: is
staff@@mew.org and another message whose To: is staff@@iijlab.net, the
same folder would be selected with guess by folders (e.g. "+net/staff").
So, Mew allows you to define your own rules explicitly.
@end ifset

@ifset jp
1つ例を挙げてみましょう。
@end ifset
@ifset us
Let's look at an example.
@end ifset

@lisp
(setq mew-refile-guess-alist
  '(("To:"
      ("staff@@mew.org" . "+net/mew/staff")
      ("staff@@iijlab.net" . "+net/iijlab/staff"))))
@end lisp

@ifset jp
これは、メッセージヘッダ中の To: の横の文字列に staff@@mew.org があれば 
+net/mew/staff へ、staff@@iijlab.net があれば +net/iijlab/staff へ整頓す
るという意味です。
@end ifset
@ifset us
This means that if To: contains staff@@mew.org +net/mew/staff is
selected and if To: has staff@@iijlab.net +net/iijlab/staff is chosen.
@end ifset

@ifset jp
規則は、以下のように書きます。
@end ifset
@ifset us
The format of this rule is as follow:
@end ifset

@example
rule ::= '<rule>
<rule> ::= ((<key> <alist>) (<key> <alist>) ... [<special>])
@end example

@ifset jp
全体は (<key> <alist>) のリストです。<key> はフィールド名を書きます。
<alist> は以下のようになります。
@end ifset
@ifset us
The whole is a list of (<key> <alist>). A field name is specified for
<key>. The format for <alist> is as follows:
@end ifset

@example
<alist> ::= (<value> . <folder>|<rule>) (<value> . <folder>|<rule>) ...
@end example

@ifset jp
<value> は <key> で示したフィールドにくる値です。<folder> は <key> にマッ
チした際にどのフォルダに整頓するかを意味しています。<value> と <folder> 
を @samp{.} で区切るのを忘れないで下さい。<folder> の代りに <rule> を再
帰的に記述することもできます。
@end ifset
@ifset us
<value> is a field value for <key>. <folder> means a folder to be chosen
if matched. Please note that <value> and <folder> is separated with
@samp{.}.
@end ifset

@ifset jp
特殊な <key> として @samp{nil} と @samp{t} があります。@samp{nil} は、何
も推測できなかった場合に返す <folder> を指定するために用います。@samp{t} 
は、推測した値に加えて返す <folder> を指示するために使います。
@end ifset
@ifset us
There are two special <key>s: @samp{nil} and @samp{t}. @samp{nil} is
used to specify <folder> to be returned when nothing is guessed. @samp{t}
can specify <folder> to be returned in addition to guessed values.
@end ifset

@example
<special> ::= (t . <folder>) | (nil . <folder>)
@end example

@ifset jp
正規表現を知っている人は、以下のような複雑な規則を設定できます。
@end ifset
@ifset us
If you know regular expression, a more advanced rule can be defined like
this.
@end ifset

@lisp
(setq mew-refile-guess-alist
  '(("Newsgroups:"
    ("^nifty\\.\\([^ ]+\\)" . "+Nifty/\\1")
    (".*"         . "+rec/news"))
   ("To:"
    ("\\(inet\\|wide\\)@@wnoc-fuk" . "+wide/\\1-wnoc-fuk"))
   ("From:" 
    ("uucp@@"      . "+adm/uucp")
    ("ftpsync@@"   . "+adm/ftpsync"))
   (nil . "+unknown")))
@end lisp

@ifset jp
この機能を提供する関数は @samp{mew-refile-guess-by-alist} です。
@end ifset
@ifset us
The function name to provide this feature is
@samp{mew-refile-guess-by-alist}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node by-thread, by-from-folder, by-alist, Refile
@ifset jp
@section 対話関係から推測
@end ifset
@ifset us
@section Guess by thread
@end ifset
@vindex mew-lisp-max-length

@ifset jp
Mew には、整頓しようとしているメッセージの親のメッセージが以前整頓された
フォルダを選択してくれる機能があります。
@end ifset
@ifset us
Mew provides a mechanism to guess a folder where the parent message of a
current message was refiled before.
@end ifset

@ifset jp
たとえば、pooh、piglet、roo との間で、蜂蜜を取りに行こうという話題が盛り
上がったとしましょう。pooh は、+project/honey というフォルダを作って、最
初のメッセージをそこに 整頓したとしましょう。以降、3人の間のメッセージが
きちんとした返答であるかぎり、+project/honey を推測してくれます。
@end ifset
@ifset us
For example, pooh, piglet, and roo had a chat to go and get honey. So,
pooh made +project/honey then refiled the message to it. The further
messages, if they are properly replied, they are supposed to be refiled
to +project/honey.
@end ifset

@ifset jp
あるメッセージをどこに保存したかという情報は、
"~/Mail/.mew-refile-msgid-alist" に保存されています。この情報を過去何通
のメッセージに関して保存するかは、@samp{mew-lisp-max-length} で決定しま
す。初期値は 2000 通です。3000 通にしたい場合は "~/.mew.el" 中で以下のよ
うに設定して下さい。
@end ifset
@ifset us
Information that which folder was chosen for messages is stored to
"~/Mail/.mew-refile-msgid-alist". @samp{mew-lisp-max-length} controls
the amount of this information. The default value is 2000 messages. If
you want limits it to 3000 messages, put the following to "~/.mew.el".
@end ifset

@lisp
(setq mew-lisp-max-length 3000)
@end lisp

@ifset jp
この機能を提供する関数は @samp{mew-refile-guess-by-thread} です。
@end ifset
@ifset us
The function name to provide this feature is
@samp{mew-refile-guess-by-message-id}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node by-from-folder, by-from, by-thread, Refile
@ifset jp
@section 個人用のフォルダから推測
@end ifset
@ifset us
@section Guess by private folders
@end ifset
@vindex mew-refile-guess-from-me-is-special

@ifset jp
@xref{by-folder} で説明したメーリングリスト用のフォルダを推測するに加え
て、個人用のフォルダを推測する機能があります。個人用のフォルダは +from 
以下にありますから、+from 以下のフォルダを選択する機能だともいえます。以
下の例を考えてみましょう。
@end ifset
@ifset us
In addition to the mechanism to select a mailing-list folder described
in @xref{by-folder}, Mew provides a mechanism to choose a private
folder. Since private folders locate under +from, we can say that this
mechanism select a folder from the folders under +from. Let's see the
following example:
@end ifset

@example
To: pooh@@mew.org
From: piglet@@mew.org
@end example

@ifset jp
piglet から pooh にメッセージが来ました。pooh がこの機能を使うと、From: 
を手がかりに +from/piglet が選択されます。(+from 以下は階層化されていて
も構いません。また、フォルダ名はユーザ名だけではなくアドレス全体でも OK 
です。)
@end ifset
@ifset us
pooh received a message from piglet. If pooh uses this mechanism,
+from/piglet will be chosen according to From:. (Folders under +from can
be recurse. And you can select the entire address for a folder name
instead of the user part.)
@end ifset

@ifset jp
この機能を提供する関数は、@samp{mew-refile-guess-by-from-folder} といいます。
@end ifset
@ifset us
The function to provide this feature is
@samp{mew-refile-guess-by-from-folder}.
@end ifset

@ifset jp
次に、pooh が piglet に返答した場合を考えましょう。pooh は自分自身に Cc: 
していたので、自分にメッセージが戻ってきました。
@end ifset
@ifset us
Next, let's consider a care where pooh replied to piglet. Since pooh
Cc:ed the message to himself, the message was also delivered to him.
@end ifset

@example
To: piglet@@mew.org
Cc: pooh@@mew.org
From: pooh@@mew.org
@end example

@ifset jp
pooh の立場になって考えてみて下さい。このメッセージを +from/pooh に整頓
するか、あるいは +from/piglet に整頓するのかは、好みが分かれるところでしょ
う。そこで、どちらを選択するのかカスタマイズできるようになっています。
@end ifset
@ifset us
How do you feel if you are pooh? You may want to refile this to
+from/pooh. Also, you may want to move this to +from/piglet. So, it can
be customized.
@end ifset

@ifset jp
@samp{mew-refile-guess-from-me-is-special} が @samp{t} なら、
@samp{mew-refile-guess-by-from-folder} は、From: が自分のアドレスの場合
に、To: と Cc: にあるアドレスをもとに、+from 以下のフォルダを選択します。
@end ifset
@ifset us
If @samp{mew-refile-guess-from-me-is-special} is @samp{t} and if an
address in From: is yourself, @samp{mew-refile-guess-by-from-folder}
select a folder under +from according to To: and/or Cc:.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node by-from, by-newsgroups, by-from-folder, Refile
@ifset jp
@section From: から推測
@end ifset
@ifset us
@section Guess by From:
@end ifset
@vindex mew-lisp-max-length
@vindex mew-refile-guess-from-me-is-special

@ifset jp
From: に同一のアドレスを持つメッセージが、かつてどこに整頓されたかによっ
て推測する機能があります。
@end ifset
@ifset us
Mew also provides a mechanism to guess a folder by the place where a
message that has the same From: field is refiled.
@end ifset

@ifset jp
たとえば、piglet は piglet@@beech.tree.uk と p-p-p@@mew.org の 2 つのア
ドレスを持っているとしましょう。どちらのアドレスからメッセージが届いても、
pooh はそれらを +from/piglet に整頓したいと思っています。もちろん、以下
のように明示的に規則を書けば実現できます。
@end ifset
@ifset us
Suppose that piglet has two addresses, piglet@@beech.tree.uk and
p-p-p@@mew.org. pooh wants to refile messages from piglet to
+from/piglet no matter what his From: is. This policy can, of course, be
implemented if pooh specifies rules explicitly as follows:
@end ifset

@lisp
(setq mew-refile-guess-alist
  '(("From:"
      ("piglet@@beech.tree.uk" . "+from/piglet")
      ("p-p-p@@mew.org"        . "+from/piglet"))))
@end lisp

@ifset jp
しかし、いちいち規則を書くのは面倒です。そこで、まず From: が 
piglet@@beech.tree.uk であるメッセージを +from/piglet に整頓します。これ
でフォルダ +from/piglet が作成されます。次に、From: が p-p-p@@mew.org で
あるメッセージを +from/piglet に整頓したとします。ここで Mew は、
p-p-p@@mew.org が +from/piglet に整頓されたことを学習します。以後 From: 
が p-p-p@@mew.org であるメッセージを整頓しようとすると、+from/piglet を
選択するようになります。
@end ifset
@ifset us
But such a work may bother you. So, first refile a message whose From:
is piglet@@beech.tree.uk to +from/piglet. At this time, +from/piglet is
created. Next, refile a message whose From: is p-p-p@@mew.org to
+from/piglet. Here Mews learns that p-p-p@@mew.org was refiled to
+from/piglet. After this, when messages whose From: is p-p-p@@mew.org
are refiled, +from/piglet is chosen.
@end ifset

@ifset jp
その他、機械からくるメッセージは、いつも +adm/misc に入れることにしたい
場合なども、明示的な規則を書かずに済ませられます。
@end ifset
@ifset us
For another example, you can refile messages from machinery to +adm/misc
without defining an explicit rule.
@end ifset

@ifset jp
From: とフォルダの情報は、"~/Mail/.mew-refile-from-alist" に保存されてい
ます。この情報を過去何通のメッセージに関して保存するかは、
@xref{by-thread} と同様に @samp{mew-lisp-max-length} で決定します。
@end ifset
@ifset us
Information for relationship between From: and folder is stored to
"~/Mail/.mew-refile-from-alist". @samp{mew-lisp-max-length} controls the
amount of this information as the same as @xref{by-thread}.
@end ifset

@ifset jp
この機能を提供する関数は @samp{mew-refile-guess-by-from} です。
@end ifset
@ifset us
The function name to provide this feature is
@samp{mew-refile-guess-by-from}.
@end ifset

@ifset jp
@samp{mew-refile-guess-from-me-is-special} が @samp{t} の場合、
@samp{mew-refile-guess-by-from} は 
@samp{mew-refile-guess-by-from-folder}(@xref{by-from-folder})と同様な動
きをします。
@end ifset
@ifset us
If the value of @samp{mew-refile-guess-from-me-is-special} is @samp{t},
@samp{mew-refile-guess-by-from} acts as
@samp{mew-refile-guess-by-from-folder} (@xref{by-from-folder}).
@end ifset

@c %%%%%%%%%%%%%%%%%
@node by-newsgroups, by-default, by-from, Refile
@ifset jp
@section Newsgroups: から推測
@end ifset
@ifset us
@section Guess by Newsgroups:
@end ifset

@ifset jp
ニュースをメールとして受信して Mew で読んでいる人のために、Newsgroups: 
からフォルダを推測する機能を用意しました。関数名は 
@samp{mew-refile-guess-by-newsgroups} です。
@end ifset
@ifset us
For those who read articles of NetNews received by e-mail with Mew, Mew
provides a mechanism to guess a folder by Newsgroups:. The function name
to provide this feature is @samp{mew-refile-guess-by-newsgroups}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node by-default, guess-rule, by-newsgroups, Refile
@ifset jp
@section デフォルトの規則
@end ifset
@ifset us
@section Guess by default rule
@end ifset
@vindex mew-refile-guess-strip-domainpart

@ifset jp
デフォルトの規則は、From: からユーザ名を切り出して、@samp{+from/user} を
選ぶようになっています。ただし、@samp{mew-refile-guess-strip-domainpart} 
が @samp{nil} ならアドレスを切り出すので、@samp{+from/user@@domain} が選
択されます。
@end ifset
@ifset us
The default rule is to extract a user name from From: and to choose
@samp{+from/user}. But if @samp{mew-refile-guess-strip-domainpart} is
@samp{nil}, it extracts the entire address. So,
@samp{+from/user@@domain} is chosen.
@end ifset

@ifset jp
関数名は、@samp{mew-refile-guess-by-default} です。
@end ifset
@ifset us
The function name is @samp{mew-refile-guess-by-default}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node guess-rule, auto-refile, by-default, Refile
@ifset jp
@section 規則の制御
@end ifset
@ifset us
@section Controlling rules
@end ifset
@vindex mew-refile-guess-control
@vindex mew-refile-ctrl-multi

@ifset jp
Mew では、フォルダ推測の規則を2つの変数、@samp{mew-refile-guess-control} 
と @samp{mew-refile-ctrl-multi} で制御します。
@samp{mew-refile-guess-control} は、呼び出す関数を順に定義します。候補を
複数にしたい場合は @samp{mew-refile-ctrl-multi} を @samp{t} に、単数にし
たい場合は @samp{nil} に設定します。
@end ifset
@ifset us
Mew controls guess rules by two variables,
@samp{mew-refile-guess-control} and @samp{mew-refile-ctrl-multi}. If you
want multiple candidates, set @samp{mew-refile-ctrl-multi}
@samp{t}. Otherwise, set it @samp{nil}.
@end ifset

@ifset jp
標準では、@samp{mew-refile-guess-control} は以下のように宣言されています
(宣言なので @samp{defvar} が使われています)。
@end ifset
@ifset us
By default, @samp{mew-refile-guess-control} is declared as follows
(since it is a declaration, @samp{defvar} is used):
@end ifset

@lisp
(defvar mew-refile-guess-control
  '(mew-refile-guess-by-alist
    mew-refile-ctrl-throw
    mew-refile-guess-by-newsgroups
    mew-refile-guess-by-folder
    mew-refile-ctrl-throw
    mew-refile-ctrl-auto-boundary
    mew-refile-guess-by-thread
    mew-refile-ctrl-throw
    mew-refile-guess-by-from-folder
    mew-refile-ctrl-throw
    mew-refile-guess-by-from
    mew-refile-ctrl-throw
    mew-refile-guess-by-default))
@end lisp

@ifset jp
Mew は @samp{mew-refile-guess-control} に並べられた関数を順番にすべて実
行します。各々の関数が複数の候補を推測することがあります。
@end ifset
@ifset us
Mew executes every function defined in @samp{mew-refile-guess-control}
in order. Each function may guess multiple candidates.
@end ifset

@ifset jp
@samp{mew-refile-guess-control} の動作例として以下を考えてみましょう。
@end ifset
@ifset us
Let's see the following example of @samp{mew-refile-guess-control}
action.
@end ifset

@table @samp
@ifset jp
@item mew-refile-guess-by-alist
    が +aaa, +bbb を推測。
@item mew-refile-guess-by-folder
    が +ccc, +ddd を推測。
@item mew-refile-guess-by-default
    が +eee       を推測。
@end ifset
@ifset us
@item mew-refile-guess-by-alist
    guessed +aaa, +bbb.
@item mew-refile-guess-by-folder
    guessed +ccc, +ddd.
@item mew-refile-guess-by-default
    guessed +eee.
@end ifset
@end table

@ifset jp
+aaa 〜 +eee すべてをユーザに提示して欲しい場合は、
@samp{mew-refile-ctrl-multi} を @samp{t} に, +aaa だけを提示して欲しい場
合は、@samp{nil} に設定します。
@end ifset
@ifset us
If you want to provide all candidates, +aaa - +eee, set
@samp{mew-refile-ctrl-multi} @samp{t}. If you want to provide +aaa only,
set it @samp{nil}.
@end ifset

@ifset jp
また、+aaa 〜 +ddd は提示して欲しいけれどもそれ以降はいらない、つまり、
+eee を提示するのは先に実行された関数群が何も推測できなかったときだけに
したい場合は、@samp{mew-refile-ctrl-multi} を @samp{t} にして、
@samp{mew-refile-guess-by-folder} と @samp{mew-refile-guess-by-default} 
の間に @samp{mew-refile-ctrl-throw} を入れて下さい。
@end ifset
@ifset us
If you want +aaa - +ddd but do not want left candidates, in other words,
you want +eee only when no candidate is guessed by functions executed
before, set @samp{mew-refile-ctrl-multi} @samp{t} and insert
@samp{mew-refile-ctrl-throw} between @samp{mew-refile-guess-by-folder}
and @samp{mew-refile-guess-by-default}.
@end ifset

@ifset jp
@samp{C-uo} は、この推測の流れを Message バッファに表示します。
@end ifset
@ifset us
@samp{C-uo} displays the flow of guess rules in Message buffer.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node auto-refile, Pick, guess-rule, Refile
@ifset jp
@section 自動で整理整頓
@end ifset
@ifset us
@section Auto refile
@end ifset
@vindex mew-refile-auto-refile-skip-any-mark
@kindex M-o (Summary)
@kindex C-uM-o (Summary)

@ifset jp
毎日メッセージをたくさんもらう人は、まだ整頓していないメッセージを 
+inbox (あるいは %inbox) フォルダに大量に溜めてしまうことがあります。そ
んなときは、「メッセージ達よ、とにかくこのフォルダからどこかに行ってしま
え」と叫びたくなることがあるでしょう。Mew は、そんなわがままなを満足させ
るための自動整理整頓関数を提供しています。:) @samp{M-o} がその呪文です。
@end ifset
@ifset us
Those who receives many messages everyday is prone to store thousands of
messages in the +inbox (or %inbox) folder. In such a case, they may want
to speak out like this, "Hey messages, get out of the folder to
somewhere". Mew provides a feature to satisfy such laziness. :)
@samp{M-o} is the spell.
@end ifset

@ifset jp
この関数を実行すると、現在のフォルダ内の特定のメッセージに対して、自動的
に @samp{o} マークを付けてくれます。特定のメッセージとは、
@samp{mew-refile-auto-refile-skip-any-mark} が @samp{nil}なら、@samp{o} 
や @samp{D} マークが付いていないメッセージです。
@samp{mew-refile-auto-refile-skip-any-mark} が @samp{t} なら、なにもマー
クが付いてない(既読)メッセージです。
@samp{mew-refile-auto-refile-skip-any-mark} の初期値は @samp{nil} です。
@end ifset
@ifset us
When you execute this function, it marks specific messages with
@samp{o}. The specific messages mean messages which are not marked
with @samp{o} nor @samp{D} if
@samp{mew-refile-auto-refile-skip-any-mark} is @samp{nil}. If
@samp{mew-refile-auto-refile-skip-any-mark} is @samp{t}, they mean
non-marked messages (ie read). The default value of
@samp{mew-refile-auto-refile-skip-any-mark} is @samp{nil}.
@end ifset

@ifset jp
@samp{C-uM-o} は、@samp{mew-refile-auto-refile-skip-any-mark} の値とは関
係なく @samp{*} マークの付いたメッセージを対象にします。
@end ifset
@ifset us
@samp{C-uM-o} targets messages marked with @samp{*} regardless the value
of @samp{mew-refile-auto-refile-skip-any-mark}.
@end ifset

@ifset jp
整頓先の決定には、先に説明した推測関数群が働くようになっています。この関
数は、@samp{o} を付けるだけですので、@samp{x} を押さない限り実際にメッセー
ジがどこかに行ってしまうことはありません。
@end ifset
@ifset us
Refile rule is the same described in the previous section. Please note
that what this function does is just mark messages with
@samp{o}. Messages are not refiled until you will press @samp{x}.
@end ifset

@ifset jp
Mew の整頓先推測はあまりにも賢すぎるので、この機能には仇となってしまい
ます。というのは、Mew が推測機能をフルに使って勝手に整頓してしまうと、
大抵のユーザはどこにメッセージが整頓されたか分からなくなってしまうのか
らです。:) そのために、Mew が使う推測関数を制限する機能が提供されてい
ます。前に出てきた宣言をもう一度思い出して下さい。
@end ifset
@ifset us
Mew's refile mechanism is so smart that it would be harmful for this
function. That is, most users would not understand where messages have
been refiled if Mew made most use of its guess mechanism. :) For this
reason, break is provided to limit usage of guess functions. Recall the
declaration up above.
@end ifset

@lisp
(defvar mew-refile-guess-control
  '(mew-refile-guess-by-alist
    mew-refile-ctrl-throw
    mew-refile-guess-by-newsgroups
    mew-refile-guess-by-folder
    mew-refile-ctrl-throw
    mew-refile-ctrl-auto-boundary
    mew-refile-guess-by-thread
    mew-refile-ctrl-throw
    mew-refile-guess-by-from-folder
    mew-refile-ctrl-throw
    mew-refile-guess-by-from
    mew-refile-ctrl-throw
    mew-refile-guess-by-default))
@end lisp

@ifset jp
@samp{mew-refile-guess-control} の中に 
@samp{mew-refile-ctrl-auto-boundary} という関数があります。これがその仕
掛です。自動整理整頓のときに限り、Mew はこの関数より下に記述してある推測
を無視します。@samp{mew-refile-ctrl-auto-boundary} より上に記述している
関数が何も推測できなかった場合は、そのメッセージには @samp{o} が付きませ
ん。破滅が訪れる前に @samp{mew-refile-ctrl-auto-boundary} の御札を貼って
下さい。
@end ifset
@ifset us
You can find the @samp{mew-refile-ctrl-auto-boundary} function in
@samp{mew-refile-guess-control}. Only when auto refile is used, Mew
ignores guess functions below this function. If guess functions above
@samp{mew-refile-ctrl-auto-boundary} didn't guess any folder for a
message, the message is not marked with @samp{o}. Insert
@samp{mew-refile-ctrl-auto-boundary} before you ruin.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Pick
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Pick, condition, auto-refile, Top
@ifset jp
@chapter メッセージの選択
@end ifset
@ifset us
@chapter Selecting messages
@end ifset
@kindex ? (Summary)
@kindex ' (Summary)
@kindex " (Summary)
@kindex / (Summary)
@kindex C-u/ (Summary)
@kindex m/ (Summary)
@kindex C-um/ (Summary)

@ifset jp
たとえば、Subject: に party という文字が含まれているメッセージを見つけ
出したり、From: が kazu@@mew.org であるメッセージを選択したいと思うこと
があります。
@end ifset
@ifset us
You may want to pick up messages whose Subject: contains a string
"party" and whose From: is kazu@@mew.org.
@end ifset

@ifset jp
入力した条件に合致したメッセージに対し、@samp{*} マークを付けるコマンド
は 3 つあります。
@end ifset
@ifset us
There are three commands that puts the @samp{*} mark onto matched
messages.
@end ifset

@table @samp
@ifset jp
@item ?
現在の Summary モードかスレッドで、入力した条件に合うメッセージに
@samp{*} マークを付ける。(@samp{mewl} を利用)
@item '
現在の Summary モードかスレッドで、入力したキーワードを含むメッセージに
@samp{*} マークを付ける。(@samp{grep} を利用)
@item "
現在の Summary モードかスレッドで、入力したキーワードを含むメッセージに
@samp{*} マークを付ける。コマンド、オプション、およびキーワードを同時に
指定する。
@end ifset
@ifset us
@item ?
In Summary mode or thread, putting the @samp{*} mark onto messages
matched with a specified condition. (@samp{mewl} is used.)
@item '
In Summary mode or thread, putting the @samp{*} mark onto messages
which includes a specified keyword. (@samp{mewl} is used.)
@item "
In Summary mode or thread, putting the @samp{*} mark onto messages
which includes a specified keyword. You should specify a command, its
options and the keyword at the same time.
@end ifset
@end table

@ifset jp
これらのコマンドは、Summary モード、スレッドを含む 1 つのフォルダから作
られた Virtual モードで利用できます。
@end ifset
@ifset us
These commands can be used in Summary mode and Virtual mode which is
made of a physical folder including Thread.
@end ifset

@ifset jp
入力した条件に合致したメッセージに対し、Virtual モードを作るために以下
のコマンドがあります。
@end ifset
@ifset us
Here are commands to create Virtual mode for messages matched to a
specified pattern.
@end ifset

@table @samp
@ifset jp
@item /
指定した単数あるいは複数のフォルダから、入力した条件に合うメッセージを
見つけ出してVirtual モードに一覧表示する。(@samp{mewl} を利用)
@item C-u/
指定した単数あるいは複数のフォルダから、入力したキーワードを含むメッセー
ジを見つけ出して Virtual モードに一覧表示する。(@samp{grep} を利用)
@end ifset
@ifset us
@item /
Making Virtual mode with messages in specified folders, matched with a
specified condition. (@samp{mewl} is used.)
@item C-u/
Making Virtual mode with messages in specified folders, matched with
a specified keyword. (@samp{grep} is used.)
@end ifset
@end table

@ifset jp
また条件を入力せずに、マークのメッセージに対して Virtual モードを作るコ
マンドもあります。
@end ifset
@ifset us
There is a command to make Virtual mode for marked message without
inputting pattern.
@end ifset

@table @samp
@ifset jp
@item m/
@samp{*} マークの付いたメッセージに対し、Virtual モードを作成する。
@item C-um/
指定されたマークの付いたメッセージに対し、Virtual モードを作成する。
@end ifset
@ifset us
@item m/
Making Virtual mode for messages marked with @samp{*}.
@item C-um/
Making Virtual mode for messages marked with your specified mark.
@end ifset
@end table

@ifset jp
以下条件の入力方法と Virtual モードに付いて解説します。また、DB を使っ
た検索についても触れます。
@end ifset
@ifset us
Following sections describes how to input conditions and Virtual mode
in detail. We will also see searching with DB.
@end ifset

@menu
@ifset jp
* condition::                   条件の入力方法
* virtual::                     Virtual モード
* dbsearch::                    DB を使った検索
@end ifset
@ifset us
* condition::                   How to input conditions
* virtual::                     Virtual mode
* dbsearch::                    Searching with DB
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node condition, virtual, Pick, Pick
@ifset jp
@section 条件の入力方法
@end ifset
@ifset us
@section How to input conditions
@end ifset
@vindex mew-pick-pattern-list

@ifset jp
Mew が条件の入力をユーザに促すときは以下のように訊いてきます。
@end ifset
@ifset us
When Mew asks a user to input pick pattern, the following message is
displayed.
@end ifset

@example
Pick pattern: 
@end example

@ifset jp
以下に示す式を組み合わせて条件を入力して下さい。(結合力の強い順に並んで
います。)
@end ifset
@ifset us
Input pick pattern combining the following expressions (which are listed
in the strong order):
@end ifset

@table @samp
@ifset jp
@item field=string
フィールド field に文字列 string が含まれているときマッチ(大文字小文字を
区別しない)。field に "head" を指定した場合は、ヘッダ全体を意味する。
@item field==string
フィールド field に文字列 string が含まれているときマッチ(大文字小文字を
区別する)。field に "head" を指定した場合は、ヘッダ全体を意味する。
@item field!=string
フィールド field に文字列 string が含まれていないときマッチ(大文字小文字
を区別しない)。field に "head" を指定した場合は、ヘッダ全体を意味する。
@item field!==string
フィールド field に文字列 string が含まれていないときマッチ(大文字小文字
を区別する)。field に "head" を指定した場合は、ヘッダ全体を意味する。
@item ( <pattern> )
<pattern> の内容を先に評価。
@item ! <pattern>
<pattern> でないときマッチ。
@item <pattern1> & <pattern2>
<pattern1> かつ <pattern2> のときマッチ。
@item <pattern1> | <pattern2>
<pattern1> または <pattern2> のときマッチ。
@end ifset
@ifset us
@item field=string
Match if the "field" field contains the "string" string
(case-insensitive). If you specify "head", it means the entire header.
@item field==string
Match if the "field" field contains the "string" string
(case-sensitive). If you specify "head", it means the entire header.
@item field!=string
Match if the "field" field does not the "string" string
(case-insensitive). If you specify "head", it means the entire header.
@item field!==string
Match if the "field" field does not the "string" string
(case-sensitive). If you specify "head", it means the entire header.
@item ( <pattern> )
Evaluate <pattern> first.
@item ! <pattern>
Match if not <pattern>.
@item <pattern1> & <pattern2>
Match if <pattern1> AND <pattern2>.
@item <pattern1> | <pattern2>
Match if <pattern1> OR <pattern2>.
@end ifset
@end table

@ifset jp
以下に例を示します。
@end ifset
@ifset us
Some examples are shown below.
@end ifset

@ifset jp
(a) From: に kazu が含まれるメッセージ
@end ifset
@ifset us
(a) Messages whose From: contains "kazu".
@end ifset

@example
from=kazu
@end example

@ifset jp
(b) To: が mew、または、Cc: が mew であるメッセージ
@end ifset
@ifset us
(b) Messages whose To: contains "mew" OR Cc: contains "mew".
@end ifset

@example
to=mew | cc=mew
@end example

@ifset jp
(c) To: が mew、または、Cc: が mew で、かつ、from が kazu である
メッセージ
@end ifset
@ifset us
(c) Messages whose To: contains "mew" OR Cc: contains "mew" AND
From: contains "kazu".
@end ifset

@example
(to=mew | cc=mew) & from=kazu
@end example

@ifset jp
後は類推して下さい。
@end ifset
@ifset us
Now you can guess how to input more complex patterns.
@end ifset

@ifset jp
なお、@samp{mew-pick-pattern-list} にパータンのリストを定義しておくと、
@samp{C-cTAB} で各要素を循環的に補完できます。この場合、リストの先頭が
デフォルトとして表示されます。
@end ifset
@ifset us
If you set @samp{mew-pick-pattern-list} to a list of pattern, you can
enjoy circular completion with @samp{C-cTAB}. In this case, the first
member is displayed as a default value.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node virtual, dbsearch, condition, Pick
@ifset jp
@section Virtual モード
@end ifset
@ifset us
@section Virtual mode
@end ifset
@kindex / (Summary)

@ifset jp
Virtual モードは、複数のフォルダから入力した条件に合うメッセージを選びだ
し、単一の仮想的なフォルダとして扱います。Summary モードで @samp{/} を押
すと、Virtual モードが作れます。
@end ifset
@ifset us
Virtual mode gives you a single view for matching messages from multiple
folders. Press @samp{/} in Summary mode to enter Virtual mode.
@end ifset

@ifset jp
最初に、単数または複数のフォルダ名を入力します。複数のフォルダを入力する
場合は、"," で区切って下さい。もちろん、@samp{TAB} で補完できます。
@end ifset
@ifset us
First you are asked to input a single or multiple folder name.  If you
want to specify multiple folders, please separate them with ",".  Of
course, you can complete folder names with @samp{TAB}.
@end ifset

@example
Folder name (+inbox) : +inbox,+mew
@end example

@ifset jp
この例では、Virtual モードのフォルダ名は "*+inbox,+mew*" になります。
@end ifset
@ifset us
With this example, a name of Virtual mode becomes "*+inbox,+mew*".
@end ifset

@ifset jp
そして、条件を入力します。
@end ifset
@ifset us
Now input conditions.
@end ifset

@example
Pick pattern: 
@end example

@ifset jp
すると仮想フォルダができあがります。Summary モードで利用できるコマンドの
多くが、Virtual モードで利用できます。仮想フォルダはまさしく仮想であり、
ファイルシステムなどには存在しないことに注意して下さい。Emacs を終了する
と、仮想フォルダはなくなります。
@end ifset
@ifset us
OK. You get a Virtual mode. In Virtual mode, you can use most commands
that you can find in Summary mode. You should take note that Virtual
folder is really virtual and it does not exist in file system. If you
exit Mew, it then disappears.
@end ifset

@ifset jp
Virtual モードであるメッセージにマークを付けると、Summary モードの対応す
るメッセージにもマークが付きます。逆に、Summary モードであるメッセージに
マークを付けても、Virtual モードの対応するメッセージにはマークは付きませ
ん。
@end ifset
@ifset us
If you put a mark on a message in Virtual mode, the mark is also put
onto the corresponding message in Summary mode. But if you put a mark on
a message in Summary mode, the mark is not put any corresponding
messages in Virtual mode.
@end ifset

@ifset jp
Virtual モードからマークを処理することはできません。@samp{x} を押しマー
クを処理しようとすると、Summary モードに移動しろという促されます。また、
スレッドのための Virtual モードで @samp{x} を押すと、対応する Summary モー
ドに移動し、もう一度 @samp{x} を押すよう促されます。
@end ifset
@ifset us
You cannot process marks in Virtual mode. Even if you type @samp{x} to
process marks in Virtual mode, you will be asked to move Summary mode.
Also, if you type @samp{x} in Virtual mode for thread, the cursor moves
to corresponding Summary mode and you are asked to type @samp{x} again.
@end ifset


@ifset jp
Virtual モードを消去する方法については、@xref{Quit}を参照して下さい。
@end ifset
@ifset us
To know how to delete Virtual mode, please refer to @xref{Quit}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node dbsearch, Quit, virtual, Pick
@ifset jp
@section DB を使った検索
@end ifset
@ifset us
@section Searching with DB
@end ifset
@kindex km (Summary)
@kindex k? (Summary)
@kindex k/ (Summary)

@ifset jp
@samp{?} や @samp{'} では、呼び出された外部コマンドがその都度メッセージ
を検索していました。これに対し、あらかじめ検索用の DB を用意しておき、
検索を高速にする方法があります。DB を作成するツールとして Mew は
"namazu" を使います。"namazu" が取り扱えるのは、英語と日本語です。
@end ifset
@ifset us
@samp{?} and @samp{'} execute an external command and it searches
matched messages at the time. In addition to this method, Mew provides
fast search with a search DB. Mew makes use of "namazu" (catfish) to
construct DBs. The languages which "namazu" can handle are English and
Japanese.
@end ifset

@ifset jp
DB を使った検索を利用したい場合は、まず "namazu" やそれが必要とするコマ
ンド群をインストールして下さい。次に各フォルダに対し、検索用の DB を作
成します。そのためには対象となる Summary モードで @samp{km} と入力して
下さい。このように、DB を使った検索に関するコマンドは、@samp{k} という
文字で始まります。DB の作成にはフォルダのメッセージの数に比例した時間が
かかります。
@end ifset
@ifset us
To use search with DB, you should install "namazu" and commands which
"namazu" requires. Then make a DB by typing @samp{km} in each
necessary folder. As you may notice, all commands relating this
feature share the prefix @samp{k}. If a folder contains many messages,
it may take much time to make DB.
@end ifset

@ifset jp
DB を利用して検索し、@samp{*} マークを付けるには @samp{k?} を利用します。
通常は検索対象は本文とFrom:、Date:、Message-Id: になります。キーワード
を入力すれば、検索対象部分にそのキーワードを含むメッセージに @samp{*}
マークが付きます。
@end ifset
@ifset us
To put the @samp{*} mark to matched messages found by search with DB,
type @samp{k?}. The target is a body, From:, Date:, and Message-Id: by
default. That is, if you specify a "keyword", Mew puts the @samp{*}
mark messages whose target area contains the "keyword".
@end ifset

@ifset jp
他のフィールドを対象にするには、「"+" フィールド名 ":" キーワード」と書
いて下さい。以下は Subject: に mew-dist を含むメッセージを検索する例で
す。
@end ifset
@ifset us
If you want to target another header field, write "+" <field-name> ":"
<keyword>. The following is an example to find messages whose Subject:
contains "mew-dist".
@end ifset

@example
+subject:mew-dist
@end example

@ifset jp
二つのキーワードを両方含むようにしたい場合は "and"、どちらか一方でも含
んでいればいい場合は "or" で二つのキーワードを区切ります。このような高
度な利用法の詳細については、以下のページで、ブランクに何も入れずに
「search!」ボタンを押して得られる説明を読んで下さい。
@end ifset
@ifset us
If you want to obtain messages which include keyword A and keyword B,
you should separate them by "and". If you want to obtain messages
which include keyword A or keyword B, you should separate them by
"or". To understand this kind of usage, read the manual that you can
get by pressing "search!" button without specifying any keyword to the
blank.
@end ifset

@example
http://www.namazu.org/
@end example

@ifset jp
複数のフォルダに対し DB を利用して検索し、合致したメッセージを Virtual
モードに表示することができます。それには、@samp{k/} と入力して下さい。
フォルダ名には、ワイルドカードが利用できます。
@end ifset
@ifset us
You can search in one or more folders by search with DB and create
Virtual mode that displays all matched messages. For this, type
@samp{k/}. You can use wild card when you specify folder names.
@end ifset

@ifset jp
たとえば、+mew-1、+mew-2、+mew-3 というフォルダを対象にしたいなら、以下
のように入力します。
@end ifset
@ifset us
If you want to search in +mew-1, +mew-2, and +mew-3, type as follows:
@end ifset

@example
+mew-*
@end example

@ifset jp
あとは、@samp{k?} と同様にキーワードを入力すれば OK です。
@end ifset
@ifset us
Then you should specify keywords as you do for @samp{k?}.
@end ifset

@ifset jp
フォルダのメッセージが増減したら、@samp{km} で DB を作り直して下さい。
"namazu" が賢く差分を更新してくれます。
@end ifset
@ifset us
If the number of messages in a folder increased or decreased,
type @samp{km} to update the DB. "namazu" updates the gap in 
a sophisticated way.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Quit
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Quit, Customize, dbsearch, Top
@ifset jp
@chapter 一休み
@end ifset
@ifset us
@chapter Give me a break
@end ifset
@kindex q (Summary)
@kindex Q (Summary)
@kindex C-cC-q (Summary)
@kindex C-cC-q (Draft)
@kindex C-cC-q (Header)
@kindex C-cC-q (Addrbook)

@ifset jp
Mew を終了させたり、一時中断させたり、そのモード(正確にはバッファ)を消去
する方法を以下に示します。
@end ifset
@ifset us
Here are how to quit and suspend Mew and how to erase a mode (buffer).
@end ifset

@ifset jp
<Summary モードと Virtual モード>
@end ifset
@ifset us
<Summary mode and Virtual mode>
@end ifset

@table @samp
@ifset jp
@item q
Mew を一時中断し、他のバッファに切り替える。Mew 用のバッファはすべて残っ
ているので、バッファ操作で選べば再開できる。
@item Q
Mew を終了。Mew が使ったすべてのバッファを消去する。
@item C-cC-q
そのモード(正確にはバッファ)を消去する。
@end ifset
@ifset us
@item q
Suspend Mew then switch to another buffer. All buffers of Mew remain, so
you can resume with buffer operations.
@item Q
Quit Mew. All buffers of Mew are erased.
@item C-cC-q
Erase the current mode (buffer).
@end ifset
@end table

@ifset jp
<Draft モードと Header モード>
@end ifset
@ifset us
<Draft mode and Header mode>
@end ifset

@table @samp
@ifset jp
@item C-cC-q
その草稿を消去する。
@end ifset
@ifset us
@item C-cC-q
Erase the draft.
@end ifset
@end table

@ifset jp
<Addrbook モード>
@end ifset
@ifset us
<Addrbook mode>
@end ifset

@table @samp
@ifset jp
@item C-cC-q
そのバッファを消去する。
@end ifset
@ifset us
@item C-cC-q
Erase the buffer.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Customize
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Customize, summary-mode, Quit, Top
@ifset jp
@chapter カスタマイズ
@end ifset
@ifset us
@chapter Customizing Mew
@end ifset

@ifset jp
ここでは、Mew のデフォルトの動作を変更し、自分好みの Mew にする方法を説
明します。主に "~/.mew.el" で設定して下さい。
@end ifset
@ifset us
Here are explained how to change default setting of Mew and make Mew
your favorite. Edit "~/.mew.el" to do it!
@end ifset

@menu
@ifset jp
* summary-mode::                Summary mode
* message-mode::                Message mode
* draft-mode::                  Draft mode
* charset::                     文字コード
* highlight::                   色付け
* hooks::                       フック
* pop:: 			POP
* imap::                        IMAP
* nntp::                        NNTP
* smtp::			SMTP
* config::                      送受信の動作変化
* custom-misc::                 その他
@end ifset
@ifset us
* summary-mode::                Summary mode
* message-mode::                Message mode
* draft-mode::                  Draft mode
* charset::                     Character set
* highlight::                   Highlighting
* hooks::                       Hooks
* pop:: 			POP
* imap::                        IMAP
* nntp::                        NNTP
* smtp::			SMTP
* config::                      Changing receiving/sending behavior
* custom-misc::                 Miscellaneous
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node summary-mode, message-mode, Customize, Customize
@ifset jp
@section Summary mode
@end ifset
@ifset us
@section Summary mode
@end ifset
@vindex mew-summary-form
@vindex mew-summary-form-from-me-prefix
@vindex mew-summary-form-extract-rule
@vindex mew-summary-form-mark-delete
@vindex mew-summary-form-mark-review
@vindex mew-use-full-window
@vindex mew-summary-show-direction
@vindex mew-summary-mark-direction

@ifset jp
Summary モードの書式は、@samp{mew-summary-form} で指定できます。以下にデフォ
ルトの値を示します。
@end ifset
@ifset us
You can specify the format of Summary mode by @samp{mew-summary-form}.
The default value is as follows:
@end ifset

@example
'(type (5 date) " " (14 from) " " t (30 subj) "|" (0 body))
@end example

@ifset jp
このように、@samp{mew-summary-form} は、リスト、シンボル、文字列のリストで
す。
@end ifset
@ifset us
Like this, @samp{mew-summary-form} is a list of list, symbol, and string.
@end ifset

@enumerate
@ifset jp
@item
文字列はそのまま出力される
@item
リストは、整数とシンボルから構成される。シンボルは、呼び出す関数を意味す
る。関数名は、"mew-summary-form-" とシンボル名を連結することで作られる。
(例：' date というシンボルは、@samp{mew-summary-form-date} という関数名
になる) あらかじめ定義されているシンボルには、'type、'time、'date、'year、
'size、' from、'subj、'body がある。詳細は、
@samp{mew-summary-form-<symbol>} という名を持つ関数の説明を参照のこと。
整数は、関数が返す文字列が埋めるフィールドの幅を指定する。正の数は、左詰
めを意味する。負の数は、右詰めを意味する。もし、負の数を指定する場合、対
応する関数は ASCII 文字列を返す必要がある。0 は、行の残りを意味し、左詰
めとなる。
@item
@samp{t} 以外のシンボルは、(1 シンボル) に等しい。
@item
@samp{mew-summary-form} は、利用される際に先頭に (mark) が付け加えられる。
@item
@samp{t} は、スレッドの際に段付けする位置を意味する。
@end ifset
@ifset us
@item
A string is printed as it is.
@item
A list consists of an integer and a symbol. The symbol specifies a
function to be called. The name of the function is produced by
concatenating "mew-summary-form-" and the symbol name.
(e.g. @samp{mew-summary-form-date} for the symbol 'date').  Pre-defined
symbols are 'type, 'time, 'date, 'year, 'size, 'from, 'subj and
'body. For more details, see the explanation of the functions called
@samp{mew-summary-form-<symbol>}.  The integer specifies the width of
field which will be filled with a return string of the function.  A
positive value means padding SPCs on the right if necessary.  A negative
value means padding SPCs on the left if necessary. If a negative value
is specified, the corresponding function must return an ASCII string.  0
means the remaining width of the line and is treated as a positive
value.
@item
A symbol is equivalent to (1 symbol).
@item
'(mark) is appended to @samp{mew-summary-form} when used.
@item
@samp{t} means the position of thread indentation.
@end ifset
@end enumerate

@ifset jp
例を以下に示します。
@end ifset
@ifset us
An example is as follows:
@end ifset

@lisp
(setq mew-summary-form
      '(type (5 date) " " (-4 size) " " (14 from) " " t (30 subj) "|" (0 body)))
@end lisp

@ifset jp
@samp{mew-summary-form-from-me-prefix} は、自分から送信されたメッセージの宛
先の先頭に加えられる文字列です。初期値は "To:" です。
@end ifset
@ifset us
@samp{mew-summary-form-from-me-prefix} is the prefix to be prepend to an
destination address if the message is originated by me. The default is
"To:".
@end ifset

@ifset jp
@samp{mew-summary-form-extract-rule} は、From: フィールドからどの部分を切り
出すか指定するためのリストです。要素は、'name、'comment、'address、
'nickname、あるいは正規表現である必要があります。初期値は '(nickname) で
す。
@end ifset

@ifset us
@samp{mew-summary-form-extract-rule} is a list to specify what part to
extract from the From: field. Each element must be 'name, 'comment,
'address, 'nickname, or appropriate "regex". The default value is
'(nickname).
@end ifset

@ifset jp
次の例を考えて下さい。
@end ifset
@ifset us
Consider the following examples:
@end ifset

@example
A: Kazu Yamamoto <kazu@@mew.org>
B: kazu@@mew.org (Kazu Yamamoto)
C: Kazuhiko Yamamoto (Kazu) <kazu@@mew.org>
@end example

@ifset jp
それぞの要素は、以下のような意味を持ちます。
@end ifset
@ifset us
Each element returns the following value:
@end ifset

@enumerate
@ifset jp
@item
'name:: 名前の部分
@example
A. Kazu Yamamoto
B. (No match)
C. Kazuhiko Yamamoto (Kazu)
@end example
@item
'comment:: コメントの部分
@example
A: (No match)
B: Kazu Yamamoto
C: (Kazu)
@end example
@item
'address:: アドレスの部分
@example
A: kazu@@mew.org
B: kazu@@mew.org
C: kazu@@mew.org
@end example
@item
'nickname:: @samp{mew-addrbook-for-summary} の値に応じたアドレス帳の個人
情報のある要素。@samp{mew-addrbook-for-summary} の初期値は
@samp{'nickname} なので、通常はニックネームに変換される。何が指定できる
かは、@xref{draft-mode} を参照のこと。
@item
(regex):: 最初に合致した文字列
@end ifset
@ifset us
@item
'name:: Name part, if any
@example
A. Kazu Yamamoto
B. (No match)
C. Kazuhiko Yamamoto (Kazu)
@end example
@item
'comment:: Comment part, if any
@example
A: (No match)
B: Kazu Yamamoto
C: (Kazu)
@end example
@item
'address:: Address part
@example
A: kazu@@mew.org
B: kazu@@mew.org
C: kazu@@mew.org
@end example
@item
'nickname:: one element of personal information in Addrbook according to
@samp{mew-addrbook-for-summary}. The default value of
@samp{mew-addrbook-for-summary} is @samp{'nickname}. So, From: is
converted a nickname by default. To know what kind of value can be used,
refer to @xref{draft-mode}.
@item
(regex):: The substring first matched.
@end ifset
@end enumerate

@ifset jp
ある要素が合致しない場合、次の要素が評価されます。どの要素も From: フィー
ルドに合致しない場合か、この値が @samp{nil} の場合、From: フィールド全体
が利用されます。
@end ifset
@ifset us
If a element does not match, the next element is applied. If no element
matches to the From: field, or this value is @samp{nil}, the whole of
the From: field is used.
@end ifset


@ifset jp
@samp{mew-summary-form-mark-delete} が @samp{t} の場合、重複しているメッセー
ジに自動的に @samp{D} マークが付きます。初期値は @samp{nil} です。
@end ifset
@ifset us
If @samp{mew-summary-form-mark-delete} is @samp{t}, the @samp{D} mark
automatically is put onto duplicated messages. The default is
@samp{nil}.
@end ifset

@ifset jp
@samp{mew-summary-form-mark-review} が @samp{t} の場合、自分宛てのメッセー
ジに自動的に @samp{*} マークが付きます。初期値は @samp{nil} です。
@end ifset
@ifset us
If @samp{mew-summary-form-mark-review} is @samp{t}, the @samp{*} mark
automatically is put onto messages destined to me. The default is
@samp{nil}.
@end ifset


@ifset jp
いつも Emacs のフレーム全体で Mew を使いたい人は、以下の設定をして下さい。
@end ifset
@ifset us
If you want to use Mew with full Emacs frame, set like this.
@end ifset

@lisp
(setq mew-use-full-window t)
@end lisp


@ifset jp
Summary モードの @samp{SPC} は、@samp{mew-summary-show-direction} によっ
て、次のメッセージの表示の仕方が変わります。また同様に、強いマークを付け
た後カーソルが動く方向は @samp{mew-summary-mark-direction} により指定で
きます。以下の値を設定できます。
@end ifset
@ifset us
@samp{SPC} in Summary mode decide the next action to view a message
according to @samp{mew-summary-show-direction}. Likewise, you can
specify the cursor direction after putting a strong mark by
@samp{mew-summary-mark-direction}. You can select one from the following
candidates.
@end ifset

@table @samp
@ifset jp
@item up 
上のメッセージを表示する。
@item down 
下のメッセージを表示する。
@item next
読み進めている方向の次のメッセージを表示する。
@item stop
次は表示しない。
@end ifset
@ifset us
@item up 
Display the message above.
@item down 
Display the message below.
@item next
Display the next message in the direction.
@item stop
Do not display the next message.
@end ifset
@end table

@ifset jp
両方とも初期値は @samp{next} です。いつもメッセージを下から読む人は、以
下のようにすればよいでしょう。
@end ifset
@ifset us
The default value for both is @samp{next}. If you read messages from the
bottom, set as follows:
@end ifset

@lisp
(setq mew-summary-show-direction 'up)
@end lisp

@c %%%%%%%%%%%%%%%%%
@node message-mode, draft-mode, summary-mode, Customize
@ifset jp
@section Message mode
@end ifset
@ifset us
@section Message mode
@end ifset
@vindex mew-prog-text/html-ext
@vindex mew-prog-text/html-ext-arg
@vindex mew-mime-multipart-alternative-list
@kindex C-cC-e (Summary)
@kindex C-cC-y (Summary)
@kindex C-uC-cC-e (Summary)
@kindex , (Summary)
@kindex C-cTAB (Summary)
@kindex : (Summary)

@ifset jp
Emacs がサポートしてないデータ型のファイルは、Message モードに直接表示
できません。この場合、適切な外部アプリケーションがあれば、それを使って
表示可能です。Summary モードにおいて、パートの上で、@samp{C-cC-e} と入
力すると、Message モードに指示された外部アプリケーションを起動し、その
パートを表示できます。メッセージの本文がヘッダと同時に表示され、本文を
パートとして選択できない場合、@samp{:} を押します。すると、本文が第1パー
トとして表示されるので、これを選択し、@samp{C-cC-e} と入力すれば、本文
に対して外部コマンドを起動できます。本文が HTML で、外部のブラウザに表
示させたいときが典型例でしょう。
@end ifset
@ifset us
It is impossible to display a file, whose data type is not supported
by Emacs, to Message mode. In this case, if there is an appropriate
external application, it can be displayed with the application. Typing
@samp{C-cC-e} on a part in Summary mode executes an external
application showed in Message mode, and displays the file with it. If
you cannot select a body as a part because the body displayed with its
header in Message mode, type @samp{:}. And the body is displayed as
part 1. You should choose part 1 and type @samp{C-cC-e} to execute an
external application. A typical example is you want to visualize the
body of an HTML message.
@end ifset

@ifset jp
Message モードで指示されたものではなく、他の外部アプリケーションを指定し
たい場合は、@samp{C-cC-y} を使って下さい。また、データ型を指定し、そのデー
タ型に応じた外部アプリケーションを起動したい場合は、@samp{C-uC-cC-e} を
利用して下さい。
@end ifset
@ifset us
If you want to specify another external application rather than the
application showed in Message mode, type @samp{C-cC-y}. If you want to
specify a data type and to execute an application according to the data
type, use @samp{C-uC-cC-e}.
@end ifset

@ifset jp
現在のメッセージやパートを生の書式で Message モードに表示するには、
@samp{,} を使って下さい。メッセージ全体をファイルとして開くには、
@samp{C-cTAB} を使います。)
@end ifset
@ifset us
To insert a message or a part into Message mode in the raw format, type
@samp{,}. To open an entire message as a file, type @samp{C-cTAB}.
@end ifset


@ifset jp
単に Mew をインストールした状態では、Text/Html を表示するには "mozilla" 
のような外部アプリケーションが必要です。この場合 Text/Html は、単にパー
トとして、あるいはメッセージの本文として扱われ、外部アプリケーションを起
動させる説明が Message モードに表示されています。それぞれ、パート、およ
びメッセージ上で、@samp{C-cC-e} と入力すれば、外部アプリケーションに 
Text/Html を表示します。メッセージ上で @samp{C-cC-e} と入力した場合は、
(ヘッダを除いて)本文のみが外部アプリケーションに渡されます。
@end ifset
@ifset us
If you just install Mew, an external application like "mozilla" is
necessary to display Text/Html. In this situation, Text/Html is treated
as a part or a body of a message, and explanation to execute an external
application is shown in Message mode. Typing @samp{C-cC-e} on the part
or the message lets the application display the Text/Html. When you type
@samp{C-cC-e} on the message, only body part is passed to the
application.
@end ifset

@ifset jp
利用する Text/Html 用の外部アプリケーションは、
@samp{mew-prog-text/html-ext} に指定します。以下は、"mozilla" に設定して
いる例です。(必要であれば、アプリケーションの引数を 
@samp{mew-prog-text/html-ext-arg} に設定して下さい。)
@end ifset
@ifset us
Set your favorite external application for Text/Html to
@samp{mew-prog-text/html-ext}. The following is an example in the case
of "mozilla". (Also, configure @samp{mew-prog-text/html-ext-arg} by
setting application arguments if necessary.)
@end ifset

@lisp
(setq mew-prog-text/html-ext "mozilla")
@end lisp

@ifset jp
"w3m" と "emacs-w3m" をインストールすると、Text/Html を Message モードに
表示できるようになります。(以下で説明する "wvHtml"、"xlhtml"、"ppthtml" 
は、単なる "w3m" ではなく、国際化された "w3m-m17n" が必要です。) 両者を
インストールしたら、"~/.mew.el" に以下の設定を加えて下さい。
@end ifset
@ifset us
If you install "w3m" and "emacs-w3m", Text/Html can be displayed in
Message mode. (Please note that multilingualized "w3m", not pure "w3m",
is necessary for "wvHtml", "xlhtml", and "ppthtml" described below.)
When you install both of them, add the following to "~/.mew.el'.
@end ifset

@lisp
(condition-case nil
    (require 'mew-w3m)
  (file-error nil))
@end lisp

@ifset jp
これで、あたかも Text/Plain であるかのように、Text/Html を Message モー
ドに表示できるようになります。この際も、@samp{C-cC-e} の操作は有効です。
@end ifset
@ifset us
With this, Text/Html can be displayed in Message mode as if it were
Text/Plain. Even in this situation, @samp{C-cC-e} is a valid operation.
@end ifset

@ifset jp
最近、Multipart/Alternative の中に Text/Plain と Text/Html の両方が入っ
ており、どちらかを選ぶようになっているメッセージを多く見掛けます。Mew は、
標準では Text/Plain の方を優先して表示します。"emacs-w3m" をインストール
すれば、Text/Html の方を優先したくなるかもしれません。その場合、以下の設
定を "~/.mew.el" に加えて下さい。(ここで @xref{multipart} を読み、
@samp{:} の使い方も思い出しておきましょう。)
@end ifset
@ifset us
Recently there are many message whose have Multipart/Alternative, which
consists of Text/Plain and Text/Html. By default, Mew selects
Text/Plain. When you install "emacs-w3m", you may want to choose
Text/Html.  In this case, add the following to "~/.mew.el". (Now, it's
good idea to get back to @xref{multipart} to review how to use
@samp{:}.)
@end ifset

@lisp
(setq mew-mime-multipart-alternative-list
      '("Text/Html" "Text/Plain" ".*"))
@end lisp


@ifset jp
"wvHtml"、"xlhtml"、"ppthtml" というコマンドをインストールすれば、それぞ
れ WORD、Excel、PowerPoint ファイルのテキスト部分を、Message モードに表
示可能です。これらのコマンドは、HTML を利用するので、上記の Text/Html の
設定を完了させて下さい。また、UTF-8 (Unicode) を利用しますので、バージョ
ン 21.3 以前の Emacs には、Mule-UCS もインストールして下さい。
@end ifset
@ifset us
If you install "wvHtml", "xlhtml", "ppthtml", you can display text parts
of WORD, Excel, and PowerPoint file in Message, respectively. Since
these commands uses HTML, the configuration of Text/Html above is
required. Also, you need to install Mule-UCS for Emacs 21.3 or earlier
because UTF-8 (Unicode) is required.
@end ifset

@ifset jp
これで、たとえば WORD ファイルをあたかもテキストのように、Message モード
に表示可能になります。また、明示的に @samp{C-cC-e} と入力しても、テキス
トとして Message モードに表示します。
@end ifset
@ifset us
With this, a WORD file, for example, can be displayed in Message mode as
if it were text. Also, typing @samp{C-cC-e} explicitly displays it in
Message mode as text.
@end ifset

@ifset jp
ここで説明したコマンドなどの入手先は、"mew.dot.mew" を参照して下さい。
@end ifset
@ifset us
To know the repositories of the commands above, see "mew.dot.mew".
@end ifset

@c %%%%%%%%%%%%%%%%%
@node draft-mode, charset, message-mode, Customize
@ifset jp
@section Draft mode
@end ifset
@ifset us
@section Draft mode
@end ifset
@vindex mew-from
@vindex mew-cc
@vindex mew-dcc
@vindex mew-header-alist
@vindex mew-cite-fields
@vindex mew-cite-format
@vindex mew-cite-prefix
@vindex mew-cite-prefix-function
@vindex mew-addrbook-for-cite-label
@vindex mew-addrbook-for-cite-prefix

@ifset jp
自分へ Cc: したい人は @samp{mew-cc}を設定して下さい。返答の際には、対象
のメッセージから、別途 Cc: が用意される場合があります。複数の Cc: がある
場合、送信時に 1 つにまとめられます。
@end ifset
@ifset us
Define @samp{mew-cc} to use Cc:. When replying, another Cc: field may be
prepared from the target message. If there are multiple Cc: fields, they
are combined to one field on sending.
@end ifset

@ifset jp
バックアップのため、自分が送るメッセージを受け取りたいと考え、しかもヘッ
ダに自分のアドレスを残したくないなら、Dcc: を使って下さい。
@samp{mew-dcc} に自分のアドレスを設定しましょう。
@end ifset
@ifset us
If you want to receive your originating messages for backup without
specifying your address, use Dcc:. Set your address to @samp{mew-dcc}.
@end ifset

@ifset jp
いつも入れて欲しいヘッダは、@samp{mew-header-alist} に連想リスト形式で定
義して下さい。以下に例を示します。
@end ifset
@ifset us
Set header fields that you want to insert every time when you write messages
to @samp{mew-header-alist} as an associate list. The following is an
example.
@end ifset

@lisp
(setq mew-header-alist
      '(("X-fingerprint:" . "6B 63 38 88 67 5E 96 8E  CE A4 62 73 3F 11 64 94")
        ("X-URL:" . "http://www.Mew.org/~kazu/")))
@end lisp

@ifset jp
引用ラベルは、引用するフィールドを @samp{mew-cite-fields}、ラベルの書式
を @samp{mew-cite-format} に定義します。引用記号は 
@samp{mew-cite-prefix} に指定します。デフォルトは、以下のようになってい
ます。
@end ifset
@ifset us
To customize citation label, define field to cite in
@samp{mew-cite-fields} and format in @samp{mew-cite-format}. Define
citation prefix to @samp{mew-cite-prefix}. The default declaration is as
follows:
@end ifset

@lisp
(defvar mew-cite-fields '("From:" "Subject:" "Date:"))
(defvar mew-cite-format "From: %s\nSubject: %s\nDate: %s\n\n")
(defvar mew-cite-prefix "> ")
@end lisp

@ifset jp
引用ラベルに Message-ID: を加えるには以下のようにします。
@end ifset
@ifset us
To add Message-ID: to citation label, take this way.
@end ifset

@lisp
(setq mew-cite-fields '("From:" "Subject:" "Date:" "Message-ID:"))
(setq mew-cite-format "From: %s\nSubject: %s\nDate: %s\nMessage-ID: %s\n\n")
@end lisp

@ifset jp
引用記号にアドレスのユーザ部分が付くようにするには以下のようにします。
@end ifset
@ifset us
To add a user part of an address to the citation prefix, configure as
follows:
@end ifset

@lisp
(setq mew-cite-prefix-function (function mew-cite-prefix-username))
@end lisp

@ifset jp
これで引用記号は以下のようになります。
@end ifset
@ifset us
With this, the citation prefix becomes like this:
@end ifset

@example
@ifset jp
From: SUMIKAWA Munechika <sumikawa@@ebina.hitachi.co.jp>
Subject: Wine
Date: Wed, 23 Jul 1997 11:40:50 +0900

sumikawa> おはようからおやすみまでニートでおなじみの角川です。
sumikawa> 
sumikawa> さて、とろけるワイン作戦ですが、定石通り '89 のボルドーの
sumikawa> カベルネ・ソービニョンを狙いたいと思います。
@end ifset
@ifset us
From: SUMIKAWA Munechika <sumikawa@@ebina.hitachi.co.jp>
Subject: Wine
Date: Wed, 23 Jul 1997 11:40:50 +0900

sumikawa> Hi, it's Sumikawa, the guy who's neat from good morning 
sumikawa> to good night.
sumikawa>
sumikawa> Talking about the wonderful wine party, I would propose 
sumikawa> Cabernet Sauvignon, Bordeaux, '90. 
@end ifset
@end example

@ifset jp
引用ラベルの From: の部分と、引用記号は、アドレス帳の個人情報の要素に変
換できます。それぞれ、@samp{mew-addrbook-for-cite-label}、
@samp{mew-addrbook-for-cite-prefix} で指定できます。初期値はそれぞれ 
@samp{nil} と @samp{'username} です。以下のような値が設定できます。
@end ifset
@ifset us
Both an address in the citation label and the citation prefix can be
converted to an element of a personal information in Addrbook.  They can
be configured by @samp{mew-addrbook-for-cite-label} and
@samp{mew-addrbook-for-cite-prefix}, respectively. The default values are
@samp{nil} and @samp{'username}, respectively. You can set out of the
following values.  them

@end ifset

@table @asis
@ifset jp
@item 'shortname
短縮名
@item 'address
アドレス
@item 'username
アドレスのユーザ部分
@item 'nickname
ニックネーム
@item 'name
正式な氏名
@end ifset
@ifset us
@item 'shortname
Short name
@item 'address
Address
@item 'username
User part of address
@item 'nickname
Nickname
@item 'name
Full name
@end ifset
@end table

@ifset jp
例として以下のような設定を考えてみましょう。
@end ifset
@ifset us
Let's consider the following example.
@end ifset

@lisp
(setq mew-addrbook-for-cite-label 'nickname)
(setq mew-addrbook-for-cite-prefix 'nickname)
@end lisp

@ifset jp
最初の設定でラベルの中のアドレスがニックネームに変わります。また、次の設
定で引用記号もニックネームに置き換わります。
@end ifset
@ifset us
With the first line, an address in the citation label is replaced with
its nickname. The second line indicates that the cite prefix is replaced
with its nickname.
@end ifset

@example
@ifset jp
From: すみっち
Subject: Wine
Date: Wed, 23 Jul 1997 11:40:50 +0900

すみっち> おはようからおやすみまでニートでおなじみの角川です。
すみっち> 
すみっち> さて、とろけるワイン作戦ですが、定石通り '89 のボルドーの
すみっち> カベルネ・ソービニョンを狙いたいと思います。
@end ifset
@ifset us
From: sumitch
Subject: Wine
Date: Wed, 23 Jul 1997 11:40:50 +0900

sumitch> Hi, it's Sumikawa, the guy who's neat from good morning 
sumitch> to good night.
sumitch>
sumitch> Talking about the wonderful wine party, I would propose 
sumitch> Cabernet Sauvignon, Bordeaux, '90. 
@end ifset
@end example

@c %%%%%%%%%%%%%%%%%
@node charset, highlight, draft-mode, Customize
@ifset jp
@section 文字コード
@end ifset
@ifset us
@section Character set
@end ifset
@vindex mew-charset-m17n
@vindex mew-ask-charset
@vindex mew-charset-latin

@ifset jp
@xref{charset-guess} で説明したように、Mew ではメッセージを作成する際に
適切な文字コードを自動的に選択します。
@end ifset
@ifset us
As described in @xref{charset-guess}, Mew automatically chooses an
appropriate charset for the message when composing.
@end ifset

@ifset jp
もし複数の言語の文字が混在しており、国際化された文字コードを選択する必要
がある場合は、@samp{mew-charset-m17n} の値を利用します。初期値は、
"utf-8" (Unicode と理解してよい)です。"iso-2022-jp-2" にしたい人は、以下
のように設定するとよいでしょう。
@end ifset
@ifset us
If characters of multiple languages exist, and if it is necessary to use
an international charset, @samp{mew-charset-m17n} is used. Its default
value is "utf-8" (equivalent to Unicode). If you want to set it to
"iso-2022-jp-2", configure like this:
@end ifset

@lisp
(setq mew-charset-m17n "iso-2022-jp-2")
@end lisp

@ifset jp
メッセージを作成した際に、推測された文字コードを確認したい場合は、
@samp{mew-ask-charset} を設定して下さい。
@end ifset
@ifset us
If you want to check a chosen charset when composing, configure
@samp{mew-ask-charset}.
@end ifset

@table @samp
@ifset jp
@item nil
どのような文字コードが利用されても確認なし
@item 文字コードのリスト
このリストに存在しない文字コードが利用された場合に確認
@item t
@samp{mew-charset-m17n} が利用された場合に確認
@end ifset
@ifset us
@item nil
Not ask.
@item A list of charset
Ask if the charset is not a member of the list.
@item t
Ask if @samp{mew-charset-m17n} is used.
@end ifset
@end table

@ifset jp
たとえば、US-ASCII と ISO-2022-JP 以外の文字コードが選ばれた場合確認した
いのであれば、以下のように設定して下さい。

@lisp
(setq mew-ask-charset '("us-ascii" "iso-2022-jp"))
@end lisp
@end ifset
@ifset us
For instance, if you want to check when charset other than US-ASCII,
ISO-8859-1, and ISO-8859-15, configure like this:

@lisp
(setq mew-ask-charset '("us-ascii" "iso-8859-1" "iso-8859-15"))
@end lisp

@end ifset

@ifset jp
こう設定しているとき、たとえば "utf-8" が選択されると、以下のように訊か
れます。
@end ifset
@ifset us
For example, when "utf-8" is chosen for a message with this
configuration, you are asked like this:
@end ifset

@example
utf-8 is used. OK? (y or n) 
@end example

@ifset jp
@samp{y} を押すと、メッセージが送信されます(あるいは、キューに溜ります)。
@samp{n} を押すと、草稿が元の状態に戻ります。
@end ifset
Typing @samp{y} makes the composed message sent (or queued). If you type
@samp{n}, you will go back to the original draft.
@ifset us

@end ifset

@ifset jp
ヨーロッパでは、Latin 1 (ISO-8859-1) の代りに、ユーロ記号を含む Latin 9
(ISO-8859-15、通称 Latin 0) が使われ始めています。草稿に、Latin 1 の文字
と Latin 9 の文字が混在していると、以下の手順によって、文字コードが決定
されます。
@end ifset
@ifset us
In Europe Latin 9 (ISO-8859-15 or Latin 0), which includes the euro
sign, is getting more and more popular instead of Latin 1 (ISO-8859-1).
If characters of both Latin 1 and Lain 9 exit in a draft, Mew takes the
following step to decide a charset.
@end ifset

@ifset jp
@enumerate
@item
@samp{unify-8859-on-decoding-mode} を利用している場合：
@enumerate
@item
ISO-8859-1 に収まるなら "iso-8859-1" を利用
@item
そうでないなら "utf-8" を利用
@end enumerate
@item
@samp{unify-8859-on-decoding-mode} を利用していない場合：
@enumerate
@item
ISO-8859-1 と ISO-8859-15 のどちらにも収まる場合、
@samp{mew-charset-latin} を利用
@item
ISO-8859-1 に収まるなら "iso-8859-1" を利用
@item
ISO-8859-15 に収まるなら "iso-8859-15" を利用
@item
そうでないなら、"utf-8" を利用
@end enumerate
@end enumerate
@end ifset
@ifset us
@enumerate
@item
If @samp{unify-8859-on-decoding-mode} is used:
@enumerate
@item
Use "iso-8859-1" if no loss.
@item
Otherwise, use "utf-8".
@end enumerate
@item
If @samp{unify-8859-on-decoding-mode} is not used:
@enumerate
@item
If both ISO-8859-1 and ISO-8859-15 can be used with no loss,
@samp{mew-charset-latin} is used.
@item
Use "iso-8859-1" if no loss.
@item
Use "iso-8859-15" if no loss.
@item
Otherwise, use "utf-8".
@end enumerate
@end enumerate
@end ifset

@ifset jp
@samp{mew-charset-latin} の初期値は、"iso-8859-15" です。"iso-8859-1" に
したい場合は、以下のように設定します。
@end ifset
@ifset us
The default value of @samp{mew-charset-latin} is "iso-8859-15".  If you
want to set it to "iso-8859-1", configure like this:
@end ifset

@lisp
(setq mew-charset-latin "iso-8859-1")
@end lisp

@c %%%%%%%%%%%%%%%%%
@node highlight, hooks, charset, Customize
@ifset jp
@section 色付け
@end ifset
@ifset us
@section Highlighting
@end ifset
@vindex mew-use-highlight-mark
@vindex mew-use-highlight-header
@vindex mew-use-highlight-body
@vindex mew-highlight-body-max-size
@vindex mew-use-highlight-url
@vindex mew-use-cursor-mark
@vindex mew-cursor-mark
@vindex mew-use-highlight-cursor-line
@vindex mew-use-highlight-mouse-line
@vindex mew-use-highlight-x-face

@ifset jp
@samp{mew-use-highlight-mark} が @samp{t} の場合、マークの付いたメッセー
ジに色が付きます。初期値は @samp{t} です。
@end ifset
@ifset us
If @samp{mew-use-highlight-mark} is @samp{t}, marked message are
highlighted. The default is @samp{t}.
@end ifset

@ifset jp
@samp{mew-use-highlight-header} が @samp{t} の場合、メッセージのヘッダに
色が付きます。初期値は @samp{t} です。
@end ifset
@ifset us
If @samp{mew-use-highlight-header} is @samp{t}, the header of a message
is highlighted. The default is @samp{t}.
@end ifset

@ifset jp
@samp{mew-use-highlight-body} が @samp{t} の場合、メッセージの本文に色が
付きます。初期値は @samp{t} です。色を付ける上限は、
@samp{mew-highlight-body-max-size} で指定できます。初期値は 10000 バイト
です。
@end ifset
@ifset us
If @samp{mew-use-highlight-body} is @samp{t}, the body of a message is
highlighted. The default is @samp{t}. The limit to be highlighted can be
set by @samp{mew-highlight-body-max-size}. The default is 10000 bytes.
@end ifset

@ifset jp
@samp{mew-use-highlight-url} が @samp{t} の場合、メッセージ中の URL に仕
掛けが施されて、マウスを持っていくと光るようになります。初期値は 
@samp{t} です。
@end ifset
@ifset us
If @samp{mew-use-highlight-url} is @samp{t}, a spell is cast to URL
strings in a message. So, when you move the cursor onto the URL, it is
highlighted.  The default is @samp{t}.
@end ifset

@ifset jp
@samp{mew-use-cursor-mark} が @samp{t} の場合、Summary モードにおいて、
現在表示しているメッセージの行頭に、@samp{mew-cursor-mark} で指定された
目印が付きます。初期値は @samp{nil} です。@samp{mew-cursor-mark} の初期
値は ">" です。
@end ifset
@ifset us
If @samp{mew-use-cursor-mark} is @samp{t}, the mark specified
@samp{mew-cursor-mark} is putted to the beginning of the current line.
The default is @samp{nil}. The default of @samp{mew-cursor-mark} is ">".
@end ifset

@ifset jp
@samp{mew-use-highlight-cursor-line} が @samp{t} の場合、Summary モード
でカーソルのある行に下線が引かれます。初期値は @samp{t} です。
@end ifset
@ifset us
If @samp{mew-use-highlight-cursor-line} is @samp{t}, underline is put on
the cursor line in Summary mode. The default is @samp{t}.
@end ifset

@ifset jp
@samp{mew-use-highlight-mouse-line} が @samp{t} の場合、Emacs がマウスの
色付けをサポートしていれば、Summary モードでマウスのある行に色がつきます。
真中のボタンをクリックしながら、マウスだけでメッセージを読む際にはとても
便利です。初期値は @samp{nil} になっています。
@end ifset
@ifset us
If @samp{mew-use-highlight-mouse-line} is @samp{t} on Emacs which
supports mouse highlight, the mouse line is painted in Summary
mode. This is very convenient to read messages clicking the middle
button of the mouse. The default value is @samp{nil}.
@end ifset

@ifset jp
@samp{mew-use-highlight-x-face} が @samp{t} で、かつグラフィカル Emacs 
を使っている場合、ヘッダ中の X-Face: が Message モードでアイコン化されま
す。グラフィカル Emacs での初期値は @samp{t} です。
@end ifset
@ifset us
If @samp{mew-use-highlight-x-face} is @samp{t} on Graphical Emacs,
X-Face: in a header is iconified in Message mode. The default value on
Graphical Emacs is @samp{t}.
@end ifset

@node hooks, pop, highlight, Customize
@ifset jp
@section フック
@end ifset
@ifset us
@section Hooks
@end ifset

@ifset jp
Mew で用意されているフックをまとめます。
@end ifset
@ifset us
Here is a summary of hooks used in Mew.
@end ifset

@vtable @samp
@ifset jp
@item mew-env-hook
Mew の起動時の環境が設定される前に評価される。
@item mew-init-hook
Mew の起動時に評価される。
@item mew-summary-mode-hook
Summary モードに入るときに評価される。
@item mew-virtual-mode-hook
Virtual モードに入るときに評価される。
@item mew-thread-display-hook
スレッドが表示された後に評価される。
@item mew-header-mode-hook
Header モードに入るときに評価される。
@item mew-draft-mode-hook
Draft モードに入るときに評価される。
@item mew-draft-mode-newdraft-hook
新しい草稿が用意された際に、Draft モードにおいて評価される。
@item mew-draft-mode-reedit-hook
+draft でないフォルダにある古い草稿を再編集した際に、Draft モードにおい
て評価される。
@item mew-draft-mode-reedit-draft-hook
+draft でないフォルダにある草稿を再編集した際に、Draft モードにおいて評
価される。
@item mew-draft-mode-reedit-queue-hook
+queue または +postq フォルダにあるメッセージを再編集した際に、Draft モー
ドにおいて評価される。
@item mew-draft-mode-edit-again-hook
古い形式で戻ってきたメッセージを再編集した際に、Draft モードにおいて評価
される。
@item mew-message-mode-hook
Message モードに入るときに評価される。
@item mew-message-hook
メッセージが Message モードで表示される度に評価される。
@item mew-make-message-hook
Draft モードで MIME メッセージを作る前、つまり @samp{C-cC-m} の際の最初
に評価される。例：(add-hook 'mew-make-message-hook 'ispell-message)
@item mew-send-hook
メッセージを SMTP で送信/キューイングする前に評価される。メッセージの最
終形が作られる前に評価されることに注意。
@item mew-post-hook
メッセージを NNTP で投稿/キューイングする前に評価される。メッセージの最
終形が作られる前に評価されることに注意。
@item mew-real-send-hook
メッセージを SMTP で送信/キューイングする前に評価される。メッセージの最
終形が作られた後に評価されることに注意。
@item mew-real-post-hook
メッセージを NNTP で送信/キューイングする前に評価される。メッセージの最
終形が作られた後に評価されることに注意。
@item mew-smtp-flush-hook
+queue フォルダにメッセージがある場合に、SMTP が起動される前に評価され
る。
@item mew-nntp2-flush-hook
+postq フォルダにメッセージがある場合に、NNTP が起動される前に評価され
る。
@item mew-smtp-sentinel-hook
SMTP が終了する際に評価される。
@item mew-nntp-sentinel-hook
受信用の NNTP が終了する際に評価される。
@item mew-nntp2-sentinel-hook
送信用の NNTP が終了する際に評価される。
@item mew-pop-sentinel-hook
POP が終了する際に評価される。
@item mew-pop-sentinel-non-biff-hook
Biff ではない POP が終了する際に評価される。
@item mew-imap-sentinel-hook
IMAP が終了する際に評価される。
@item mew-imap-sentinel-non-biff-hook
Biff ではない IMAP が終了する際に評価される。
@item mew-scan-sentinel-hook
Summary モードの @samp{s} が終了する際に評価される。
@item mew-summary-ls-no-scan-hook
Summary モードの @samp{s} がフォルダの一覧を取らなかった場合に評価される。
@item mew-summary-exec-hook
Summary モードの @samp{x} の実行が終了する際に評価される。
@item mew-sort-hook
Summary モードの @samp{S} の実行が終了する際に評価される。
@item mew-pack-hook
Summary モードの @samp{O} の実行が終了する際に評価される。
@item mew-summary-toggle-disp-msg-hook
Summary モードの @samp{v} の実行が終了する際に評価される。
@item mew-syntax-format-hook
マルチパートの書式を作成する関数 @samp{mew-syntax-format} が呼ばれた際に
評価される。
@item mew-addrbook-mode-hook
アドレス帳の登録モードに入るときに評価される。
@item mew-cite-hook
Draft モードで引用する際に呼ばれる。通常 supercite を設定するために使う。
@item mew-before-cite-hook
Draft モードでメッセージを引用する直前に呼ばれる。
@item mew-suspend-hook
Mew を一時中断した際に評価される。
@item mew-quit-hook
Mew の終了時に評価される。
@end ifset
@ifset us
@item mew-env-hook
Hook called at initialize time before setting environment.
@item mew-init-hook
Hook called at initialize time.
@item mew-summary-mode-hook
Hook called in Summary mode.
@item mew-virtual-mode-hook
Hook called in Virtual mode.
@item mew-thread-display-hook
Hook called after new threads are displayed.
@item mew-header-mode-hook
Hook called in Header mode.
@item mew-draft-mode-hook
Hook called in Draft mode.
@item mew-draft-mode-newdraft-hook
Hook called in Draft mode only when new draft is prepared.
@item mew-draft-mode-reedit-hook
Hook called in Draft mode when a message not in +draft is re-edited.
@item mew-draft-mode-reedit-draft-hook
Hook called in Draft mode when a message in +draft is re-edited.
@item mew-draft-mode-reedit-queue-hook
Hook called in Draft mode when a message in +queue or +postq is
re-edited.
@item mew-draft-mode-edit-again-hook
Hook called in Draft mode when a message returned with the old style is
edited again.
@item mew-message-mode-hook
Hook called in Message mode.
@item mew-message-hook
Hook called whenever message displayed.
@item mew-make-message-hook
Hook called before making a message in Draft mode. A good example is as
follows: (add-hook 'mew-make-message-hook 'ispell-message)
@item mew-send-hook
Hook called before sending/queuing an e-mail message in Draft mode.
Note that this hook is called before composition of the message
@item mew-post-hook
Hook called before posting/queuing  a NetNews message in Draft mode.
Note that this hook is called before composition of the message.
@item mew-real-send-hook
Hook called before sending/queuing an e-mail message in Draft mode.
Note that this hook is called after composition of the message.
@item mew-real-post-hook
Hook called before sending/queuing a NetNews message in Draft mode.
Note that this hook is called after composition of the message.
@item mew-smtp-flush-hook
Hook called before SMTP runs if messages exist in +queue.
@item mew-nntp2-flush-hook
Hook called before NNTP runs if messages exist in +postq.
@item mew-smtp-sentinel-hook
Hook called when a SMTP process finished.
@item mew-nntp-sentinel-hook
Hook called when a NNTP process to receive messages finished.
@item mew-nntp2-sentinel-hook
Hook called when a NNTP process to post messages finished.
@item mew-pop-sentinel-hook
Hook called when a POP process finished.
@item mew-pop-sentinel-non-biff-hook
Hook called when a non-Biff POP process finished.
@item mew-imap-sentinel-hook
Hook called when a NNTP process to post messages finished.
@item mew-imap-sentinel-hook
Hook called when an IMAP process finished.
@item mew-imap-sentinel-non-biff-hook
Hook called when a non-Biff IMAP process finished.
@item mew-scan-sentinel-hook
Hook called when scan finished.
@item mew-summary-ls-no-scan-hook
Hook called when mew-summary-ls does not scan a folder.
@item mew-summary-exec-hook
Hook called when @samp{x} in Summary mode finished.
@item mew-sort-hook
Hook called when @samp{S} in Summary mode finished.
@item mew-pack-hook
Hook called when @samp{O} in Summary mode finished.
@item mew-summary-toggle-disp-msg-hook
Hook called when @samp{v} in Summary finished.
@item mew-syntax-format-hook
Hook called when mew-syntax-format is called.
@item mew-addrbook-mode-hook
Hook called in Addrbook mode.
@item mew-cite-hook
Hook for an external cite mechanism. If you want to use super-cite, 
(setq mew-cite-hook 'sc-cite-original).
@item mew-before-cite-hook
Called in mew-summary-reply-with-citation before citation.
@item mew-suspend-hook
Hook called on suspend.
@item mew-quit-hook
Hook called on quit.
@end ifset
@end vtable

@ifset jp
以下にフックの設定例を示します。
@end ifset
@ifset us
Here are some example configurations of hook
@end ifset

@ifset jp
Draft モードでは、フックを @samp{text-mode-hook}、
@samp{mew-draft-mode-hook} の順で評価します。@samp{text-mode-hook} で 
@samp{auto-fill-mode} を設定していない人は、 @samp{mew-draft-mode-hook} 
を以下のように設定するのがよいかもしれません。
@end ifset
@ifset us
Draft mode evaluates @samp{text-mode-hook} and
@samp{mew-draft-mode-hook} in order. If you do not set
@samp{auto-fill-mode} to @samp{text-mode-hook}, It would be useful to
define @samp{mew-draft-mode-hook} as follows:
@end ifset

@lisp
(setq mew-draft-mode-hook (function (lambda () (auto-fill-mode 1))))
@end lisp

@c %%%%%%%%%%%%%%%%%
@node pop, imap, hooks, Customize
@ifset jp
@section POP
@end ifset
@ifset us
@section POP
@end ifset

@ifset jp
Mew では、メッセージを受信する際に POP を利用できます。ここでは、POP を
制御するための以下の変数についてまとめます。
@end ifset
@ifset us
Mew can POP to retrieve messages. This section describes following
variables to control POP.
@end ifset

@vtable @samp
@ifset jp
@item mew-pop-server
POP サーバの名前。
@item mew-pop-ssh-server
POP を SSH 経由で取得する場合の SSH サーバの名前。
@item mew-pop-ssl
POP over SSL を使うか否か。
@item mew-pop-ssl-port
POP over SSL のポート番号。
@item mew-pop-user
POP のアカウント名。初期値はログイン名。
@item mew-pop-auth
POP の認証方式。@samp{'pass} は USER/PASS (生パスワード)、@samp{'apop} 
は APOP、@samp{t} は @samp{mew-pop-auth-list} に従った SASL を意味する。
初期値は @samp{'apop}。
@item mew-pop-auth-list
SASL で利用する認証方式のリスト。優先順位の高い順に並べる。現在、
"CRAM-MD5" が利用可能。
@item mew-pop-delete
POP サーバからメッセージを取得後、POP サーバにあるメッセージを削除するか
否か。@samp{t} なら削除。@samp{nil} なら削除しない。数値 N なら、最初の
アクセスから N 日後に削除する。初期値は @samp{t}。
@item mew-pop-size
POP サーバから取得するメッセージの大きさの上限。初期値は 55296 バイト。0 
に設定すると、上限なしの意味になり、すべてのメッセージを取得する。上限に
引っ掛かったメッセージの全体を取得する方法については、@xref{retrieving} 
を参照のこと。
@item mew-pop-body-lines
大きさの上限にひっかかったメッセージの本文を何行取得するかという値。デフォ
ルトは40。
@item mew-pop-header-only
POP でメッセージを取得する際に、ヘッダのみにするか、本文も取得するか。
@samp{nil} でなければ、ヘッダのみを取得。デフォルトは @samp{nil}。
@end ifset
@ifset us
@item mew-pop-server
The name of your POP server. 
@item mew-pop-ssh-server
The name of SSH server which forwards the POP3 port.
@item mew-pop-ssl
If non-nil, POP connections are made over SSL.
@item mew-pop-ssl-port
The port for POP over SSL.
@item mew-pop-user
The user name on your POP server. The default is your login name.
@item mew-pop-auth
The authentication method for POP3. 'pass means the authentication with
USER/PASS (i.e. plain password). 'apop means the authentication with
APOP. @samp{t} means SASL according to @samp{mew-pop-auth-list}. The
default is 'apop.
@item mew-pop-auth-list
A list of SASL methods in the preferred order.  Currently, "CRAM-MD5"
can be used.
@item mew-pop-delete
Whether or not delete messages on a POP server after retrieval by POP.
If @samp{t}, delete the messages. If @samp{nil}, retain the messages.
If number N, delete the messages N days after the first access. The
default is @samp{t}.
@item mew-pop-size
The limit size of messages to be retrieved by POP. The default is 55296
byte. 0 means unlimited, so you can get all messages from the POP
server. To know how to retrieve the rest of a truncated message, please
refer to @xref{retrieving}.
@item mew-pop-body-lines
*The limit of body lines to get when the size of message exceeds
@samp{mew-pop-size}. The default is 40.
@item mew-pop-header-only
Whether or not the body of a message is retrieved by POP.  If non-nil,
only header is retrieved. The default is @samp{nil}
@end ifset
@end vtable

@c %%%%%%%%%%%%%%%%%
@node imap, nntp, pop, Customize
@ifset jp
@section IMAP
@end ifset
@ifset us
@section IMAP
@end ifset

@ifset jp
Mew では、メッセージを受信する際に IMAP を利用できます。ここでは、IMAP 
を制御するための以下の変数についてまとめます。
@end ifset
@ifset us
Mew can use IMAP to retrieve messages. This section describes following
variables to control IMAP.
@end ifset

@vtable @samp
@ifset jp
@item mew-imap-server
IMAP サーバの名前。
@item mew-imap-ssh-server
IMAP を SSH 経由で取得する場合の SSH サーバの名前。
@item mew-imap-ssl
IMAP over SSL を使うか否か。
@item mew-imap-ssl-port
IMAP over SSL のポート番号。
@item mew-imap-user
IMAP のアカウント名。初期値はログイン名。
@item mew-imap-auth
IMAP の認証方式。@samp{nil} は LOGIN (生パスワード)、@samp{t} は 
@samp{mew-imap-auth-list} に基づいた SASL 意味する。初期値は @samp{t}。
@item mew-imap-auth-list
SASL で利用する認証方式のリスト。優先順位の高い順に並べる。現在、
"CRAM-MD5" と "LOGIN" が利用可能。
@item mew-imap-delete
IMAP サーバからメッセージを取得後、IMAP サーバにあるメッセージを削除するか
否か。@samp{t} なら削除。@samp{nil} なら削除しない。数値 N なら、最初の
アクセスから N 日後に削除する。初期値は @samp{t}。
@item mew-imap-size
IMAP サーバから取得するメッセージの大きさの上限。初期値は 55296 バイト。
0 に設定すると、上限なしの意味になり、すべてのメッセージを取得する。上限
に引っ掛かったメッセージの全体を取得する方法については、
@xref{retrieving} を参照のこと。
@item mew-imap-header-only
IMAP でメッセージを取得する際に、ヘッダのみにするか、本文も取得するか。
@samp{nil} でなければ、ヘッダのみを取得。デフォルトは @samp{nil}。
@end ifset
@ifset us
@item mew-imap-server
The name of your IMAP server. 
@item mew-imap-ssh-server
The name of SSH server which forwards the IMAP4 port.
@item mew-imap-ssl
If non-nil, IMAP connections are made over SSL.
@item mew-imap-ssl-port
The port for IMAP over SSL.
@item mew-imap-user
The user name on the IMAP server. The default is your login name.
@item mew-imap-auth
The authentication method for IMAP4. nil means the authentication with
LOGIN (i.e. plain password). @samp{t} means SASL according to
@samp{mew-imap-auth-list}. The default is @samp{t}.
@item mew-imap-auth-list
A list of SASL methods in the preferred order.
Currently, "CRAM-MD5" and "LOGIN" can be used.
@item mew-imap-delete
Whether or not delete messages on an IMAP server after retrieval by
IMAP. If @samp{t}, delete the messages. If @samp{nil}, retain the
messages.  If number N, delete the messages N days after the first
access.  Otherwise they are not deleted. The default is @samp{t}.
@item mew-imap-size
The limit size of messages to be retrieved by IMAP. The default is 55296
byte. 0 means unlimited, so you can get all messages from the IMAP
server. To know how to retrieve the rest of a truncated message, please
refer to @xref{retrieving}.
@item mew-imap-header-only
Whether or not the body of a message is retrieved by IMAP. If non-nil,
only header is retrieved. The default is @samp{nil}
@end ifset
@end vtable

@c %%%%%%%%%%%%%%%%%
@node nntp, smtp, imap, Customize
@ifset jp
@section NNTP
@end ifset
@ifset us
@section NNTP
@end ifset

@ifset jp
Mew では、ニュースを読み書きする際に NNTP を利用します。ここでは、NNTP 
を制御するための以下の変数についてまとめます。
@end ifset
@ifset us
Mew uses NNTP to read/write News articles. This section describes
following variables to control NNTP.
@end ifset

@vtable @samp
@ifset jp
@item mew-nntp-server
NNTP サーバの名前。
@item mew-nntp-ssh-server
NNTP を SSH 経由で取得する場合の SSH サーバの名前。
@item mew-nntp-ssl
NNTP over SSL を使うか否か。
@item mew-nntp-ssl-port
NNTP over SSL のポート番号。
@item mew-nntp-user
NNTP のアカウント名。もし @samp{nil} でなければ、認証の手続きが実行され
る。(mew-nntp-auth という変数はないことに注意。)
@item mew-nntp-newsgroup
デフォルトのニュースグループ名。
@item mew-nntp-size
NNTP サーバから取得するメッセージの大きさの上限。初期値は 55296 バイト。
0 に設定すると、上限なしの意味になり、すべてのメッセージを取得する。上限
に引っ掛かったメッセージの全体を取得する方法については、
@xref{retrieving} を参照のこと。
@item mew-nntp-header-only
NNTP でメッセージを取得する際に、ヘッダのみにするか、本文も取得するか。
@samp{nil} でなければ、ヘッダのみを取得。デフォルトは @samp{nil}。
@item mew-nntp-msgid-user
Message-Id: を作成するためのユーザ名。@samp{nil} であれば 
@samp{mew-user} の値が利用される。初期値は @samp{nil}。
Message-Id: の書式は以下を参照。
@item mew-nntp-msgid-domain
Message-Id: を作成するためのドメイン名。@samp{nil} であれば 
@samp{mew-mail-domain} の値が利用される。初期値は @samp{nil}。
Message-Id: の書式は以下を参照。
@end ifset
@ifset us
@item mew-nntp-server
The name of your NNTP server.
@item mew-nntp-ssh-server
The name of SSH server which forwards the NNTP port.
@item mew-nntp-ssl
If non-nil, NNTP connections are made over SSL.
@item mew-nntp-ssl-port
The port for NNTP over SSL.
@item mew-nntp-user
The user name on the NNTP server. If non-nil, authentication is used.
(Note that mew-nntp-auth does not exist.)
@item mew-nntp-newsgroup
The name of default Newsgroup.
@item mew-nntp-size
The limit size of messages to be retrieved by NNTP. The default is 55296
byte. 0 means unlimited, so you can get all messages from the NNTP
server.
@item mew-nntp-header-only
Whether or not the body of a message is retrieved by NNTP. If non-nil,
only header is retrieved.
@item mew-nntp-msgid-user
A user name for creation of Message-Id:. If @samp{nil}, the value of
@samp{mew-user} is used. The default is @samp{nil}.
@item mew-nntp-msgid-domain
A domain name for creation of Message-Id:. If @samp{nil}, the value of
@samp{mew-mail-domain} is used. The default is @samp{nil}.
@end ifset
@end vtable

@ifset jp
なお、NNTP 用の Message-Id: の値は以下のように作成されます。
@end ifset
@ifset us
A value of Message-Id: for NNTP is created by the following rule:
@end ifset

@example
message-id = *random*.nntp-msgid-user@@nntp-msgid-domain
@end example

@c %%%%%%%%%%%%%%%%%
@node smtp, config, nntp, Customize
@ifset jp
@section SMTP
@end ifset
@ifset us
@section SMTP
@end ifset

@ifset jp
Mew では、メッセージを送信する際に SMTP を利用します。ここでは、SMTP を
制御するための以下の変数についてまとめます。
@end ifset
@ifset us
Mew uses SMTP to send messages. This section describes following
variables to control SMTP.
@end ifset

@vtable @samp
@ifset jp
@item mew-smtp-server
SMTP サーバの名前。
@item mew-smtp-port
SMTP ポート番号。
@item mew-smtp-ssh-server
SSH 経由でメッセージを送る際の SSH サーバの名前。
@item mew-smtp-ssl
SMTP over SSL を使うか否か。
@item mew-smtp-ssl-port
SMTP over SSL のポート番号。
@item mew-smtp-user
SMTP AUTH で利用されるアカウント名。もし @samp{nil} でなければ、認証の手
続きが実行される。(mew-smtp-auth という変数はないことに注意。)
@item mew-smtp-auth-list
SMTP AUTH で利用する認証方式のリスト。優先順位の高い順に並べる。デフォル
トは、'("CRAM-MD5" "PLAIN" "LOGIN")。
@item mew-smtp-helo-domain
SMTP HELO コマンドで使われるサーバ名。初期値は "localhost"。
@item mew-smtp-mail-from
SMTP MAIL FROM コマンドで指定されるアドレス。@samp{nil} の場合は、From: 
フィールドのアドレスが指定される。初期値は @samp{nil}。
@item mew-smtp-msgid-user
Message-Id: を作成するためのユーザ名。@samp{nil} であれば 
@samp{mew-user} の値が利用される。初期値は @samp{nil}。
Message-Id: の書式は以下を参照。
@item mew-smtp-msgid-domain
Message-Id: を作成するためのドメイン名。@samp{nil} であれば 
@samp{mew-mail-domain} の値が利用される。初期値は @samp{nil}。
Message-Id: の書式は以下を参照。
@item mew-use-8bit
8 ビットテキストを符号化せずにそのまま送るか否か。@samp{nil}の場合は、適
切な MIME 符号化が施される。初期値は @samp{nil}。
@end ifset
@ifset us
@item mew-smtp-server
The name of your SMTP server.
@item mew-smtp-port
The port for SMTP.
@item mew-smtp-ssh-server
The name of SSH server which forwards the SMTP port.
@item mew-smtp-ssl
If non-nil, SMTP connections are made over SSL.
@item mew-smtp-ssl-port
The port for SMTP over SSL.
@item mew-smtp-user
The user name on your SMTP server. If non-nil, authentication is used.
(Note that mew-smtp-auth does not exist.)
@item mew-smtp-auth-list
A list of SMTP AUTH methods in the preferred order.
Currently, "CRAM-MD5", "PLAIN", and "LOGIN" can be used.
@item mew-smtp-helo-domain
An e-mail domain to tell a SMTP server with HELO/EHLO. The default is
"localhost".
@item mew-smtp-mail-from
The default is @samp{nil}. An e-mail address to tell a SMTP server with
MAIL FROM:. If nil, an address specified by the From: field is used.
@item mew-smtp-msgid-user
A user name for creation of Message-Id:. If @samp{nil}, the value of
@samp{mew-user} is used. The default is @samp{nil}.
@item mew-smtp-msgid-domain
A domain name for creation of Message-Id:. If @samp{nil}, the value of
@samp{mew-mail-domain} is used. The default is @samp{nil}.
@item mew-use-8bit
Whether or not send 8bit text without MIME encoding. If @samp{nil}, an
appropriate MIME encoding is applied. The default is @samp{nil}.
@end ifset
@end vtable

@ifset jp
なお、SMTP 用の Message-Id: の値は以下のように作成されます。
@end ifset
@ifset us
A value of Message-Id: for SMTP is created by the following rule:
@end ifset

@example
message-id = *random*.smtp-msgid-user@@smtp-msgid-domain
@end example

@ifset jp
Message Submission (ポート番号が 587 である送信用の SMTP)を使いたい場合
は、以下のように設定して下さい。
@end ifset
@ifset us
If you want to use Message Submission (SMTP for submission whose port
number is 587), configure as follows:
@end ifset

@example
(setq mew-smtp-port "587")
@end example


@c %%%%%%%%%%%%%%%%%
@node config, custom-misc, smtp, Customize
@ifset jp
@section 送受信の動作変化
@end ifset
@ifset us
@section Changing receiving/sending behavior
@end ifset
@vindex mew-config-alist
@vindex mew-case-synchronize
@vindex mew-case-guess-alist
@vindex mew-case-guess-when-replied-alist
@vindex mew-mailbox-type
@vindex mew-proto
@kindex C-cC-o (Draft)

@ifset jp
@samp{mew-config-alist} を使うと、メッセージの送受信に関する動作に変化を
つけられます。以下の設定例を使って説明します。
@end ifset
@ifset us
With @samp{mew-config-alist}, you can differ actions of
sending/receiving messages. Let's look at the following example:
@end ifset

@lisp
(setq mew-config-alist
      '(("home"
         ("inbox-folder"   . "+inbox-home")
         ("pop-server"     . "pop.iij4u.or.jp"))
        ("ext"
         ("pop-ssh-server" . "ssh.mew.org"))
        ("default"
         ("proto"          . "%")
         ("imap-server"    . "imap.mew.org")
         ("pop-server"     . "pop.mew.org"))))
@end lisp

@ifset jp
この例では、"home"、"ext"、"default" という 3 つのケースを定めています。
それぞれのケースに対して、いくつかのキーと値の対が設定されています。
@end ifset
@ifset us
This example defines three cases: "home", "ext", "default". For each
case, some pair of key and value are defined.
@end ifset

@ifset jp
この例を使って、@samp{mew-config-alist}の意味を説明します。ケースを 
"home" にして "pop-server" を索くと、"pop.iij4u.or.jp" が得られます。ケー
スを "ext" にして "pop-server" を索くと、"ext" には該当するキーがないの
で、"default" を見て、"pop.mew.org" が得られます。ケースを "default" に
して "pop-server" を索くと、"pop.mew.org" が得られます。
@end ifset
@ifset us
We explain the semantics of @samp{mew-config-alist} with this example.
If the case is "home", looking up "pop-server" results in
"pop.iij4u.or.jp". If the case is "ext", looking up "pop-server" results
in "pop.mew.org" since there is no specified key for the case and the
"default" is used. If the case is "default", looking up "pop-server"
results in "pop.mew.org".
@end ifset

@ifset jp
ケースを "home" にして "inbox-folder" を索くと、"+inbox-home" が得られま
す。ケースを "ext" にして "inbox-folder" を索くと、"ext" には該当するキー
がなく、さらに "default" にもないので、@samp{mew-inbox-folder} という変
数の値が得られます。ケースを "default" にして "inbox-folder" を索いた場
合も、@samp{mew-inbox-folder} の値が得られます。
@end ifset
@ifset us
If the case is "home", looking up "inbox-folder" results in
"+inbox-home". If the case is "ext", looking up "inbox-folder" results
in the value of @samp{mew-inbox-folder} since there is no specified key
for both "ext" and "default".  If the case is "default", looking up
"inbox-folder" also results in the value of @samp{mew-inbox-folder}.
@end ifset

@ifset jp
"proto" (@samp{mew-proto})は、@samp{M-x mew} と入力された際に、どのフォ
ルダに移動するか指定するために使います。(Mew を起動するために @samp{M-x
mew} と入力する場合、"default" ケースの "proto" が利用されます。Mew が起
動している際に、@samp{M-x mew} と入力すると入力ケースに従って、"proto" 
が選ばれます。)
@end ifset
@ifset us
"proto" (@samp{mew-proto}) is used to specify a folder which is selected
when you type @samp{M-x mew}. (If you input @samp{M-x mew} when Mew is
not executed, ""proto" for the "default" case is used. If you type
@samp{M-x mew} when Mew is running, "proto" is chosen according to the
value of the receiving case.
@end ifset

@ifset jp
値の候補は、"+"、"$"、"%"、"-" です。これらは標準では、"+inbox"、
"$inbox"、"%inbox"、"-fj.mail.reader.mew" を意味します。
@end ifset
@ifset us
Candidates of the value are "+", "$", "%", and "-". These means
"+inbox", "$inbox", "%inbox", "-fj.mail.reader.mew" without any special
configuration.
@end ifset

@ifset jp
@samp{mew-config-alist} で設定できるキーのほとんどは、@samp{mew-"キー"} 
という変数に対応しています。以下に設定できる項目を列挙します。
@end ifset
@ifset us
Each key which can be specified in @samp{mew-config-alist} corresponds
to the variable @samp{mew-"key"}. The following list enumerates such
keys.
@end ifset

@example
"name", "user", "mail-domain", 
"cc", "fcc", "dcc", "reply-to", "organization", "header-alist", 
"proto", 
"smtp-server", "smtp-port", "smtp-ssh-server", "smtp-ssl", "smtp-ssl-port", 
"smtp-user", "smtp-auth-list", 
"smtp-msgid-user", "smtp-msgid-domain", "smtp-helo-domain", "smtp-mail-from", 
"pop-server", "pop-port", "pop-ssh-server", "pop-ssl", "pop-ssl-port", 
"pop-user", "pop-auth", "pop-auth-list", 
"pop-size", "pop-header-only", "pop-delete", "pop-body-lines",
"imap-server", "imap-port", "imap-ssh-server", "imap-ssl", "imap-ssl-port", 
"imap-user", "imap-auth", "imap-auth-list", 
"imap-size", "imap-header-only", "imap-delete", 
"imap-trash-folder", "imap-queue-folder", "imap-spam-field", "imap-spam-word",
"nntp-server", "nntp-port", "nntp-ssh-server", "nntp-ssl", "nntp-ssl-port", 
"nntp-user", "nntp-size", "nntp-header-only", 
"nntp-msgid-user", "nntp-msgid-domain", 
"ssl-cert-directory", "ssl-verify-level', 
"inbox-folder", "queue-folder", "postq-folder", 
"mailbox-type", "mbox-command", "mbox-command-arg",
"use-retrieve", "signature-file", "content-type", "refile-guess-alist", 
"spam-prog", "spam-prog-args", "ham-prog", "ham-prog-args", 
"use-old-pgp"
@end example

@ifset jp
"name"、"user"、"mail-domain" は以下の規則にしたがって、From: の値にな
ります。
@end ifset
@ifset us
A value for From: is made of "name", "user", "mail-domain" according
to the following rule:
@end ifset

@example
from = name <user@@mail-domain>
@end example

@ifset jp
自分で @samp{mew-from-list} を設定していない場合は、上記のルールに従い各
ケースの from を集めて、@samp{mew-from-list} が自動的に設定されます。
@xref{cheader}を参照のこと。
@end ifset
@ifset us
Unless you set @samp{mew-from-list} by yourself, @samp{mew-from-list} is
automatically set collecting "from" for each case according to the rule
above. See @xref{cheader}.
@end ifset

@ifset jp
@samp{mew-config-alist} に設定したケースを、受信ケースと送信ケースに指定
できます。Mew の起動時は、受信ケースと送信ケース、ともに "default" になっ
ています。
@end ifset
@ifset us
Cases configured in @samp{mew-config-alist} can be specified to the
receiving case and the sending case. When Mew boots up, both the
receiving case and the sending case are "default".
@end ifset

@ifset jp
Summary モードにおいて、受信ケースと送信ケースを変更するには @samp{C}
を利用します。ケースには、@samp{TAB} で補完、@samp{C-cTAB} で循環的な補
完が効きます。
@end ifset
@ifset us
If you want to change both the receiving case and the sending case,
type @samp{C}. You can use completion by @samp{TAB} and circular
completion by @samp{C-cTAB}.
@end ifset

@ifset jp
@samp{mew-case-synchronize} という変数を @samp{nil} に設定すると、受信
ケースと送信ケースを独立に設定できるようになります。この場合、@samp{C} 
が受信ケース用で、@samp{C-uC} が送信ケース用です。
@end ifset
@ifset us
If you set @samp{mew-case-synchronize} to @samp{nil}, you can specify
the receiving case and the sending case independently. With this
configuration, @samp{C} is for the receiving case and @samp{C-uC} is for
the sending case.
@end ifset

@ifset jp
いずれか一方、あるいは両方のケースが "default" 以外の値をとった場合は、
Summary モードのモードラインに表示されます。以下は受信ケース、送信ケース
がそれぞれ、"home"、"ext" となっている場合の例です。
@end ifset
@ifset us
If one of the cases or both are not "default", they are displayed in the
mode line of Summary mode. The following is an example where the
receiving case is "home" and the sending case is "ext".
@end ifset

@example
(Summary home:ext)
@end example


@ifset jp
Draft モードでは、送信ケース "default" でない場合、モードラインにその値
が表示されます。以下は、送信ケースが "home" である場合の例です。
@end ifset
@ifset us
In Draft mode, if the sending case is not "default", the value is
displayed in mode line. The following is an example that the sending
case is "home".
@end ifset

@example
(Draft home)
@end example

@ifset jp
Draft モードにおいて、その草稿の送信ケースを変更するには、@samp{C-cC-o} 
を用います。"mail-domain" キーや "header-alist" キーに対応する値に応じて、
ヘッダが動的に変更されます。なお、この送信ケースは、その Draft モードに
固有になります。
@end ifset
@ifset us
To change the sending case of a draft in Draft mode, use @samp{C-cC-o}.
Its header is dynamically modified according to the value of the
"mail-domain" key and the "header-alist" key. Note that the sending case
is a local variable of the Draft mode.
@end ifset

@ifset jp
Draft モードでは、送信ケースを自動的に設定することもできます。
@end ifset
@ifset us
You can automatically set the sending case in Draft mode.
@end ifset

@vtable @samp
@ifset jp
@item mew-case-guess-when-prepared
この変数が @samp{t} の場合、草稿が用意されたときに、
@samp{mew-case-guess-alist} に従って送信ケースが設定される。初期値は 
@samp{t}。
@item mew-case-guess-when-composed
この変数が @samp{t} の場合、メッセージが作成されたときに、
@samp{mew-case-guess-alist} に従って送信ケースが設定される。初期値は 
@samp{nil}
@item mew-case-guess-when-replied
この変数が @samp{t} の場合、返答によって草稿が用意されたときに、
@samp{mew-case-guess-when-replied-alist} に従って送信ケースが設定される。
初期値は @samp{t}。
@end ifset
@ifset us
@item mew-case-guess-when-prepared
If this variable is @samp{t}, the sending case is automatically guessed
according @samp{mew-case-guess-alist} when a draft is prepared. The
default is @samp{t}.
@item mew-case-guess-when-composed
If this variable is @samp{t}, the sending case is automatically guessed
according @samp{mew-case-guess-alist} when a message is composed. The
default is @samp{nil}.
The default is @samp{nil}
@item mew-case-guess-when-replied
If this variable is @samp{t}, the sending case is automatically guessed
according @samp{mew-case-guess-alist} when a draft is prepared by
replying. The default is @samp{t}.
@end ifset
@end vtable

@ifset jp
@samp{mew-case-guess-alist} と @samp{mew-case-guess-when-replied-alist} 
の書式は、@samp{mew-refile-guess-alist} と同じです。詳しくは、
@xref{by-alist} を参照して下さい。
@end ifset
@ifset us
The syntax of @samp{mew-case-guess-alist} and
@samp{mew-case-guess-when-replied-alist} is the same as
@samp{mew-refile-guess-alist}. For more information, please refer to
@xref{by-alist}.
@end ifset

@ifset jp
Draft モードで草稿を送信するために @samp{C-cC-c} を使うと、Draft モード
の送信ケースが SMTP/NNTP サーバなどを決定するために利用されます。Summary 
モードで +queue/+postq のメッセージを送り出すために @samp{C-cC-c} を利用
すると、Summary モードの送信ケースが利用されます。たとえ、その送信ケース
が Draft モードで指定されていた送信ケースと違ってもです。Summary モード
で@samp{C-uC-cC-c} を使うと、+queue/+postq のメッセージを送り出すための
ケースが指定できます。
@end ifset
@ifset us
When typing @samp{C-cC-c} in Draft mode to send a draft, the sending
case in Draft mode is used to determine an SMTP/NNTP server, etc. When
typing @samp{C-cC-c} in Summary mode to flush messages in +queue/+postq,
the sending case in Summary mode is used even if it is different from
the one which was used in Draft mode. @samp{C-uC-cC-c} in Summary mode
let you specify a case to flush messages in +queue/postq.
@end ifset


@ifset jp
以下にケースに関するコマンドをまとめます。
@end ifset
@ifset us
The following is a summary of commands concerned with case.
@end ifset

@table @samp
@ifset jp
@item C
Summary モードにおいて、ケースを設定する。@samp{mew-case-synchronize} の
値が @samp{t} (初期値)なら、送信ケースと受信ケースを設定する。@samp{nil}
なら、受信ケースのみを設定する。
@item C-uC
Summary モードにおいて、ケースを設定する。@samp{mew-case-synchronize} 
の値が @samp{t} なら、送信ケースと受信ケースを設定する。@samp{nil}なら、
送信ケースのみを設定する。
@item C-cC-o
Draft モードにおいて、その草稿の送信ケースを設定する。
@end ifset
@ifset us
@item C
In Summary mode, set the receiving case or both cases.  If
@samp{mew-case-synchronize} is @samp{t} (this is default), set both
cases. If @samp{nil}, set the receiving case only.
@item C-uC
In Summary mode, set the sending case or both cases.  If
@samp{mew-case-synchronize} is @samp{t}, set both cases. If
@samp{nil}, set the sending case only.
@item C-cC-o
In Draft mode, set the sending case of a draft.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node custom-misc, Tips, config, Customize
@ifset jp
@section その他
@end ifset
@ifset us
@section Miscellaneous
@end ifset
@vindex mew-use-samba-encoding
@vindex mew-cs-samba

@ifset jp
環境によっては、添付ファイルをセーブする際に、ファイル名を SAMBA 形式に
すると便利なことがあります。この場合、@samp{mew-use-samba-encoding} を 
@samp{t} にして下さい。ファイル名として、どの文字コードを利用するかは、
@samp{mew-cs-samba} で指定できます。初期値は @samp{shift_jis} です。
@end ifset
@ifset us
In a certain environment, it would be useful to encode a file with SAMBA
encoding when saving an attached file. For this, set
@samp{mew-use-samba-encoding} to @samp{t}. You can set
@samp{mew-cs-samba} to a character set for the file name. The default is
@samp{shift_jis}.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Tips
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Tips, region, custom-misc, Top
@ifset jp
@chapter さらなる一歩
@end ifset
@ifset us
@chapter Advanced usage
@end ifset

@menu
@ifset jp
* region::                      リージョン
* visiting::                    移動
* SSH::                         Secure SHell
* SSL::                         Secure Socket Layer
* TLS::                         Transport Layer Security
* spam::                        スパム
* spam2::                       スパム(2)
* biff::			Biff
@end ifset
@ifset us
* region::                      Region
* visiting::                    Visiting another buffer
* SSH::                         Secure SHell
* SSL::                         Secure Socket Layer
* TLS::                         Transport Layer Security
* spam::                        Spam messages
* spam2::                       Spam messages (2)
* biff::			Biff
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node region, visiting, Tips, Tips
@ifset jp
@section リージョン
@end ifset
@ifset us
@section Region
@end ifset

@ifset jp
Summary モードには、@samp{C-u}付きで呼び出すと、リージョンに作用するコ
マンドがあります。これらのコマンドは、ビジブルなリージョンが指定されて
いる場合は、@samp{C-u}なしでもそのリージョンに作用します。
@end ifset
@ifset us
In Summary mode, there are commands which work for a region if called
with @samp{C-u}. If a visible region is specified, these commands work
for the region without @samp{C-u}.
@end ifset

@ifset jp
Emacs では、以下の設定を "~/.emacs" に入れると、ビジブルなリージョンが
利用できるようになります。
@end ifset
@ifset us
For Emacs, you can use the visible region feature by putting the
following into your "~/.emacs".
@end ifset

@lisp
(transient-mark-mode 1)
@end lisp

@ifset jp
XEmacs では、デフォルトでビジブルなリージョンが利用できます。
@end ifset
@ifset us
You can use the visible region feature with XEmacs by default.
@end ifset

@ifset jp
以下に、該当するコマンドを列挙しておきます。
@end ifset
@ifset us
Here is a summary of such commands.
@end ifset

@example
@samp{?}, @samp{tt}, @samp{'}, @samp{"}, @samp{x}, @samp{lx}, @samp{ma}, @samp{Md}, @samp{S}, @samp{mlc}, @samp{*}, @samp{$}, @samp{d}, @samp{u}
@end example

@ifset jp
@samp{*}, @samp{$}, @samp{d}, @samp{u} は、直前に数字を入力することで、
繰り返しの回数を指定することもできます。たとえば、@samp{3*} は 3 つのメー
ルに @samp{*} マークを付けます。数字の前に @samp{C-u} は不要です。
@end ifset
@ifset us
Also you can specify a repeat count before you call @samp{*},
@samp{$}, @samp{d}, @samp{u}.  For example, typing @samp{3d} puts the
@samp{*} mark onto three messages.  You don't have to type @samp{C-u}
before the number.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node visiting, SSH, region, Tips
@ifset jp
@section 移動
@end ifset
@ifset us
@section Visiting another buffer
@end ifset
@vindex mew-visit-queue-after-sending
@vindex mew-visit-inbox-after-setting-case
@kindex C-cC-o (Summary)

@ifset jp
Draft モードにおいて、@samp{C-cC-m} でメッセージを作成し送信キューに入
れた後、+queue に移動したい場合は、
@samp{mew-visit-queue-after-sending} を @samp{t} に設定して下さい。
@end ifset
@ifset us
If you want to move to +queue after making a message and putting it to
+queue with @samp{C-cC-m} in Draft mode, set
@samp{mew-visit-queue-after-sending} to @samp{t}.
@end ifset

@ifset jp
Summary モードにおいて、@samp{C} でケースを設定した後に、各 inbox に移
動したい場合は、@samp{mew-visit-inbox-after-setting-case} を @samp{t}
に設定しましょう。
@end ifset
@ifset us
If you want to visit to an appropriate inbox after setting case with
@samp{C} in Summary mode, set
@samp{mew-visit-inbox-after-setting-case} to @samp{t}.
@ifset us

@end ifset

@ifset jp
Summary モードから、一番数字の小さい草稿(Draft モード)に移動するには、
@samp{C-cC-o} が利用できます。
@end ifset
@ifset us
If you want to move from Summary mode to a draft (Draft mode) whose
name is the smallest number, type @samp{C-cC-o}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node SSH, SSL, visiting, Tips
@ifset jp
@section Secure SHell
@end ifset
@ifset us
@section Secure SHell
@end ifset
@vindex mew-pop-ssh-server

@ifset jp
Mew は SSH として、SSH バージョン 1、2 および OpenSSH をサポートしてい
ます。Mew から SSH を利用する前に、必ずコマンド・ラインで "ssh" を実行
し、SSH サーバの公開鍵を取得して下さい。すなわち、ユーザのパスワードか、
ローカルのマシンの秘密鍵を復号化するためのパスワードを入力すれば、サー
バにログインできる状態にして下さい。なお、"ssh-agent" を利用すれば、秘
密鍵を復号化するためのパスワードの入力を省略できます。
@end ifset
@ifset us
Mew supports SSH version 1 and version 2 and OpenSSH for SSH. You must
execute "ssh" on the command and obtain server's public key before you
use Mew with SSH. That is, you should set up so that you can login the
server with your user password or with the password to decrypt the
secret key of the local machine. Of source, you can omit the password
to decrypt the secret key if you use "ssh-agent".
@end ifset

@ifset jp
後は、各プロトコルの SSH に関する変数を設定して下さい。たとえば、POP
over SSH を利用する場合は、@samp{mew-pop-ssh-server} に SSH サーバの名
前を設定しましょう。
@end ifset
@ifset us
After that, you should configure SSH variables relating to each
protocol. For example, if you want to use POP over SSH, set
@samp{mew-pop-ssh-server} to your SSH server name.
@end ifset

@ifset jp
SSH で通信が保護されている場合、テキスト Emacs では、モードラインに
"[Sec]" と表示されます。グラフィカル Emacs では、モードラインに錠前の絵
が表示されます。
@end ifset
@ifset us
While a connection is protected by SSH, Text Emacs displays "[Sec]" in
the mode line. On Graphical Emacs, a picture of a lock is shown in the
mode line.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node SSL, TLS, SSH, Tips
@ifset jp
@section Secure Socket Layer
@end ifset
@ifset us
@section Secure Socket Layer
@end ifset
@vindex mew-ssl-cert-directory
@vindex mew-ssl-verify-level
@vindex mew-pop-ssl
@vindex mew-pop-ssl-port

@ifset jp
SSL を使うには、認証局方式の信用モデルを理解している必要があります。現
在、Mew は SSL のために "stunnel" バージョン 3 とバージョン 4 をサポー
トしています。
@end ifset
@ifset us
Before you use SSL, you should understand the trust model of
certificate authorities(CA). Currently, Mew supports "stunnel" version
3 and version 4 for SSL.
@end ifset

@ifset jp
Mew で利用する前に、SSL サーバに対して "stunnel" で SSL のコネクション
が張れるかを確かめて下さい。"stunnel" は、"openssl" のライブラリをリン
クしているので、"openssl" の知識が必要です。
@end ifset
@ifset us
Before you use Mew with SSL, you must be sure that an SSL connection
can be established to your SSL server. Since "stunnel" is linked to
the "openssl" library, you should understand "openssl".
@end ifset

@ifset jp
信用する証明書を保存しておくディレクトリを "~/.certs" だとしましょう。
ここに "openssl" の "certs" ディレクトリに付いてくる PEM 形式の証明書を
"<ハッシュ>.0" という名前でコピーします。
@end ifset
@ifset us
Suppose we use "~/.certs" as a directory where certificates of trusted
CAs are contained. You need to copy PEM-format certificates embedded
in the source of "openssl" to this director. Each name should be
"<hash>.0".
@end ifset

@ifset jp
ここでは、PEM 形式の証明書のファイル名を "ca.pem" だとしましょう。「<ハッ
シュ>」は以下のように計算できます。
@end ifset
@ifset us
Here we call a sample CA certificate "ca.pem". You can calculate
<hash> as follows:
@end ifset

@example
% openssl x509 -hash -noout -in ca.pem
@end example

@ifset jp
"~/.certs/" へコピーするには、以下のようにします。
@end ifset
@ifset us
To copy the certificate, do as follows:
@end ifset

@example
% cp ca.pem ~/.certs/`openssl x509 -hash -noout -in ca.pem`.0
@end example

@ifset jp
"openssl" に付いてくる証明書は、世の中で使われている CA すべてを網羅で
きていません。あなたが利用するサーバの証明書が、他の CA から発行された
場合、その CA の証明書を同様にコピーしておく必要があります。以下のペー
ジに CA の証明書がたくさん置いてあります。
@end ifset
@ifset us
The certificates in the source of "openssl" do not cover all CAs.  If
the certificate of your SSL server is signed by another CA, you must
copy the certificate of the CA to the directory. You may be able to
find appropriate certificate from the following page:
@end ifset

@example
http://www.columbia.edu/~ariel/good-certs/ns45/
@end example

@ifset jp
Mew で "stunnel" を制御する重要な変数は 2 つです。
@samp{mew-ssl-cert-directory} は、信用する CA の証明書を置いておくディ
レクトリであり、デフォルトは "~/.certs" です。また、
@samp{mew-ssl-verify-level} で、証明書を検証するレベルを指定できます。
デフォルトのレベルは 1 です。
@end ifset
@ifset us
There are two important Mew variables to control "stunnel".
@samp{mew-ssl-cert-directory} is the directory where you install
certificates of trusted CAs. It's default value if "~/.certs".  Also,
you can set the verification level with @samp{mew-ssl-verify-level}.
It's default to 1.
@end ifset

@ifset jp
後は各プロトコルの SSL に関する変数を設定して下しさい。たとえば、POP
over SSL を利用するには、@samp{mew-pop-ssl} を @samp{t} にします。また、
ポート番号が標準と異なる場合には、@samp{mew-pop-ssl-port} を設定して下
さい。
@end ifset
@ifset us
Then configure SSL-related variables of each protocol. For example, if
you want to use POP over SSL, set @samp{mew-pop-ssl} to @samp{t}.
Also, if its port is not a standard one, configure
@samp{mew-pop-ssl-port}.
@end ifset

@example
(setq mew-pop-ssl t)
@end example

@ifset jp
SSL で通信が保護されている場合、テキスト Emacs では、モードラインに
"[Sec]" と表示されます。グラフィカル Emacs では、モードラインに錠前の絵
が表示されます。
@end ifset
@ifset us
While a connection is protected by SSL, Text Emacs displays "[Sec]" in
the mode line. On Graphical Emacs, a picture of a lock is shown in the
mode line.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node TLS, spam, SSL, Tips
@ifset jp
@section Transport Layer Security
@end ifset
@ifset us
@section Transport Layer Security
@end ifset

@ifset jp
Mew では SSL の代りに TLS を利用することもできます。TLS の実現は、SSL
と同様 "stunnel" に頼っています。ですので、TLS を利用する際には、
@xref{SSL} の説明に従って設定して下さい。
@end ifset
@ifset us
Mew can use TLS instead of SSL. To enable TLS, Mew relies on
"stunnel", too. So, before using TLS, you should configure
according to the explanations in @xref{SSL}.
@end ifset

@ifset jp
次に、SSL のポート番号を守りたいプロトコルと同じポート番号に設定します。
たとえば、POP では以下のようにします。
@end ifset
@ifset us
Then, set the SSL port to the same one of the protocol to be
protected. For instance, configure as follows for POP:
@end ifset

@example
(setq mew-pop-ssl t)
(setq mew-pop-ssl-port "pop3") ;; The default is "pop3s" (995)
@end example

@ifset jp
すなわち、SSL のポート番号と保護したいプロトコルのポート番号が同じであ
れば TLS、異なれば SSL が利用されます。
@end ifset
@ifset us
That is, if the SSL port is the same as the port of the protocol to be
protected, TLS is used. Otherwise, SSL is used.
@end ifset

@ifset jp
以下は、Message Submission を TLS で守るための設定例です。
@end ifset
@ifset us
The following is an example to protect Message Submission with TLS.
@end ifset

@example
(setq mew-smtp-port "587") ;; The default is "smtp" (25)
(setq mew-smtp-ssl t)
(setq mew-smtp-ssl-port "587") ;; The default is "smtps" (465)
@end example


@c %%%%%%%%%%%%%%%%%
@node spam, spam2, TLS, Tips
@ifset jp
@section スパム
@end ifset
@ifset us
@section Spam messages
@end ifset
@vindex mew-spam
@vindex mew-inbox-action-alist
@vindex mew-imap-spam-field
@vindex mew-imap-spam-word
@vindex mew-imap-spam-folder

@ifset jp
(1) スパムのフィルタが POPサーバやIMAPサーバ側で動いている場合：

POP で +inbox にメッセージを取得したり、$inbox や %inbox でメッセージの
一覧を取ったりする場合に、スパムに自動的に @samp{D} マークを付けること
ができます。
@end ifset
@ifset us
(1) In the case where a spam filter is running on your POP server or
your IMAP server.

You can put the @samp{D} mark to spam messages while you are
retrieving messages in +inbox or you are scanning messages in
$inbox/%inbox.
@end ifset

@ifset jp
Bogofilter を利用している場合は、以下の設定を "~/.mew.el" に入れて下さ
い。
@end ifset
@ifset us
If you use "bogofilter", put the following to your "~/.mew.el".
@end ifset

@example
(defun mew-spam-bogofilter (val)
  (let ((case-fold-search t))
    (if (string-match "yes" val) ?D)))

(setq mew-inbox-action-alist
      '(("X-Bogosity:" mew-spam-bogofilter)))
@end example

@ifset jp
Spamassassin の場合は、まず "~/.emacs" に次の設定をいれます。
@end ifset
@ifset us
If you use "spamassassin", put the following to your "~/.emacs".
@end ifset

@example
(setq mew-spam: "X-Spam-Flag:")
@end example

@ifset jp
次に、以下の設定を "~/.mew.el" に入れて下さい。
@end ifset
@ifset us
Then put the following to your "~/.mew.el".
@end ifset

@example
(defun mew-spam-assassin (val)
  (let ((case-fold-search t))
    (if (string-match "yes" val) ?D)))

(setq mew-inbox-action-alist
      '(("X-Spam-Flag:" mew-spam-assassin)))
@end example

@ifset jp
bsfilter を使う場合は、bsfilter に含まれているマニュアルを参照して下さ
い。
@end ifset
@ifset us
In the case where you want to use bsfilter, see a document in the
bsfilter package.
@end ifset


@ifset jp
(2) スパムのフィルタが IMAP サーバ側で動いている場合：

%inbox でメッセージの一覧を取る際に、IMAP サーバの中でスパムを消去、ま
たは、他のフォルダへ移動させることができます。Bogofilter を利用している
場合|は、以下のような設定を"~/.mew.el" に加えて下さい。
@end ifset
@ifset us
(2) In the case where a spam filter is running in your IMAP server.

You can delete or move spam messages while you are scanning %inbox.
If you use "bogofilter", put the following to your "~/.mew.el".
@end ifset

@example
(setq mew-imap-spam-field "X-Bogosity")
(setq mew-imap-spam-word "Yes")
@end example

@ifset jp
@samp{mew-imap-spam-folder} あるいは @samp{mew-imap-trash-folder} が定
義されていれば、そのフォルダへスパムが移動します。そうでなければ、スパ
ムは消去されます。
@end ifset
@ifset us
If @samp{mew-imap-spam-folder} or @samp{mew-imap-trash-folder} is
defined, spam messages are moved to the folder. Otherwise, they are
removed.
@end ifset

@ifset jp
(3) ローカルで bogofilter を動かして、一括して @samp{*} マークを付ける
方法もあります。まず、以下のスクリプトをインストールして下さい。
@end ifset
@ifset us
(3) In the case where you installed "bogofilter" in your local machine,
you can put the @samp{*} mark to spam messages. First you need to install
the following script, say "bogo":
@end ifset

@example
#!/bin/sh

bogofilter -v -T -B $* | grep S
@end example

@ifset jp
このスクリプト名を "bogo" だとしましょう。Summary モードで @samp{"} を
実行し、コマンド名に "bogo" を指定すれば、スパムに @samp{*} マークが付
きます。あとは、@samp{md} + @samp{x} などで処理するといいでしょう。
@end ifset
@ifset us
Then type @samp{"}, specify "bogo", and spam messages are marked with
@samp{*}. After that, you may want to process them with @samp{md} +
@samp{x}.
@end ifset

@ifset jp
(4) POPサーバを利用しており、サーバ側ではスパムのフィルタを動かせないが、
メッセージの取得時にマークを付けたい場合：
@end ifset
@ifset us
(4) In the case where you use POP and a spam filter does not run on
the POP server but you want to mark spam messages when retrieving
@end ifset

@ifset jp
bsfilter は、POP の代理サーバとなる機能があるので、これを実現できます。
詳しくは bsfilter に含まれているマニュアルを参照して下さい。
@end ifset
@ifset us
Since bsfilter can be a POP proxy server, you can implement your
policy. See a document in the bsfilter package.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node spam2, biff, spam, Tips
@ifset jp
@section スパム(2)
@end ifset
@ifset us
@section Spam messages(2)
@end ifset
@kindex lh (Summary)
@kindex ls (Summary)
@vindex mew-spam-prog
@vindex mew-spam-prog-args
@vindex mew-ham-prog
@vindex mew-ham-prog-args

@ifset jp
Summary モードで読んでいる現在のメッセージを、フィルターにスパムとして
学習させるには @samp{ls} を使います。同様に、ハム(スパムでないメッセー
ジ)として学習させるには @samp{lh} を利用して下さい。
@end ifset
@ifset us
If you want to let your filter learn the current message in Summary as
a spam, type @samp{ls}. Likewise type @samp{hs} to let your filter
learn it as a ham (non-spam).
@end ifset

@ifset jp
両者のコマンドを使用するためには、4つの変数を設定して置く必要があります。
ここでは bogofilter を例題にとり、3つのケースについて説明します。
@end ifset
@ifset us
To use these commands, you need to configure four variables in advance.
We consider bogofilter as an example and see three cases.
@end ifset

@ifset jp
(1) ローカルのフィルターに学習させる場合：
@end ifset
@ifset us
(2) To let your local filter learn:
@end ifset

@example
(setq mew-spam-prog "bogofilter")
(setq mew-spam-prog-args '("-s" "-N" "-v"))
(setq mew-ham-prog "bogofilter")
(setq mew-ham-prog-args '("-n" "-S" "-v")))
@end example

@ifset jp
(2) サーバ(<server>)側のフィルターに SSH 経由で学習させる場合：
@end ifset
@ifset us
(2) To let your filter on your <server> learn via SSH:
@end ifset

@example
(setq mew-spam-prog "ssh")
(setq mew-spam-prog-args '("<server>" "bogofilter" "-s" "-N" "-v"))
(setq mew-ham-prog "ssh")
(setq mew-ham-prog-args '("<server>" "bogofilter" "-n" "-S" "-v")))
@end example

@ifset jp
(3) ファイアウォール(<firewall>)の先のサーバ(<server>)のフィルターに
多段の SSH 経由で学習させる場合：
@end ifset
@ifset us
(3) To pass through your <firewall> with SSH and to let your filter on
your <server> learn via SSH:
@end ifset

@example
(setq mew-spam-prog "ssh")
(setq mew-spam-prog-args '("-A" "<firewall>" "ssh" "<server>" "bogofilter" "-s" "-N" "-v"))
(setq mew-ham-prog "ssh")
(setq mew-ham-prog-args '("-A" "<firewall>" "ssh" "<server>" "bogofilter" "-n" "-S" "-v")))
@end example

@ifset jp
なお SSH を利用する場合、関連するホストには、パスワードなしでログインで
きるように設定しておく必要があります。
@end ifset
@ifset us
If you use SSH, you need to configure related hosts so that you can
login them without passwords.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node biff, Convention, spam2, Tips
@ifset jp
@section Biff
@end ifset
@ifset us
@section Biff
@end ifset
@vindex mew-biff
@vindex mew-biff-bell
@vindex mew-biff-interval

@ifset jp
メッセージが到着したか定期的に調べる機能を biff といいます。Mew では、
以下の設定をすると、5 分ごとに新規メッセージが何個あるか調べるようにな
ります。
@end ifset
@ifset us
The functionality to check new messages is called biff. With the
following configuration Mew sees how many new messages have arrived
every 5 minutes.
@end ifset

@example
(setq mew-biff t)
@end example

@ifset jp
新規メッセージがあれば、その数がモードラインに表示されます。
@end ifset
@ifset us
If one or more new messages exist, the total number is displayed in
the mode line.
@end ifset

@ifset jp
Biff の対象となるサーバとプロトコルは、Mew の起動時に @samp{mew-proto}
と入力ケース(@samp{mew-case-input})から決定されます。
@end ifset
@ifset us
The server and the protocol, which Mew checks, are decided according
to input case (@samp{mew-case-input}) and @samp{mew-proto} on boot
time.
@end ifset

@ifset jp
以下の設定をすると、新規メッセージがない状態からある状態に変った際に、
ビープ音が鳴ります。
@end ifset
@ifset us
With the following configuration, Mew beeps when the number of new
messages changes from zero to one or more.
@end ifset

@example
(setq mew-biff-bell t)
@end example

@ifset jp
メッセージの到着を調べる間隔を変えるには、@samp{mew-biff-interval} を設
定して下さい。以下は、10分にする例です。
@end ifset
@ifset us
To change the interval time of biff, set @samp{mew-biff-interval}.
Below is an example to set it to 10 minutes.
@end ifset

@example
(setq mew-biff-interval 10)
@end example

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Message Convention
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Convention, Implementation, biff, Top
@ifset jp
@chapter メッセージの作法
@end ifset
@ifset us
@chapter E-mail convention
@end ifset

@ifset jp
メッセージをやりとりする際には、最低限のマナーがあります。マナーを守って
いないメッセージは読みにくいため、大変損します。簡潔かつ適切な文章を書き、
なるべく相手に理解してもらえるよう努力しましょう。
@end ifset
@ifset us
When you exchange messages with other people, you should obey minimum
manner. It gives a bad impression to the people if you violate the
manner since such messages are hard to read. We always should try to
write concise yet comprehensive explanations and make an effort to make
receivers well-understood.
@end ifset

@ifset jp
メッセージを書く際に気を付けるべき項目を以下に示します。
@end ifset
@ifset us
We should take good care of the following items.
@end ifset

@table @asis
@ifset jp
@item To: と Cc: を正しく書く
To: が目的の人で、Cc: は参考までに送り付ける人です。自分のアドレスが Cc: 
の場合は、読み飛ばす人がいますから注意して下さい。また、不必要なアドレス
を To: や Cc: に書いて、相手に迷惑をかけてしまうことがないようにしましょ
う。
@end ifset
@ifset us
@item Fill To: and Cc: fields precisely
To: is for target receivers and Cc: is for those who are received for
their information. If his address is not on To:, he might skip to read
the message. We should take care not to deliver to wrong people by
mistaking the addresses.
@end ifset

@ifset jp
@item To: と Cc: に書くアドレスの数は少なくする
アドレスをたくさん To: や Cc: に書くのはよくないことです。面倒でもメーリ
ングリストを作りましょう。あるいは、必要に応じて宛先を匿名にしましょう
(@xref{anonymous})。
@end ifset
@ifset us
@item The number of addresses To: and Cc: should be small
It is discouraged to specify a lot of mail addresses on To: and Cc:. You
should create a mailing-list instead. Or, if necessary, you should make
the destination anonymous (@xref{anonymous}).
@end ifset

@ifset jp
@item Subject: には本文の内容を的確に短く書く
Subject: を見て読むか決める人がいますから、不適切な Subject: だと読んで
もらえないかもしれません。長い Subject: は読みにくいので止めましょう。
@end ifset
@ifset us
@item Write a short and clear summary of body in Subject:
There are people who decide to read contents from their Subject:. So,
they might skip messages with improper Subject:. We should not write a
long subject since it is hard to read.
@end ifset

@ifset jp
@item 改行は行末を、空行は改段落を表す。1行は半角70文字程度にとどめる
意味もなく1行おきに書いたり、なん行にも渡って改行しないのは読みづらいで
す。とくに行が長いと引用するのに困ります。また、行頭にいくつかの空白文字
を入れて右によせて書く人がいますが、これも無意味です。テキストの表示は、
使っているコンピュータでまちまちですから、結局自分のコンピュータでみため
がよくても、他人のコンピュータでそうであるとは限らないのです。
@end ifset
@ifset us
@item Carriage return means end of line and null line expresses end of paragraph. One line should be limited to 70 characters or so. 
It is very hard to read if you write a message on every other line or in
a long line without folding. Especially long lines are trouble to
cite. Some people write a message with indent but it is
meaningless. Text is displayed differently on each machines, so even if
the layout is excellent on your machine, it might not be so on other
machines.
@end ifset

@ifset jp
@item 必要な部分だけを引用する
面倒でも不要な部分は削りましょう。Mew を使っていれば、引用は楽勝のはずで
す。
@end ifset
@ifset us
@item Cite only necessary sentences
You should not bother to remove unnecessary sentences. With Mew,
citation must be a piece of cake.
@end ifset

@ifset jp
@item シグニチャは簡素にする
長いシグニチャは単なる自己満足です。
@end ifset
@ifset us
@item Make your signature simple
A long signature is just self-satisfaction.
@end ifset

@ifset jp
@item いたずらメッセージを送らない
こんなことは注意したくありませんが、それでも不幸のメッセージなどを送って
くる人がいます。人格を疑われることを理解すべきです。
@end ifset
@ifset us
@item Do not send prank messages
I do not want to warn this kind of stuff. Nonetheless, someone sends
Happy or Unhappy messages to others. You should understand that people
doubt your character.
@end ifset

@ifset jp
@item 相手の読めるデータのみを添付する
なんの合意もなしに送ってよいデータはテキストのみです。それ以外のデータを
送る場合は、あらかじめ相手に送ってよいか確認をとりましょう。メーリングリ
ストには、テキストのみを投稿するのが無難でしょう。
@end ifset
@ifset us
@item Attach data files that the receivers can read
It is text only that you can send without any agreement with the
receivers. If you want to send data files other than text, you should
make an agreement with the receivers. To mailing-list, you should send
text only.
@end ifset
@end table

@ifset jp
また、インターネットのマナーは RFC1855 を読むといいでしょう。著者は、正
確な文章の書き方について学生のためにまとめた入門書を WWW で公開していま
す。興味があれば、以下の URL にアクセスして下さい。

@example
http://www.Mew.org/~kazu/doc/japanese.html
@end example
@end ifset

@ifset us
If you wish to learn manner on the Internet more comprehensively, please
refer to RFC1855.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Implementation
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Implementation, Avail, Convention, Top
@ifset jp
@chapter 実装について
@end ifset
@ifset us
@chapter Implementation Issues
@end ifset

@table @asis
@ifset jp
@item "mewl" と "mewencode" が必要なのはなぜ？
Mew では、Summary mode でメッセージを取得している間や、一覧を再表示して
いる間に、メッセージを読み進めることができます。これは、プログラムの制御
の流れが複数必要であることを意味しています。Emacs で制御の流れを複数にす
るには、サブプロセスを作るか、TCP コネクションを張るしか方法がありません
(Emacs Lisp には light weight process がありません)。POP や SMTP には、
TCP コネクションを使うので問題ありません。しかし、Summary mode の一覧を
再表示するためには、何かコマンドを起動しないといけません。これが、
"mewl" が存在する理由です。"mewencode" が存在する理由は、単に速度のため
です。MIME の符号化を Emacs Lisp で実装したところ、使い物にならないぐら
い遅かったので、"mewencode" を使い続けています。(ただし、Base64 が Emacs 
で実装されていれば、そちらを使います。)

@item 文字列検索(@samp{C-s}、@samp{C-r})すると、行末にカーソルが飛ぶのはなぜ？
Summary mode において、スレッド情報は表示されません。これは、Summary
mode で表示されている行に関しては、表示する瞬間にスレッド情報に非表示
の属性を付けるからです。非表示の属性がついている部分は文字列検索の対象
にはなりません。しかし、Summary mode に表示されていない行のスレッド情
報は、非表示の属性がついていないため、検索の対象となります。そして、合
致した行が表示される際に非表示の属性がついて、あたかも行末に合致したか
のような錯覚を受けます。Summary mode 全体の行のスレッド情報には、キー
の入力がない時間に非表示の属性が付きます。全体に非表示の属性が付くと、
Summary mode のモードラインの右端にある @samp{*} マークが消えます。こ
の状態では、文字列検索が直感通りに働きます。

@end ifset
@ifset us
@item Why are "mewl" and "mewencode" necessary?
With Mew, you can read throw messages in Summary mode while you are
retrieving messages or listing the messages again. This means that
multiple control flows of program are necessary. To make multiple
control flows by Emacs, the only way is to make a TCP connection or to
execute sub-process(Emacs Lisp does NOT provide a feature of light
weight process). For POP and SMTP, Mew makes a TCP connection, so they
are not a problem. However, to list the messages in Summary mode again,
we have to execute a command. This is why "mewl" exists. The reason why
"mewencode" exists is just for speed. When I programmed MIME encoding by
Emacs Lisp in several ways, they are too slow to use.  So, I decided to
continue to use "mewencode". (If Base64 is implemented by Emacs, Mew
uses the native function.)

@item Why does the cursor jump onto the end of line when searching(@samp{C-s}, @samp{C-r})?
Thread informations are not displayed in Summary mode. This is because
the "invisible" property is dynamically put onto them when
displayed. Strings with this property is not a target of the string
search. But, thread informations of undisplayed lines do not have this
property, so the string search targets them. Then a matched line is
displayed and the "invisible" property is put. So, it seems to you that
the string search matches the end of the line. Mew puts the "invisible"
property for all lines in Summary mode in background while there are no
user key inputs. When this word is finished, the @samp{*} mark in the
right side of the mode line in Summary mode disappears. In this
situation, string search works exactly as you expect.

@end ifset
@end table

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Avail
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Avail, ftp, Implementation, Top
@ifset jp
@chapter 入手方法とメーリングリスト
@end ifset
@ifset us
@chapter Availability and mailing-list
@end ifset

@ifset jp
ここでは、Mew の入手方法とメーリングリストについて触れます。
@end ifset
@ifset us
This chapter describes how to get Mew and related mailing-lists.
@end ifset

@menu
@ifset jp
* ftp::                         Mew の入手方法
* ml::                          メーリングリスト
@end ifset
@ifset us
* ftp::                         How to get Mew?
* ml::                          Mailing list
@end ifset
@end menu 

@c %%%%%%%%%%%%%%%%%
@node ftp, ml, Avail, Avail
@ifset jp
@section Mew の入手方法
@end ifset
@ifset us
@section How to get Mew?
@end ifset

@ifset jp
Mewの最新バージョンは以下から入手できます。
@end ifset
@ifset us
The latest Mew is available from the following repository.
@end ifset

@example
ftp://ftp.Mew.org/pub/Mew/mew-current.tar.gz
@end example

@ifset jp
ときどきサンプルメッセージが以下のように提供されます。
@end ifset
@ifset us
Samples are given time to time under the following file name:
@end ifset

@example
ftp://ftp.Mew.org/pub/Mew/samples.tar.gz
@end example

@c %%%%%%%%%%%%%%%%%
@node ml, Copyright, ftp, Avail
@ifset jp
@section メーリングリスト
@end ifset
@ifset us
@section Mailing list
@end ifset

@ifset jp
新しいバージョンは、
@end ifset
@ifset us
A new version is announced to 
@end ifset

@example
mew-release@@Mew.org
@end example

@ifset jp
で英語でアナウンスしています。入りたい人は
@end ifset
@ifset us
in English. If you wish to join, please send a message to
@end ifset

@example
mew-release-subscribe@@Mew.org
@end example

@ifset jp
宛にメッセージを送って下さい。mew-release には著者以外が投稿できないよう
に制限が加えられています。
@end ifset
@ifset us
This list is under access control so that nobody but the author can
post.
@end ifset

@ifset jp
Mew の質問や議論などは、

@example
mew-dist@@Mew.org
@end example

に日本語で投稿できます。mew-dist へ入りたい人は

@example
mew-dist-subscribe@@Mew.org
@end example

へメッセージを送って下さい。

Mew の質問は、著者個人宛ではなく、できるだけ mew-dist へお願いします。著
者には受け取ったすべての質問に答えている時間はありません。mew-dist へ質
問すると、他の人が答えてくれることを期待できます。
@end ifset
@ifset us
To ask questions or discuss features of Mew, please send messages to

@example
mew-int@@Mew.org
@end example

in English.

Questions about Mew should be sent, not to the author, but to mew-int.
The author does not have enough time to answer all questions received.
If you send a question to mew-int, another person may answer.
@end ifset

@ifset jp
メーリングリストへ入る方法の詳細は、以下を参照して下さい。
@end ifset
@ifset us
To know how to subscribe to a mailing-list in more detail, please gain
access to:
@end ifset

@example
http://www.Mew.org/ML/
@end example

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Copyright
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Copyright, Variable Index, ml, Top
@ifset jp
@chapter 著作権について
@end ifset
@ifset us
@chapter Copyright
@end ifset

@ifset jp
Mew は以下の著作権に従います。

Copyright (C) 1994-2005 Mew developing team.@*
All rights reserved.

変更の有無にかかわらず、ソースおよびバイナリ形式の再配布および利用は、以
下の条件を満たしていれば、これを許可する。

@enumerate
@item
ソース・コードの再配布は、上記の著作権表示、この条件項目、および、以下の
免責事項を保存しなければならない。
@item
バイナリ形式の再配布は、上記の著作権表示、この条件項目、および、以下の免
責事項を、その配布に付随する説明書、あるいはその他の資料のいずれかに明記
しなければならない。
@item
前もって特別に許諾を得ない限り、このソフトウェアから派生した製品の推奨や
販売促進のために、このチーム名と貢献者達の名前を利用してはならない。
@end enumerate

このソフトウェアは「このままの形で」提供され、明示的あるいは言外の保証
は、商用利用および特定目的への適合に対する言外の保証も含み、またこれら
だけに限らず、存在しない。たとえ以下のような損害の可能性を示唆されてい
たとしても、どのような形にしろこのソフトウェアの利用から発生した問題に
おいて、このチームと貢献者達は、(代替製品やサービスの調達; 利用権、デー
タ、あるいは利益の損失; あるいは営業の中断を含む、またこれらだけに限ら
ず)直接的に、間接的に、偶然に、特別に、懲罰上、あるいは、必然的に生じ
てしまった損害に対し責任はなく、いかなる責任理論上でも契約の有無に係わ
らず厳密な責任はなく、また(過失あるいはその他を含む)不法行為に対しても
責任はない。
@end ifset
@ifset us
Mew conforms the following copyright.

Copyright (C) 1994-2005 Mew developing team.@*
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

@enumerate
@item
Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
@item
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
@item
Neither the name of the team nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.
@end enumerate

THIS SOFTWARE IS PROVIDED BY THE TEAM AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE TEAM OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@end ifset

@ifset jp
CD ROM に入れて配布したいという方は、できるだけ教えて下さい。教えてくれ
なくても怒りませんが、教えて頂けるとありがたいです。配布を断ったことは
ありません。
@end ifset
@ifset us
If you wish to distribute Mew in CD or something, please let me know. I
do not go mad even if you do not tell me but I'm very glad if you do so.
I never have declined requirements.
@end ifset

@ifset jp
このマニュアルの著作権は、著者に属します。複製、改変、再配布は自由です
が、無保証です。また、このマニュアルから発生した被害に対し、著者は一切
責任を負いません。
@end ifset
@ifset us
The copyright of this manual belongs to the author. Permission is
granted to copy, modify, redistribute this manual but no warranty.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c      Variable Index
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Variable Index, Key Index, Copyright, Top
@ifset jp
@chapter 変数索引
@end ifset
@ifset us
@chapter Variable Index
@end ifset

@printindex vr

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c      Key Index
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Key Index, , Variable Index, Top
@ifset jp
@chapter キー索引
@end ifset
@ifset us
@chapter Key Index
@end ifset

@printindex ky

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Tailer
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@shortcontents
@contents
@bye
