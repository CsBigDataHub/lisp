;; Object jabber/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "jabber/"
  :tables (list 
   (semanticdb-table "jabber-modeline.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("jabber-presence" include nil nil [868 894]) ("jabber-alert" include nil nil [895 918]) ("cl" include nil nil [938 951]) ("defgroup" code nil nil [954 1041]) ("jabber-mode-line-compact" variable (:default-value t) nil [1043 1181]) ("jabber-mode-line-string" variable nil nil [1183 1219]) ("jabber-mode-line-presence" variable nil nil [1220 1258]) ("jabber-mode-line-contacts" variable nil nil [1259 1297]) ("jabber-mode-line-newmail" variable nil nil [1307 1344]) ("jabber-send-presence" function (:arguments ("after" "jsp-update-mode-line" "show")) nil [1346 1506]) ("jabber-mode-line-presence-update" function nil nil [1509 1812]) ("jabber-mode-line-count-contacts" function (:arguments ("&rest" "ignore")) nil [1814 2722]) ("define-minor-mode" code nil nil [2724 3906]) ("jabber-modeline" package nil nil [3908 3934]))
    :file "jabber-modeline.el"
    :pointmax 3987
    )
   (semanticdb-table "jabber-core.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [1028 1041]) ("jabber-util" include nil nil [1044 1066]) ("jabber-logon" include nil nil [1067 1090]) ("jabber-conn" include nil nil [1091 1113]) ("condition-case" code nil nil [1160 1225]) ("*jabber-roster*" variable nil nil [1228 1276]) ("jabber-jid-obarray" variable (:default-value (make-vector 127 0)) nil [1278 1354]) ("*jabber-connected*" variable nil nil [1356 1418]) ("*jabber-authenticated*" variable nil nil [1420 1490]) ("*jabber-disconnecting*" variable nil nil [1492 1593]) ("*xmlq*" variable nil nil [1595 1681]) ("jabber-register-p" variable nil nil [1683 1757]) ("jabber-session-id" variable nil nil [1759 1819]) ("jabber-stream-version" variable nil nil [1821 1894]) ("jabber-register-p" variable nil nil [1896 1981]) ("jabber-call-on-connection" variable nil nil [1983 2148]) ("jabber-short-circuit-input" variable nil nil [2150 2286]) ("jabber-message-chain" variable nil nil [2288 2382]) ("jabber-iq-chain" variable nil nil [2384 2476]) ("jabber-presence-chain" variable nil nil [2478 2587]) ("jabber-stream-error-chain" variable (:default-value (quote (jabber-process-stream-error))) nil [2589 2710]) ("jabber-choked-count" variable nil nil [2712 2816]) ("jabber-choked-timer" variable nil nil [2818 2850]) ("defgroup" code nil nil [2852 2926]) ("jabber-post-connect-hook" variable (:user-visible-flag t :default-value (quote (jabber-send-default-presence jabber-muc-autojoin))) nil [2928 3125]) ("jabber-pre-disconnect-hook" variable (:user-visible-flag t) nil [3127 3333]) ("jabber-lost-connection-hook" variable (:user-visible-flag t) nil [3335 3461]) ("jabber-post-disconnect-hook" variable (:user-visible-flag t) nil [3463 3577]) ("jabber-roster-buffer" variable (:default-value "*-jabber-*") nil [3579 3696]) ("jabber-process-buffer" variable (:default-value " *-jabber-process-*") nil [3698 3785]) ("jabber-use-sasl" variable (:default-value t) nil [3787 4066]) ("jabber-have-sasl-p" function nil nil [4068 4188]) ("jabber-connect" function (:user-visible-flag t :arguments ("&optional" "registerp")) nil [4190 6305]) ("jabber-auth-somehow" function (:arguments ("stream-features")) nil [6307 6778]) ("jabber-disconnect" function (:user-visible-flag t) nil [6780 7465]) ("jabber-disconnected" function nil nil [7467 8106]) ("jabber-sentinel" function (:arguments ("process" "event")) nil [8108 8563]) ("jabber-pre-filter" function (:arguments ("process" "string")) nil [8565 8824]) ("jabber-filter" function (:arguments ("process")) nil [8826 12354]) ("jabber-reset-choked" function nil nil [12356 12417]) ("jabber-check-choked" function nil nil [12419 12961]) ("jabber-choked-bail-out" function nil nil [12963 13829]) ("jabber-process-input" function (:arguments ("xml-data")) nil [13831 14704]) ("jabber-process-stream-error" function (:arguments ("xml-data")) nil [14706 14949]) ("jabber-bind-and-establish-session" function (:arguments ("xml-data")) nil [14951 15674]) ("jabber-process-bind" function (:arguments ("xml-data" "successp")) nil [15676 16435]) ("jabber-process-session" function (:arguments ("xml-data" "successp")) nil [16437 16881]) ("jabber-clear-roster" function nil nil [16883 17138]) ("jabber-send-sexp" function (:arguments ("sexp")) nil [17140 17621]) ("jabber-core" package nil nil [17623 17645]))
    :file "jabber-core.el"
    :pointmax 17698
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("when" code nil nil [1069 1156]) ("defgroup" code nil nil [1203 1274]) ("jabber-username" variable (:default-value "emacs") nil [1276 1383]) ("jabber-server" variable (:default-value "magaf.org") nil [1385 1494]) ("jabber-password" variable nil nil [1496 1677]) ("jabber-resource" variable (:default-value "emacs") nil [1679 1767]) ("jabber-default-show" variable nil nil [1769 2080]) ("jabber-default-status" variable nil nil [2082 2177]) ("jabber-default-priority" variable (:default-value 10) nil [2179 2272]) ("jabber-nickname" variable (:default-value jabber-username) nil [2274 2434]) ("jabber-util" include nil nil [2469 2491]) ("jabber-menu" include nil nil [2492 2514]) ("jabber-xml" include nil nil [2515 2536]) ("jabber-conn" include nil nil [2537 2559]) ("jabber-core" include nil nil [2560 2582]) ("jabber-logon" include nil nil [2583 2606]) ("jabber-roster" include nil nil [2607 2631]) ("jabber-presence" include nil nil [2632 2658]) ("jabber-alert" include nil nil [2659 2682]) ("jabber-chat" include nil nil [2683 2705]) ("jabber-disco" include nil nil [2706 2729]) ("jabber-iq" include nil nil [2730 2750]) ("jabber-widget" include nil nil [2751 2775]) ("jabber-register" include nil nil [2776 2802]) ("jabber-search" include nil nil [2803 2827]) ("jabber-browse" include nil nil [2828 2852]) ("jabber-muc" include nil nil [2853 2874]) ("jabber-version" include nil nil [2875 2900]) ("jabber-ahc-presence" include nil nil [2901 2931]) ("jabber-modeline" include nil nil [2932 2958]) ("jabber-keepalive" include nil nil [2959 2986]) ("jabber-watch" include nil nil [2987 3010]) ("jabber-activity" include nil nil [3011 3037]) ("jabber-vcard" include nil nil [3038 3061]) ("jabber-events" include nil nil [3062 3086]) ("jabber-mail-notify" include nil nil [3087 3116]) ("tls" include nil nil [3117 3131]) ("jabber-export-roster" function (:prototype-flag t :user-visible-flag t) nil [3200 3315]) ("jabber-import-roster" function (:prototype-flag t :user-visible-flag t) nil [3316 3415]) ("*jabber-current-status*" variable nil nil [3417 3489]) ("*jabber-current-show*" variable nil nil [3491 3560]) ("*jabber-current-priority*" variable (:default-value 10) nil [3562 3631]) ("*jabber-status-history*" variable nil nil [3633 3700]) ("defgroup" code nil nil [3702 3794]) ("jabber-title-small" variable (:default-value (quote ((t (:weight bold :width semi-expanded :height 1.0 :inherit variable-pitch))))) nil [3796 3954]) ("jabber-title-medium" variable (:default-value (quote ((t (:weight bold :width expanded :height 2.0 :inherit variable-pitch))))) nil [3956 4111]) ("jabber-title-large" variable (:default-value (quote ((t (:weight bold :width ultra-expanded :height 3.0 :inherit variable-pitch))))) nil [4113 4272]) ("defgroup" code nil nil [4274 4338]) ("jabber-debug-log-xml" variable nil nil [4340 4458]) ("jabber-presence-faces" variable (:constant-flag t :default-value (quote (("" . jabber-roster-user-online) ("away" . jabber-roster-user-away) ("xa" . jabber-roster-user-xa) ("dnd" . jabber-roster-user-dnd) ("chat" . jabber-roster-user-chatty) ("error" . jabber-roster-user-error) (nil . jabber-roster-user-offline)))) nil [4460 4795]) ("jabber-presence-strings" variable (:constant-flag t :default-value (quote (("" . "Online") ("away" . "Away") ("xa" . "Extended Away") ("dnd" . "Do not Disturb") ("chat" . "Chatty") ("error" . "Error") (nil . "Offline")))) nil [4797 5056]) ("jabber-customize" function (:user-visible-flag t) nil [5058 5158]) ("jabber-info" function (:user-visible-flag t) nil [5160 5242]) ("jabber" package nil nil [5244 5261]))
    :file "jabber.el"
    :pointmax 5314
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-alert.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("jabber-util" include nil nil [929 951]) ("cl" include nil nil [953 966]) ("defgroup" code nil nil [968 1060]) ("jabber-alert-message-hooks" variable (:default-value (quote (jabber-message-echo jabber-message-scroll))) nil [1062 1832]) ("jabber-message-hooks" variable nil nil [1834 2032]) ("jabber-alert-message-function" variable (:default-value (quote jabber-message-default-message)) nil [2034 2517]) ("jabber-alert-muc-hooks" variable (:default-value (quote (jabber-muc-echo jabber-muc-scroll))) nil [2519 3185]) ("jabber-muc-hooks" variable (:default-value (quote nil)) nil [3187 3381]) ("jabber-alert-muc-function" variable (:default-value (quote jabber-muc-default-message)) nil [3383 3865]) ("jabber-alert-presence-hooks" variable (:default-value (quote (jabber-presence-update-roster jabber-presence-echo))) nil [3867 4679]) ("jabber-presence-hooks" variable (:default-value (quote (jabber-presence-watch))) nil [4681 4906]) ("jabber-alert-presence-message-function" variable (:default-value (quote jabber-presence-default-message)) nil [4908 5453]) ("jabber-alert-info-message-hooks" variable (:default-value (quote (jabber-info-display jabber-info-echo))) nil [5455 6104]) ("jabber-info-message-hooks" variable (:default-value (quote nil)) nil [6106 6321]) ("jabber-alert-info-message-function" variable (:default-value (quote jabber-info-default-message)) nil [6323 6611]) ("jabber-info-message-alist" variable (:default-value (quote ((roster . "Roster display updated") (browse . "Browse request completed")))) nil [6613 6911]) ("jabber-alert-message-wave" variable nil nil [6913 7039]) ("jabber-alert-muc-wave" variable nil nil [7041 7167]) ("jabber-alert-presence-wave" variable nil nil [7169 7297]) ("jabber-alert-info-wave" variable nil nil [7299 7433]) ("define-jabber-alert" function (:arguments ("name" "docstring" "function")) nil [7435 9369]) ("print" code nil nil [9371 9390]) ("define-jabber-alert" code nil nil [9406 9502]) ("define-jabber-alert" code nil nil [9503 9578]) ("jabber-screen" include nil nil [9602 9626]) ("jabber-ratpoison" include nil nil [9627 9654]) ("jabber-sawfish" include nil nil [9655 9680]) ("jabber-festival" include nil nil [9681 9707]) ("jabber-xmessage" include nil nil [9708 9734]) ("jabber-message-default-message" function (:arguments ("from" "buffer" "text")) nil [9759 10151]) ("jabber-message-alert-same-buffer" variable (:default-value t) nil [10153 10305]) ("jabber-message-wave" function (:arguments ("from" "buffer" "text" "proposed-alert")) nil [10307 10511]) ("jabber-message-display" function (:arguments ("from" "buffer" "text" "proposed-alert")) nil [10513 10685]) ("jabber-message-switch" function (:arguments ("from" "buffer" "text" "proposed-alert")) nil [10687 10862]) ("jabber-message-scroll" function (:arguments ("from" "buffer" "text" "proposed-alert")) nil [10864 11913]) ("jabber-muc-default-message" function (:arguments ("nick" "group" "buffer" "text")) nil [11934 12265]) ("jabber-muc-wave" function (:arguments ("nick" "group" "buffer" "text" "proposed-alert")) nil [12267 12465]) ("jabber-muc-display" function (:arguments ("nick" "group" "buffer" "text" "proposed-alert")) nil [12467 12641]) ("jabber-muc-switch" function (:arguments ("nick" "group" "buffer" "text" "proposed-alert")) nil [12643 12820]) ("jabber-muc-scroll" function (:arguments ("nick" "group" "buffer" "text" "proposed-alert")) nil [12822 12989]) ("jabber-presence-default-message" function (:arguments ("who" "oldstatus" "newstatus" "statustext")) nil [13015 14130]) ("jabber-presence-wave" function (:arguments ("who" "oldstatus" "newstatus" "statustext" "proposed-alert")) nil [14132 14357]) ("jabber-presence-display" function (:arguments ("who" "oldstatus" "newstatus" "statustext" "proposed-alert")) nil [14594 14773]) ("jabber-presence-switch" function (:arguments ("who" "oldstatus" "newstatus" "statustext" "proposed-alert")) nil [14775 14957]) ("jabber-info-default-message" function (:arguments ("infotype" "buffer")) nil [14981 15329]) ("jabber-info-wave" function (:arguments ("infotype" "buffer" "proposed-alert")) nil [15331 15525]) ("jabber-info-display" function (:arguments ("infotype" "buffer" "proposed-alert")) nil [15527 15679]) ("jabber-info-switch" function (:arguments ("infotype" "buffer" "proposed-alert")) nil [15681 15836]) ("jabber-alert" package nil nil [15838 15861]))
    :file "jabber-alert.el"
    :pointmax 15914
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-xml.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("xml" include nil nil [923 937]) ("jabber-util" include nil nil [938 960]) ("jabber-escape-xml" function (:arguments ("str")) nil [962 1709]) ("jabber-unescape-xml" function (:arguments ("str")) nil [1711 2262]) ("jabber-sexp2xml" function (:arguments ("sexp")) nil [2264 3328]) ("jabber-xml-skip-tag-forward" function nil nil [3330 4143]) ("jabber-xml-node-name" function (:arguments ("node")) nil [4145 4287]) ("jabber-xml-node-attributes" function (:arguments ("node")) nil [4289 4430]) ("jabber-xml-node-children" function (:arguments ("node")) nil [4432 4699]) ("jabber-xml-get-children" function (:arguments ("node" "child-name")) nil [4701 5043]) ("if" code nil nil [5225 5571]) ("jabber-xml-path" function (:arguments ("xml-data" "path")) nil [5573 6689]) ("jabber-xml-let-attributes" function (:arguments ("attributes" "xml-data" "&rest" "body")) nil [6691 6953]) ("jabber-xml" package nil nil [6955 6976]))
    :file "jabber-xml.el"
    :pointmax 7029
    )
   (semanticdb-table "jabber-logon.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("jabber-xml" include nil nil [927 948]) ("jabber-util" include nil nil [949 971]) ("condition-case" code nil nil [1008 1075]) ("jabber-get-auth" function (:arguments ("to")) nil [1077 1366]) ("jabber-do-logon" function (:arguments ("xml-data" "closure-data")) nil [1368 2389]) ("jabber-process-logon" function (:arguments ("xml-data" "closure-data")) nil [2391 2935]) ("jabber-logon" package nil nil [2937 2960]))
    :file "jabber-logon.el"
    :pointmax 3013
    )
   (semanticdb-table "jabber-iq.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("jabber-core" include nil nil [928 950]) ("jabber-util" include nil nil [951 973]) ("jabber-keymap" include nil nil [974 998]) ("*jabber-open-info-queries*" variable nil nil [1000 1098]) ("jabber-iq-get-xmlns-alist" variable nil nil [1100 1201]) ("jabber-iq-set-xmlns-alist" variable nil nil [1203 1304]) ("jabber-browse-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map jabber-common-keymap) (define-key map [mouse-2] (quote jabber-popup-combined-menu)) map)) nil [1306 1491]) ("jabber-browse-mode-hook" variable nil nil [1493 1603]) ("jabber-browse-mode" function nil nil [1605 1957]) ("put" code nil nil [1959 2005]) ("add-to-list" code nil nil [2007 2056]) ("jabber-process-iq" function (:arguments ("xml-data")) nil [2057 3609]) ("jabber-send-iq" function (:arguments ("to" "type" "query" "success-callback" "success-closure-data" "error-callback" "error-closure-data" "&optional" "result-id")) nil [3611 4891]) ("jabber-send-iq-error" function (:arguments ("to" "id" "original-query" "error-type" "condition" "&optional" "text" "app-specific")) nil [4893 5849]) ("jabber-process-data" function (:arguments ("xml-data" "closure-data")) nil [5851 7058]) ("jabber-iq" package nil nil [7060 7080]))
    :file "jabber-iq.el"
    :pointmax 7133
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-socks5.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("jabber-iq" include nil nil [943 963]) ("jabber-disco" include nil nil [964 987]) ("jabber-si-server" include nil nil [988 1015]) ("jabber-si-client" include nil nil [1016 1043]) ("jabber-socks5-pending-sessions" variable nil nil [1045 1252]) ("jabber-socks5-active-sessions" variable nil nil [1254 1445]) ("jabber-socks5-proxies" variable nil nil [1447 1646]) ("jabber-socks5-proxies-data" variable nil nil [1648 1828]) ("add-to-list" code nil nil [1830 1912]) ("add-to-list" code nil nil [1914 2034]) ("add-to-list" code nil nil [2036 2158]) ("jabber-socks5-set-proxies" function (:arguments ("symbol" "value")) nil [2160 2412]) ("jabber-socks5-query-all-proxies" function (:user-visible-flag t) nil [2414 2666]) ("jabber-socks5-query-proxy" function (:arguments ("jid")) nil [2668 2962]) ("jabber-socks5-process-proxy-response" function (:arguments ("xml-data" "successp")) nil [2964 3719]) ("jabber-socks5-accept" function (:arguments ("jid" "sid" "profile-data-function")) nil [3721 4010]) ("add-to-list" code nil nil [4012 4129]) ("jabber-socks5-process" function (:arguments ("xml-data")) nil [4130 5980]) ("jabber-socks5-connect" function (:arguments ("streamhost" "sid" "initiator" "target")) nil [5982 8502]) ("jabber-socks5-filter" function (:arguments ("connection" "data")) nil [8504 8935]) ("jabber-socks5-sentinel" function (:arguments ("process" "event-string")) nil [8937 9463]) ("jabber-socks5-client-1" function (:arguments ("jid" "sid" "profile-function")) nil [9465 10899]) ("jabber-socks5-client-2" function (:arguments ("xml-data" "jid" "sid" "profile-function")) nil [10901 12091]) ("jabber-socks5-client-3" function (:arguments ("xml-data" "jid" "sid" "profile-function" "proxy-connection")) nil [12093 12445]) ("jabber-socks5" package nil nil [12447 12471]))
    :file "jabber-socks5.el"
    :pointmax 12524
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-vcard.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("jabber-core" include nil nil [2396 2418]) ("jabber-widget" include nil nil [2419 2443]) ("jabber-iq" include nil nil [2444 2464]) ("jabber-vcard-parse" function (:arguments ("vcard")) nil [2466 5960]) ("jabber-vcard-reassemble" function (:arguments ("parsed")) nil [5962 7190]) ("add-to-list" code nil nil [7199 7281]) ("jabber-vcard-get" function (:user-visible-flag t :arguments ("jid")) nil [7283 7585]) ("jabber-vcard-edit" function (:user-visible-flag t) nil [7587 7809]) ("jabber-vcard-fields" variable (:constant-flag t :default-value (quote ((FN . "Full name") (NICKNAME . "Nickname") (BDAY . "Birthday") (URL . "URL") (JABBERID . "JID") (MAILER . "User agent") (TZ . "Time zone") (TITLE . "Title") (ROLE . "Role") (REV . "Last changed") (DESC . "Description") (NOTE . "Note")))) nil [7811 8123]) ("jabber-vcard-name-fields" variable (:constant-flag t :default-value (quote ((PREFIX . "Prefix") (GIVEN . "Given name") (MIDDLE . "Middle name") (FAMILY . "Family name") (SUFFIX . "Suffix")))) nil [8125 8312]) ("jabber-vcard-phone-types" variable (:constant-flag t :default-value (quote ((HOME . "Home") (WORK . "Work") (VOICE . "Voice") (FAX . "Fax") (PAGER . "Pager") (MSG . "Message") (CELL . "Cell phone") (VIDEO . "Video") (BBS . "BBS") (MODEM . "Modem") (ISDN . "ISDN") (PCS . "PCS")))) nil [8314 8653]) ("jabber-vcard-email-types" variable (:constant-flag t :default-value (quote ((HOME . "Home") (WORK . "Work") (INTERNET . "Internet") (X400 . "X400") (PREF . "Preferred")))) nil [8655 8822]) ("jabber-vcard-address-types" variable (:constant-flag t :default-value (quote ((HOME . "Home") (WORK . "Work") (POSTAL . "Postal") (PARCEL . "Parcel") (DOM . "Domestic") (INTL . "International") (PREF . "Preferred")))) nil [8824 9067]) ("jabber-vcard-address-fields" variable (:constant-flag t :default-value (quote ((POBOX . "Post box") (EXTADD . "Ext. address") (STREET . "Street") (LOCALITY . "Locality") (REGION . "Region") (PCODE . "Post code") (CTRY . "Country")))) nil [9069 9292]) ("jabber-vcard-display" function (:arguments ("xml-data")) nil [9294 11267]) ("jabber-vcard-do-edit" function (:arguments ("xml-data" "closure-data")) nil [11269 15002]) ("jabber-vcard-submit" function (:arguments ("&rest" "ignore")) nil [15004 15310]) ("jabber-vcard" package nil nil [15312 15335]))
    :file "jabber-vcard.el"
    :pointmax 15386
    )
   (semanticdb-table "jabber-util.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("jabber-jid-history" variable nil nil [936 995]) ("*jabber-sound-playing*" variable nil nil [997 1066]) ("cond" code nil nil [1068 1362]) ("if" code nil nil [1414 1927]) ("unless" code nil nil [1929 2102]) ("if" code nil nil [2187 2581]) ("unless" code nil nil [2583 2753]) ("unless" code nil nil [2755 2904]) ("if" code nil nil [2906 3220]) ("cond" code nil nil [3222 3430]) ("jabber-jid-username" function (:arguments ("string")) nil [3432 3615]) ("jabber-jid-user" function (:arguments ("string")) nil [3617 3848]) ("jabber-jid-server" function (:arguments ("string")) nil [3850 4011]) ("jabber-jid-rostername" function (:arguments ("string")) nil [4013 4216]) ("jabber-jid-displayname" function (:arguments ("string")) nil [4218 4453]) ("jabber-jid-resource" function (:arguments ("string")) nil [4455 4654]) ("jabber-jid-symbol" function (:arguments ("string")) nil [4656 4945]) ("jabber-my-jid-p" function (:arguments ("jid")) nil [4947 5138]) ("jabber-read-jid-completing" function (:arguments ("prompt" "&optional" "subset" "require-match" "default")) nil [5140 6763]) ("jabber-read-node" function (:arguments ("prompt")) nil [6765 7047]) ("jabber-read-passwd" function (:arguments ("&optional" "prompt")) nil [7049 7264]) ("jabber-iq-query" function (:arguments ("xml-data")) nil [7266 7647]) ("jabber-iq-error" function (:arguments ("xml-data")) nil [7649 7787]) ("jabber-iq-xmlns" function (:arguments ("xml-data")) nil [7789 7966]) ("jabber-x-delay" function (:arguments ("xml-data")) nil [7968 8399]) ("jabber-parse-legacy-time" function (:arguments ("timestamp")) nil [8407 8930]) ("jabber-encode-legacy-time" function (:arguments ("timestamp")) nil [8932 9372]) ("jabber-encode-time" function (:arguments ("time")) nil [9378 9965]) ("jabber-parse-time" function (:arguments ("time")) nil [9967 10894]) ("jabber-report-success" function (:arguments ("xml-data" "context")) nil [10896 11368]) ("jabber-error-messages" variable (:constant-flag t :default-value (list (cons (quote bad-request) "Bad request") (cons (quote conflict) "Conflict") (cons (quote feature-not-implemented) "Feature not implemented") (cons (quote forbidden) "Forbidden") (cons (quote gone) "Gone") (cons (quote internal-server-error) "Internal server error") (cons (quote item-not-found) "Item not found") (cons (quote jid-malformed) "JID malformed") (cons (quote not-acceptable) "Not acceptable") (cons (quote not-allowed) "Not allowed") (cons (quote not-authorized) "Not authorized") (cons (quote payment-required) "Payment required") (cons (quote recipient-unavailable) "Recipient unavailable") (cons (quote redirect) "Redirect") (cons (quote registration-required) "Registration required") (cons (quote remote-server-not-found) "Remote server not found") (cons (quote remote-server-timeout) "Remote server timeout") (cons (quote resource-constraint) "Resource constraint") (cons (quote service-unavailable) "Service unavailable") (cons (quote subscription-required) "Subscription required") (cons (quote undefined-condition) "Undefined condition") (cons (quote unexpected-request) "Unexpected request"))) nil [11370 12483]) ("jabber-legacy-error-messages" variable (:constant-flag t :default-value (list (cons 302 "Redirect") (cons 400 "Bad request") (cons 401 "Unauthorized") (cons 402 "Payment required") (cons 403 "Forbidden") (cons 404 "Not found") (cons 405 "Not allowed") (cons 406 "Not acceptable") (cons 407 "Registration required") (cons 408 "Request timeout") (cons 409 "Conflict") (cons 500 "Internal server error") (cons 501 "Not implemented") (cons 502 "Remote server error") (cons 503 "Service unavailable") (cons 504 "Remote server timeout") (cons 510 "Disconnected"))) nil [12485 13115]) ("jabber-parse-error" function (:arguments ("error-xml")) nil [13119 14175]) ("jabber-stream-error-messages" variable (:default-value (list (cons (quote bad-format) "Bad XML format") (cons (quote bad-namespace-prefix) "Bad namespace prefix") (cons (quote conflict) "Conflict") (cons (quote connection-timeout) "Connection timeout") (cons (quote host-gone) "Host gone") (cons (quote host-unknown) "Host unknown") (cons (quote improper-addressing) "Improper addressing") (cons (quote internal-server-error) "Internal server error") (cons (quote invalid-from) "Invalid from") (cons (quote invalid-id) "Invalid id") (cons (quote invalid-namespace) "Invalid namespace") (cons (quote invalid-xml) "Invalid XML") (cons (quote not-authorized) "Not authorized") (cons (quote policy-violation) "Policy violation") (cons (quote remote-connection-failed) "Remote connection failed") (cons (quote resource-constraint) "Resource constraint") (cons (quote restricted-xml) "Restricted XML") (cons (quote see-other-host) "See other host") (cons (quote system-shutdown) "System shutdown") (cons (quote undefined-condition) "Undefined condition") (cons (quote unsupported-encoding) "Unsupported encoding") (cons (quote unsupported-stanza-type) "Unsupported stanza type") (cons (quote unsupported-version) "Unsupported version") (cons (quote xml-not-well-formed) "XML not well formed"))) nil [14177 15419]) ("jabber-parse-stream-error" function (:arguments ("error-xml")) nil [15421 16271]) ("put" code nil nil [16273 16342]) ("put" code nil nil [16343 16402]) ("jabber-signal-error" function (:arguments ("error-type" "condition" "&optional" "text" "app-specific")) nil [16404 16880]) ("jabber-play-sound-file" function (:arguments ("soundfile")) nil [16882 17452]) ("jabber-util" package nil nil [17454 17476]))
    :file "jabber-util.el"
    :pointmax 17529
    )
   (semanticdb-table "jabber-mail-notify.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("jabber-set-mode-line-notification" function (:arguments ("str")) nil [815 916]) ("jabber-get-jid" function nil nil [918 988]) ("jabber-enable-debug" function nil nil [990 1068]) ("jabber-xml-get-child" function (:arguments ("node" "child-name")) nil [1070 1168]) ("jabber-get-mailbox" function (:arguments ("iq-data")) nil [1170 1248]) ("jabber-get-mailthreads" function (:arguments ("iq-data")) nil [1250 1365]) ("jabber-get-noof-mailthreads" function (:arguments ("iq-data")) nil [1367 1456]) ("jabber-get-mailthread-tid" function (:arguments ("mailthread")) nil [1458 1549]) ("jabber-get-mailthread-date" function (:arguments ("mailthread")) nil [1551 1644]) ("jabber-get-mailthread-subject" function (:arguments ("mailthread")) nil [1646 1753]) ("jabber-get-mailthread-snippet" function (:arguments ("mailthread")) nil [1755 1858]) ("jabber-get-mailthread-senders" function (:arguments ("mailthread")) nil [1860 1982]) ("jabber-build-senders-string" function (:arguments ("senders")) nil [1984 2231]) ("jabber-build-sender-list" function (:arguments ("iq-data")) nil [2233 2653]) ("jabber-build-mailthread-string" function (:arguments ("mailthread")) nil [2655 3018]) ("jabber-build-mailbox-string" function (:arguments ("iq-data")) nil [3193 4482]) ("jabber-display-new-mail" function (:arguments ("iq-data" "context")) nil [4485 4823]) ("jabber-check-new-mail" function nil nil [4840 5590]) ("jabber-receive-new-mail-notification" function (:arguments ("iq-data")) nil [5593 5673]) ("jabber-initialize-mail" function nil nil [5690 5837]) ("add-to-list" code nil nil [5903 6022]) ("add-hook" code nil nil [6057 6119]) ("jabber-mail-notify" package nil nil [6187 6216]))
    :file "jabber-mail-notify.el"
    :pointmax 6254
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
